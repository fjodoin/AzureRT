{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport graphData from './data/graphData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes from JSON\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType\n      });\n    });\n\n    // Add edges from JSON with type\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        // Optional: Use if labels are required for edges\n        color: edge.color,\n        // Use color from JSON\n        type: 'arrow' // Specify the edge type (arrow or line)\n      });\n    });\n\n    // Dynamically position nodes in a circular manner\n    graph.nodes().forEach((node, i) => {\n      const angle = i * 2 * Math.PI / graph.order;\n      graph.setNodeAttribute(node, 'x', 100 * Math.cos(angle));\n      graph.setNodeAttribute(node, 'y', 100 * Math.sin(angle));\n    });\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 53,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","nodes","edges","forEach","node","addNode","id","label","size","color","musicType","edge","addEdge","source","target","type","i","angle","Math","PI","order","setNodeAttribute","cos","sin","setGraph","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport graphData from './data/graphData.json';\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    const { nodes, edges } = graphData;\n\n    // Add nodes from JSON\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n      });\n    });\n\n    // Add edges from JSON with type\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label, // Optional: Use if labels are required for edges\n        color: edge.color, // Use color from JSON\n        type: 'arrow', // Specify the edge type (arrow or line)\n      });\n    });\n\n    // Dynamically position nodes in a circular manner\n    graph.nodes().forEach((node, i) => {\n      const angle = (i * 2 * Math.PI) / graph.order;\n      graph.setNodeAttribute(node, 'x', 100 * Math.cos(angle));\n      graph.setNodeAttribute(node, 'y', 100 * Math.sin(angle));\n    });\n\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma]);\n\n  \n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}