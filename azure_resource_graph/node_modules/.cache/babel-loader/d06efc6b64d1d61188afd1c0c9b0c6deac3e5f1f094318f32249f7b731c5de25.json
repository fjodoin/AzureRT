{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { ForceSupervisor } from \"graphology-layout-force/worker\";\nimport forceAtlas2 from \"graphology-layout-forceatlas2\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport createForceSupervisor from \"graphology-layout-force/worker\";\nimport { EdgeCurvedArrowProgram, DEFAULT_EDGE_CURVATURE, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction rescaleGraphPositions(graph, scaleFactor = 1.5, centerX = 0, centerY = 0) {\n  graph.forEachNode((node, attributes) => {\n    const newX = (attributes.x - centerX) * scaleFactor + centerX;\n    const newY = (attributes.y - centerY) * scaleFactor + centerY;\n    graph.setNodeAttribute(node, \"x\", newX);\n    graph.setNodeAttribute(node, \"y\", newY);\n  });\n}\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes and edges\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 10,\n        color: node.color,\n        resourceType: node.resourceType\n      });\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Initialize Force Layout\n    const supervisor = createForceSupervisor(graph);\n\n    // Start the supervisor\n    supervisor.start();\n\n    // Stop layout after 5 seconds\n    setTimeout(() => supervisor.stop(), 5000);\n\n    // Cleanup on component unmount\n    return () => {\n      supervisor.stop();\n      graph.clear();\n    };\n  }, [graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      const queue = [];\n      graph.forEachNode((node, attributes) => {\n        if (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && attributes.resourceType === selectedCategory) {\n          matchingNodes.add(node);\n          queue.push(node);\n        }\n      });\n      while (queue.length > 0) {\n        const currentNode = queue.shift();\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source);\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target);\n          }\n          relevantEdges.add(edge);\n        });\n      }\n      graph.forEachNode(node => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge(edge => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","forceAtlas2","MultiGraph","EdgeArrowProgram","createForceSupervisor","EdgeCurvedArrowProgram","DEFAULT_EDGE_CURVATURE","indexParallelEdgesIndex","debounce","jsxDEV","_jsxDEV","rescaleGraphPositions","graph","scaleFactor","centerX","centerY","forEachNode","node","attributes","newX","x","newY","y","setNodeAttribute","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","nodes","edges","forEach","addNode","id","label","size","color","resourceType","edge","addEdge","source","target","supervisor","start","setTimeout","stop","clear","getGraph","debouncedRefresh","refresh","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","queue","toLowerCase","includes","add","push","length","currentNode","shift","forEachInEdge","_","has","forEachOutEdge","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { ForceSupervisor } from \"graphology-layout-force/worker\";\nimport forceAtlas2 from \"graphology-layout-forceatlas2\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport createForceSupervisor from \"graphology-layout-force/worker\";\nimport {\n  EdgeCurvedArrowProgram,\n  DEFAULT_EDGE_CURVATURE,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\n\nfunction rescaleGraphPositions(graph, scaleFactor = 1.5, centerX = 0, centerY = 0) {\n  graph.forEachNode((node, attributes) => {\n    const newX = (attributes.x - centerX) * scaleFactor + centerX;\n    const newY = (attributes.y - centerY) * scaleFactor + centerY;\n\n    graph.setNodeAttribute(node, \"x\", newX);\n    graph.setNodeAttribute(node, \"y\", newY);\n  });\n}\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n  \n    const graph = new MultiGraph();\n    const { nodes, edges } = graphData;\n  \n    // Add nodes and edges\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 10,\n        color: node.color,\n        resourceType: node.resourceType,\n      });\n    });\n  \n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2,\n      });\n    });\n  \n    // Initialize Force Layout\n    const supervisor = createForceSupervisor(graph);\n  \n    // Start the supervisor\n    supervisor.start();\n  \n    // Stop layout after 5 seconds\n    setTimeout(() => supervisor.stop(), 5000);\n  \n    // Cleanup on component unmount\n    return () => {\n      supervisor.stop();\n      graph.clear();\n    };\n  }, [graphData]);\n  \n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      const queue = [];\n\n      graph.forEachNode((node, attributes) => {\n        if (\n          (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) ||\n          (selectedCategory && attributes.resourceType === selectedCategory)\n        ) {\n          matchingNodes.add(node);\n          queue.push(node);\n        }\n      });\n\n      while (queue.length > 0) {\n        const currentNode = queue.shift();\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source);\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target);\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      graph.forEachNode((node) => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge((edge) => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}