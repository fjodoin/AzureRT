{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\nimport { indexParallelEdgesIndex, EdgeCurvedArrowProgram } from \"@sigma/edge-curve\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_EDGE_CURVATURE = 0.25;\nfunction getCurvature(index, maxIndex) {\n  if (maxIndex <= 0) throw new Error(\"Invalid maxIndex\");\n  if (index < 0) return -getCurvature(-index, maxIndex);\n  const amplitude = 3.5;\n  const maxCurvature = amplitude * (1 - Math.exp(-maxIndex / amplitude)) * DEFAULT_EDGE_CURVATURE;\n  return maxCurvature * index / maxIndex;\n}\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [frozenNode, setFrozenNode] = useState(null);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 5,\n          color: node.color,\n          resourceType: node.type\n        });\n      }\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2\n      });\n    });\n\n    // Index parallel edges to assign curvature\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n\n    // Assign curvature to edges\n    graph.forEachEdge((edge, {\n      parallelIndex,\n      parallelMaxIndex\n    }) => {\n      const curvature = typeof parallelIndex === \"number\" ? getCurvature(parallelIndex, parallelMaxIndex) : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: curvature ? \"curved\" : \"straight\",\n        curvature\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n    sigma.setGraph(graph);\n    sigma.refresh();\n    return () => graph.clear();\n  }, [graphData, sigma]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    sigma.setSetting(\"nodeReducer\", (node, data) => {\n      const res = {\n        ...data\n      };\n      if (frozenNode) {\n        res.hidden = node !== frozenNode && !graph.areNeighbors(frozenNode, node);\n        res.label = node === frozenNode || graph.areNeighbors(frozenNode, node) ? data.label : \"\";\n      } else {\n        if (searchQuery && !data.label.toLowerCase().includes(searchQuery.toLowerCase())) {\n          res.hidden = true;\n        } else if (selectedCategory && data.resourceType !== selectedCategory) {\n          res.hidden = true;\n        } else if (hoveredNode) {\n          // Show node and its neighbors' labels when hovered\n          res.hidden = hoveredNode !== node && !graph.areNeighbors(hoveredNode, node);\n          res.label = hoveredNode === node || graph.areNeighbors(hoveredNode, node) ? data.label : \"\";\n        } else {\n          res.hidden = false;\n        }\n      }\n      return res;\n    });\n    sigma.setSetting(\"edgeReducer\", (edge, data) => {\n      const res = {\n        ...data\n      };\n      const [source, target] = graph.extremities(edge);\n      if (frozenNode) {\n        // Freeze visualization: only show edges connected to the frozen node\n        res.hidden = source !== frozenNode && target !== frozenNode;\n      } else {\n        // Apply filtering logic\n        if (searchQuery && !graph.getNodeAttribute(source, \"label\").toLowerCase().includes(searchQuery.toLowerCase()) && !graph.getNodeAttribute(target, \"label\").toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && graph.getNodeAttribute(source, \"resourceType\") !== selectedCategory && graph.getNodeAttribute(target, \"resourceType\") !== selectedCategory) {\n          res.hidden = true;\n        } else if (hoveredNode && source !== hoveredNode && target !== hoveredNode) {\n          res.hidden = true;\n        } else {\n          res.hidden = false;\n        }\n      }\n      return res;\n    });\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, hoveredNode, frozenNode, sigma, graphData]);\n  useEffect(() => {\n    if (!sigma) return;\n    const handleNodeHover = ({\n      node\n    }) => {\n      if (!frozenNode) setHoveredNode(node);\n    };\n    const handleNodeOut = () => {\n      if (!frozenNode) setHoveredNode(null);\n    };\n    const handleNodeClick = ({\n      node\n    }) => {\n      setFrozenNode(prevFrozen => prevFrozen === node ? null : node); // Toggle frozen state\n    };\n    sigma.on(\"enterNode\", handleNodeHover);\n    sigma.on(\"leaveNode\", handleNodeOut);\n    sigma.on(\"clickNode\", handleNodeClick);\n    return () => {\n      sigma.off(\"enterNode\", handleNodeHover);\n      sigma.off(\"leaveNode\", handleNodeOut);\n      sigma.off(\"clickNode\", handleNodeClick);\n    };\n  }, [sigma, frozenNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"QS/zMcrIokf0caunSipoM7jrH2c=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      settings: {\n        renderEdgeLabels: true,\n        edgeProgramClasses: {\n          straight: EdgeArrowProgram,\n          // Straight edge rendering\n          curved: EdgeCurvedArrowProgram // Curved edge rendering\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","randomLayout","MultiGraph","debounce","indexParallelEdgesIndex","EdgeCurvedArrowProgram","EdgeArrowProgram","jsxDEV","_jsxDEV","DEFAULT_EDGE_CURVATURE","getCurvature","index","maxIndex","Error","amplitude","maxCurvature","Math","exp","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","hoveredNode","setHoveredNode","frozenNode","setFrozenNode","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","type","edge","addEdge","source","target","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","parallelIndex","parallelMaxIndex","curvature","mergeEdgeAttributes","assign","setGraph","refresh","clear","getGraph","debouncedRefresh","setSetting","data","res","hidden","areNeighbors","toLowerCase","includes","extremities","getNodeAttribute","handleNodeHover","handleNodeOut","handleNodeClick","prevFrozen","on","off","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","settings","renderEdgeLabels","edgeProgramClasses","straight","curved","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\nimport { indexParallelEdgesIndex, EdgeCurvedArrowProgram } from \"@sigma/edge-curve\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\n\nconst DEFAULT_EDGE_CURVATURE = 0.25;\n\nfunction getCurvature(index, maxIndex) {\n  if (maxIndex <= 0) throw new Error(\"Invalid maxIndex\");\n  if (index < 0) return -getCurvature(-index, maxIndex);\n  const amplitude = 3.5;\n  const maxCurvature = amplitude * (1 - Math.exp(-maxIndex / amplitude)) * DEFAULT_EDGE_CURVATURE;\n  return (maxCurvature * index) / maxIndex;\n}\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [frozenNode, setFrozenNode] = useState(null);\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 5,\n          color: node.color,\n          resourceType: node.type,\n        });\n      }\n    });\n\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2,\n      });\n    });\n\n    // Index parallel edges to assign curvature\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n\n    // Assign curvature to edges\n    graph.forEachEdge((edge, { parallelIndex, parallelMaxIndex }) => {\n      const curvature =\n        typeof parallelIndex === \"number\"\n          ? getCurvature(parallelIndex, parallelMaxIndex)\n          : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: curvature ? \"curved\" : \"straight\",\n        curvature,\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    return () => graph.clear();\n  }, [graphData, sigma]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    sigma.setSetting(\"nodeReducer\", (node, data) => {\n      const res = { ...data };\n      \n      if (frozenNode) {\n        res.hidden = node !== frozenNode && !graph.areNeighbors(frozenNode, node);\n        res.label = node === frozenNode || graph.areNeighbors(frozenNode, node) ? data.label : \"\";\n      } else {\n        if (searchQuery && !data.label.toLowerCase().includes(searchQuery.toLowerCase())) {\n          res.hidden = true;\n        } else if (selectedCategory && data.resourceType !== selectedCategory) {\n          res.hidden = true;\n        } else if (hoveredNode) {\n          // Show node and its neighbors' labels when hovered\n          res.hidden = hoveredNode !== node && !graph.areNeighbors(hoveredNode, node);\n          res.label = hoveredNode === node || graph.areNeighbors(hoveredNode, node) ? data.label : \"\";\n        } else {\n          res.hidden = false;\n        }\n      }  \n    \n      return res;\n    });  \n\n    \n    sigma.setSetting(\"edgeReducer\", (edge, data) => {\n      const res = { ...data };\n      const [source, target] = graph.extremities(edge);\n\n      if (frozenNode) {\n        // Freeze visualization: only show edges connected to the frozen node\n        res.hidden = source !== frozenNode && target !== frozenNode;\n      } else {\n        // Apply filtering logic\n        if (\n          (searchQuery &&\n            (!graph.getNodeAttribute(source, \"label\").toLowerCase().includes(searchQuery.toLowerCase()) &&\n              !graph.getNodeAttribute(target, \"label\").toLowerCase().includes(searchQuery.toLowerCase()))) ||\n          (selectedCategory &&\n            (graph.getNodeAttribute(source, \"resourceType\") !== selectedCategory &&\n              graph.getNodeAttribute(target, \"resourceType\") !== selectedCategory))\n        ) {\n          res.hidden = true;\n        } else if (hoveredNode && source !== hoveredNode && target !== hoveredNode) {\n          res.hidden = true;\n        } else {\n          res.hidden = false;\n        }\n      }\n\n      return res;\n    });\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, hoveredNode, frozenNode, sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma) return;\n\n    const handleNodeHover = ({ node }) => {\n      if (!frozenNode) setHoveredNode(node);\n    };\n    const handleNodeOut = () => {\n      if (!frozenNode) setHoveredNode(null);\n    };\n    const handleNodeClick = ({ node }) => {\n      setFrozenNode((prevFrozen) => (prevFrozen === node ? null : node)); // Toggle frozen state\n    };\n\n    sigma.on(\"enterNode\", handleNodeHover);\n    sigma.on(\"leaveNode\", handleNodeOut);\n    sigma.on(\"clickNode\", handleNodeClick);\n\n    return () => {\n      sigma.off(\"enterNode\", handleNodeHover);\n      sigma.off(\"leaveNode\", handleNodeOut);\n      sigma.off(\"clickNode\", handleNodeClick);\n    };\n  }, [sigma, frozenNode]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer\n          settings={{\n            renderEdgeLabels: true,\n            edgeProgramClasses: {\n              straight: EdgeArrowProgram, // Straight edge rendering\n              curved: EdgeCurvedArrowProgram, // Curved edge rendering\n            },\n          }}\n        >\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}