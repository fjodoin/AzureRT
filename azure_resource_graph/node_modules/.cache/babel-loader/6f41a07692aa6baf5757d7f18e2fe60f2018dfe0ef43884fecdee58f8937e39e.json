{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { EdgeArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new Graph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n          x: Math.random() * 500 - 250,\n          y: Math.random() * 500 - 250\n        });\n      }\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Index parallel edges\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n\n    // Configure parallel edge attributes\n    graph.forEachEdge((edge, attributes) => {\n      const {\n        parallelIndex,\n        parallelMaxIndex\n      } = attributes;\n      if (typeof parallelIndex === \"number\") {\n        graph.mergeEdgeAttributes(edge, {\n          type: \"curve\",\n          curvature: (parallelIndex - parallelMaxIndex / 2) * 0.1 // Adjust curvature\n        });\n      }\n    });\n    if (sigma) {\n      // Clear any existing graph\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          arrow: EdgeArrowProgram // Renderer for arrows\n        },\n        renderEdgeLabels: true,\n        defaultEdgeType: \"arrow\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        // Adjust arrow size\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\"\n      });\n\n      // Assign graph to Sigma\n      sigma.setGraph(graph);\n\n      // Start force layout\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10\n      });\n      layout.start();\n      return () => {\n        layout.kill();\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","EdgeArrowProgram","indexParallelEdgesIndex","ForceSupervisor","Graph","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","x","Math","random","y","edge","addEdge","source","target","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","attributes","parallelIndex","parallelMaxIndex","mergeEdgeAttributes","type","curvature","existingGraph","getGraph","clear","setSettings","edgeProgramClasses","arrow","renderEdgeLabels","defaultEdgeType","edgeColor","edgeArrowSizeRatio","edgeLabelSize","edgeLabelWeight","setGraph","layout","gravity","scalingRatio","slowDown","start","kill","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { EdgeArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new Graph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n          x: Math.random() * 500 - 250,\n          y: Math.random() * 500 - 250,\n        });\n      }\n    });\n\n    // Add edges\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2,\n      });\n    });\n\n    // Index parallel edges\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n\n    // Configure parallel edge attributes\n    graph.forEachEdge((edge, attributes) => {\n      const { parallelIndex, parallelMaxIndex } = attributes;\n      if (typeof parallelIndex === \"number\") {\n        graph.mergeEdgeAttributes(edge, {\n          type: \"curve\",\n          curvature: (parallelIndex - parallelMaxIndex / 2) * 0.1, // Adjust curvature\n        });\n      }\n    });\n\n    if (sigma) {\n      // Clear any existing graph\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          arrow: EdgeArrowProgram, // Renderer for arrows\n        },\n        renderEdgeLabels: true,\n        defaultEdgeType: \"arrow\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2, // Adjust arrow size\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\",\n      });\n\n      // Assign graph to Sigma\n      sigma.setGraph(graph);\n\n      // Start force layout\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10,\n      });\n      layout.start();\n\n      return () => {\n        layout.kill();\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}