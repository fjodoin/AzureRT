{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport circularLayout from \"graphology-layout/circular\";\nimport randomLayout from \"graphology-layout/random\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport concentricLayout from \"graphology-layout/circular\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { DEFAULT_EDGE_CURVATURE, EdgeCurvedArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes and edges (same as your existing code)\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 2,\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Force-directed layout setup\n    const layout = new ForceSupervisor(graph);\n    layout.start();\n    setTimeout(() => {\n      layout.stop(); // Stop the layout after some time for stability\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }, 2000); // Adjust duration as needed\n\n    return () => {\n      layout.stop();\n      graph.clear();\n    };\n  }, [graphData, sigma]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && attributes.resourceType === selectedCategory) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode(node => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge(edge => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","circularLayout","randomLayout","ForceSupervisor","concentricLayout","MultiGraph","EdgeArrowProgram","DEFAULT_EDGE_CURVATURE","EdgeCurvedArrowProgram","indexParallelEdgesIndex","debounce","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","layout","start","setTimeout","stop","setGraph","refresh","clear","getGraph","debouncedRefresh","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","queue","attributes","toLowerCase","includes","add","push","length","currentNode","shift","forEachInEdge","_","has","forEachOutEdge","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport circularLayout from \"graphology-layout/circular\";\nimport randomLayout from \"graphology-layout/random\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport concentricLayout from \"graphology-layout/circular\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport {\n  DEFAULT_EDGE_CURVATURE,\n  EdgeCurvedArrowProgram,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n  \n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n  \n    // Add nodes and edges (same as your existing code)\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 2,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n  \n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2,\n      });\n    });\n  \n    // Force-directed layout setup\n    const layout = new ForceSupervisor(graph);\n    layout.start();\n  \n    setTimeout(() => {\n      layout.stop(); // Stop the layout after some time for stability\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }, 2000); // Adjust duration as needed\n  \n    return () => {\n      layout.stop();\n      graph.clear();\n    };\n  }, [graphData, sigma]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (\n          (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) ||\n          (selectedCategory && attributes.resourceType === selectedCategory)\n        ) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode((node) => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge((edge) => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}