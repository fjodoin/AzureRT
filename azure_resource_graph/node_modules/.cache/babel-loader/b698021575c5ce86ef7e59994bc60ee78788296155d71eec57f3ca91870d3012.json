{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n\n    // Add nodes with music type as an attribute\n    graph.addNode('n1', {\n      label: 'Ella Fitzgerald: 1917',\n      size: 25,\n      color: 'red',\n      musicType: 'jazz'\n    });\n    graph.addNode('n2', {\n      label: 'Frank Sinatra: 1915',\n      size: 25,\n      color: 'red',\n      musicType: 'swing'\n    });\n    graph.addNode('n3', {\n      label: 'Billie Holiday: 1915',\n      size: 25,\n      color: 'red',\n      musicType: 'jazz'\n    });\n    graph.addNode('n4', {\n      label: 'Louis Armstrong: 1901',\n      size: 25,\n      color: 'yellow',\n      musicType: 'jazz'\n    });\n    graph.addNode('n5', {\n      label: 'Nina Simone: 1933',\n      size: 25,\n      color: 'orange',\n      musicType: 'soul'\n    });\n    graph.addNode('n6', {\n      label: 'Nat King Cole: 1919',\n      size: 25,\n      color: 'red',\n      musicType: 'jazz'\n    });\n    graph.addNode('n7', {\n      label: 'Gregory Porter: 1971',\n      size: 25,\n      color: 'teal',\n      musicType: 'soul'\n    });\n    graph.addNode('n8', {\n      label: 'Sarah Vaughan: 1924',\n      size: 25,\n      color: 'orange',\n      musicType: 'jazz'\n    });\n    graph.addNode('n9', {\n      label: 'Michael Bublé: 1975',\n      size: 25,\n      color: 'teal',\n      musicType: 'pop'\n    });\n\n    // Add edges\n    graph.addEdge('n1', 'n2');\n    graph.addEdge('n1', 'n3');\n    graph.addEdge('n1', 'n6');\n    graph.addEdge('n5', 'n8');\n    graph.addEdge('n7', 'n9');\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n\n    // Save the graph in Sigma for filtering later\n    sigma.setGraph(graph);\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // If no search query or category is selected, reset all nodes and edges\n        graph.forEachNode(node => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Collect nodes that match the search query and/or category\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, 'hidden', false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 86,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","circularLayout","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","addNode","label","size","color","musicType","addEdge","assign","setGraph","refresh","getGraph","forEachNode","node","setNodeAttribute","forEachEdge","edge","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","toLowerCase","includes","matchesCategory","isMatching","add","forEachNeighbor","neighbor","source","target","shouldShow","has","forEach","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    // Add nodes with music type as an attribute\n    graph.addNode('n1', { label: 'Ella Fitzgerald: 1917', size: 25, color: 'red', musicType: 'jazz' });\n    graph.addNode('n2', { label: 'Frank Sinatra: 1915', size: 25, color: 'red', musicType: 'swing' });\n    graph.addNode('n3', { label: 'Billie Holiday: 1915', size: 25, color: 'red', musicType: 'jazz' });\n    graph.addNode('n4', { label: 'Louis Armstrong: 1901', size: 25, color: 'yellow', musicType: 'jazz' });\n    graph.addNode('n5', { label: 'Nina Simone: 1933', size: 25, color: 'orange', musicType: 'soul' });\n    graph.addNode('n6', { label: 'Nat King Cole: 1919', size: 25, color: 'red', musicType: 'jazz' });\n    graph.addNode('n7', { label: 'Gregory Porter: 1971', size: 25, color: 'teal', musicType: 'soul' });\n    graph.addNode('n8', { label: 'Sarah Vaughan: 1924', size: 25, color: 'orange', musicType: 'jazz' });\n    graph.addNode('n9', { label: 'Michael Bublé: 1975', size: 25, color: 'teal', musicType: 'pop' });\n\n    // Add edges\n    graph.addEdge('n1', 'n2');\n    graph.addEdge('n1', 'n3');\n    graph.addEdge('n1', 'n6');\n    graph.addEdge('n5', 'n8');\n    graph.addEdge('n7', 'n9');\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n\n    // Save the graph in Sigma for filtering later\n    sigma.setGraph(graph);\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery && !selectedCategory) {\n        // If no search query or category is selected, reset all nodes and edges\n        graph.forEachNode((node) => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Collect nodes that match the search query and/or category\n        const matchingNodes = new Set();\n\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, 'hidden', false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}