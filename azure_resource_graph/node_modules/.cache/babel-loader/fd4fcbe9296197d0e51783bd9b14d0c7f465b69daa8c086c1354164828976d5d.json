{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { MultiGraph } from \"graphology\";\nimport forceAtlas2 from \"graphology-layout-forceatlas2\";\nimport { cropToLargestConnectedComponent } from \"graphology-components\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 2,\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Filter the graph to the largest connected component\n    cropToLargestConnectedComponent(graph);\n\n    // Apply colors based on node type\n    const COLORS = {\n      institution: \"#FA5A3D\",\n      subject: \"#5A75DB\"\n    };\n    graph.forEachNode((node, attributes) => {\n      const color = COLORS[attributes.resourceType] || \"#888\";\n      graph.setNodeAttribute(node, \"color\", color);\n    });\n\n    // Adjust node sizes based on degree\n    const degrees = graph.nodes().map(node => graph.degree(node));\n    const minDegree = Math.min(...degrees);\n    const maxDegree = Math.max(...degrees);\n    graph.forEachNode(node => {\n      const degree = graph.degree(node);\n      const size = 2 + (degree - minDegree) / (maxDegree - minDegree) * 10;\n      graph.setNodeAttribute(node, \"size\", size);\n    });\n\n    // Apply forceAtlas2 layout\n    forceAtlas2.assign(graph, {\n      iterations: 500,\n      settings: forceAtlas2.inferSettings(graph)\n    });\n    if (sigma) {\n      // Clear any existing graph\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) existingGraph.clear();\n\n      // Assign the graph to Sigma and refresh\n      sigma.setGraph(graph);\n      sigma.refresh();\n\n      // Cleanup on unmount\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    if (!searchQuery && !selectedCategory) {\n      // Reset visibility\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      const queue = [];\n\n      // Find matching nodes\n      graph.forEachNode((node, attributes) => {\n        if (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && attributes.resourceType === selectedCategory) {\n          matchingNodes.add(node);\n          queue.push(node);\n        }\n      });\n\n      // Traverse and find connected edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift();\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source);\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target);\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Update visibility\n      graph.forEachNode(node => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge(edge => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return null; // No need to render anything here, Sigma takes care of the rendering\n};\n_s(GraphComponent, \"Al6Qym39JmcMEjJfBcb45sfsvZs=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 7\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","MultiGraph","forceAtlas2","cropToLargestConnectedComponent","debounce","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","COLORS","institution","subject","forEachNode","attributes","setNodeAttribute","degrees","map","degree","minDegree","Math","min","maxDegree","max","assign","iterations","settings","inferSettings","existingGraph","getGraph","clear","setGraph","refresh","debouncedRefresh","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","queue","toLowerCase","includes","add","push","length","currentNode","shift","forEachInEdge","_","has","forEachOutEdge","_c","GraphWrapper","style","display","flexDirection","gap","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { MultiGraph } from \"graphology\";\nimport forceAtlas2 from \"graphology-layout-forceatlas2\";\nimport { cropToLargestConnectedComponent } from \"graphology-components\";\nimport { debounce } from \"lodash\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 2,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2,\n      });\n    });\n\n    // Filter the graph to the largest connected component\n    cropToLargestConnectedComponent(graph);\n\n    // Apply colors based on node type\n    const COLORS = { institution: \"#FA5A3D\", subject: \"#5A75DB\" };\n    graph.forEachNode((node, attributes) => {\n      const color = COLORS[attributes.resourceType] || \"#888\";\n      graph.setNodeAttribute(node, \"color\", color);\n    });\n\n    // Adjust node sizes based on degree\n    const degrees = graph.nodes().map((node) => graph.degree(node));\n    const minDegree = Math.min(...degrees);\n    const maxDegree = Math.max(...degrees);\n    graph.forEachNode((node) => {\n      const degree = graph.degree(node);\n      const size = 2 + ((degree - minDegree) / (maxDegree - minDegree)) * 10;\n      graph.setNodeAttribute(node, \"size\", size);\n    });\n\n    // Apply forceAtlas2 layout\n    forceAtlas2.assign(graph, {\n      iterations: 500,\n      settings: forceAtlas2.inferSettings(graph),\n    });\n\n    if (sigma) {\n      // Clear any existing graph\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) existingGraph.clear();\n\n      // Assign the graph to Sigma and refresh\n      sigma.setGraph(graph);\n      sigma.refresh();\n\n      // Cleanup on unmount\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    if (!searchQuery && !selectedCategory) {\n      // Reset visibility\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      const queue = [];\n\n      // Find matching nodes\n      graph.forEachNode((node, attributes) => {\n        if (\n          (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) ||\n          (selectedCategory && attributes.resourceType === selectedCategory)\n        ) {\n          matchingNodes.add(node);\n          queue.push(node);\n        }\n      });\n\n      // Traverse and find connected edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift();\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source);\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target);\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Update visibility\n      graph.forEachNode((node) => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge((edge) => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return null; // No need to render anything here, Sigma takes care of the rendering\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n        {graphData ? (\n          <SigmaContainer>\n            <GraphComponent\n              searchQuery={searchQuery}\n              selectedCategory={selectedCategory}\n              graphData={graphData}\n            />\n          </SigmaContainer>\n        ) : (\n          <p>Please upload a JSON file to visualize the graph.</p>\n        )}\n      </div>\n    );\n  };\n  \n  export default GraphWrapper;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}