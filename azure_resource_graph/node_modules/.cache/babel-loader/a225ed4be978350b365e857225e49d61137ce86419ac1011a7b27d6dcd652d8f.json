{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new Graph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType\n      });\n    });\n\n    // Add edges\n    edges.forEach((edge, index) => {\n      const existingEdges = graph.edges(edge.source, edge.target);\n      const curveDistance = existingEdges.length * 2; // Adjust based on density\n\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"curve\",\n        // Use curved edges\n        size: 2,\n        curve: {\n          x: curveDistance * Math.cos(index),\n          y: curveDistance * Math.sin(index)\n        } // Adjust curve\n      });\n    });\n\n    // Apply circular layout\n    const radius = 100; // Radius of the circle\n    const centerX = 0; // Center X-coordinate\n    const centerY = 0; // Center Y-coordinate\n    const nodeCount = graph.order; // Total number of nodes\n    let index = 0;\n    graph.forEachNode(node => {\n      const angle = index / nodeCount * 2 * Math.PI; // Calculate angle\n      const x = centerX + radius * Math.cos(angle); // X-coordinate\n      const y = centerY + radius * Math.sin(angle); // Y-coordinate\n      graph.setNodeAttribute(node, \"x\", x);\n      graph.setNodeAttribute(node, \"y\", y);\n      index++;\n    });\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true\n      });\n      sigma.setGraph(graph);\n      return () => {\n        sigma.getGraph().clear(); // Clean up graph on unmount\n      };\n    }\n  }, [sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n};\n_s(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","Graph","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","addNode","id","label","size","color","resourceType","edge","index","existingEdges","source","target","curveDistance","length","addEdge","type","curve","x","Math","cos","y","sin","radius","centerX","centerY","nodeCount","order","forEachNode","angle","PI","setNodeAttribute","setSettings","nodeColor","edgeArrowSizeRatio","renderEdgeLabels","setGraph","getGraph","clear","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n    const sigma = useSigma();\n    const containerRef = useRef(null);\n  \n    useEffect(() => {\n      if (!graphData) return;\n  \n      const graph = new Graph({ multi: true });\n      const { nodes, edges } = graphData;\n  \n      // Add nodes\n      nodes.forEach((node) => {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      });\n  \n      // Add edges\n      edges.forEach((edge, index) => {\n        const existingEdges = graph.edges(edge.source, edge.target);\n        const curveDistance = existingEdges.length * 2; // Adjust based on density\n        \n        graph.addEdge(edge.source, edge.target, {\n          label: edge.label,\n          color: edge.color,\n          type: \"curve\", // Use curved edges\n          size: 2,\n          curve: { x: curveDistance * Math.cos(index), y: curveDistance * Math.sin(index) }, // Adjust curve\n        });\n      });\n      \n  \n      // Apply circular layout\n      const radius = 100; // Radius of the circle\n      const centerX = 0; // Center X-coordinate\n      const centerY = 0; // Center Y-coordinate\n      const nodeCount = graph.order; // Total number of nodes\n      let index = 0;\n  \n      graph.forEachNode((node) => {\n        const angle = (index / nodeCount) * 2 * Math.PI; // Calculate angle\n        const x = centerX + radius * Math.cos(angle); // X-coordinate\n        const y = centerY + radius * Math.sin(angle); // Y-coordinate\n        graph.setNodeAttribute(node, \"x\", x);\n        graph.setNodeAttribute(node, \"y\", y);\n        index++;\n      });\n  \n      if (sigma) {\n        sigma.setSettings({\n          nodeColor: \"color\",\n          edgeArrowSizeRatio: 2,\n          renderEdgeLabels: true,\n        });\n  \n        sigma.setGraph(graph);\n  \n        return () => {\n          sigma.getGraph().clear(); // Clean up graph on unmount\n        };\n      }\n    }, [sigma, graphData]);\n  \n    return <div ref={containerRef} />;\n  };\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}