{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport circularLayout from \"graphology-layout/circular\";\nimport { rescaleLayout } from \"graphology-layout\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { DEFAULT_EDGE_CURVATURE, EdgeCurvedArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction rescaleGraphPositions(graph, scaleFactor = 1.5, centerX = 0, centerY = 0) {\n  graph.forEachNode((node, attributes) => {\n    const newX = (attributes.x - centerX) * scaleFactor + centerX;\n    const newY = (attributes.y - centerY) * scaleFactor + centerY;\n    graph.setNodeAttribute(node, \"x\", newX);\n    graph.setNodeAttribute(node, \"y\", newY);\n  });\n}\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 10,\n          // Increase node size for better visibility\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        // Ensure edges have labels\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n\n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const {\n        parallelIndex,\n        parallelMaxIndex\n      } = attributes;\n      const curvature = typeof parallelIndex === \"number\" ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2) : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0\n      });\n    });\n    if (sigma) {\n      // Clear existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram\n        },\n        renderEdgeLabels: true,\n        // Enable edge labels\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        labelDensity: 1.5,\n        // Increase label density for better visibility\n        labelGridCellSize: 60 // Increase grid cell size to reduce overlap\n      });\n\n      // Apply circular layout\n      circularLayout.assign(graph);\n\n      // Rescale the graph to increase spacing\n      rescaleGraphPositions(graph, 1.5); // Adjust the scaleFactor as needed\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n\n      // Refresh the view\n      sigma.refresh();\n\n      // Cleanup\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && attributes.resourceType === selectedCategory) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode(node => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge(edge => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","EdgeCurveProgram","circularLayout","rescaleLayout","ForceSupervisor","MultiGraph","EdgeArrowProgram","DEFAULT_EDGE_CURVATURE","EdgeCurvedArrowProgram","indexParallelEdgesIndex","debounce","jsxDEV","_jsxDEV","rescaleGraphPositions","graph","scaleFactor","centerX","centerY","forEachNode","node","attributes","newX","x","newY","y","setNodeAttribute","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","multi","nodes","edges","forEach","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","parallelIndex","parallelMaxIndex","curvature","mergeEdgeAttributes","type","existingGraph","getGraph","clear","setSettings","edgeProgramClasses","curve","line","renderEdgeLabels","defaultEdgeType","edgeColor","edgeArrowSizeRatio","labelDensity","labelGridCellSize","assign","setGraph","refresh","debouncedRefresh","setEdgeAttribute","matchingNodes","Set","relevantEdges","queue","toLowerCase","includes","add","push","length","currentNode","shift","forEachInEdge","_","has","forEachOutEdge","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport circularLayout from \"graphology-layout/circular\";\nimport { rescaleLayout } from \"graphology-layout\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport {\n  DEFAULT_EDGE_CURVATURE,\n  EdgeCurvedArrowProgram,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\n\nfunction rescaleGraphPositions(graph, scaleFactor = 1.5, centerX = 0, centerY = 0) {\n  graph.forEachNode((node, attributes) => {\n    const newX = (attributes.x - centerX) * scaleFactor + centerX;\n    const newY = (attributes.y - centerY) * scaleFactor + centerY;\n  \n    graph.setNodeAttribute(node, \"x\", newX);\n    graph.setNodeAttribute(node, \"y\", newY);\n  });\n}\n  \n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n  \n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n  \n    // Add nodes to the graph\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 10, // Increase node size for better visibility\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n  \n    // Add edges to the graph\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label, // Ensure edges have labels\n        color: edge.color,\n        size: 2,\n      });\n    });\n  \n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n  \n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const { parallelIndex, parallelMaxIndex } = attributes;\n      const curvature =\n        typeof parallelIndex === \"number\"\n          ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2)\n          : 0;\n  \n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0,\n      });\n    });\n  \n    if (sigma) {\n      // Clear existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n  \n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram,\n        },\n        renderEdgeLabels: true, // Enable edge labels\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        labelDensity: 1.5, // Increase label density for better visibility\n        labelGridCellSize: 60, // Increase grid cell size to reduce overlap\n      });\n  \n      // Apply circular layout\n      circularLayout.assign(graph);\n  \n      // Rescale the graph to increase spacing\n      rescaleGraphPositions(graph, 1.5); // Adjust the scaleFactor as needed\n  \n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n  \n      // Refresh the view\n      sigma.refresh();\n  \n      // Cleanup\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n  \n  \n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (\n          (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) ||\n          (selectedCategory && attributes.resourceType === selectedCategory)\n        ) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode((node) => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge((edge) => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}