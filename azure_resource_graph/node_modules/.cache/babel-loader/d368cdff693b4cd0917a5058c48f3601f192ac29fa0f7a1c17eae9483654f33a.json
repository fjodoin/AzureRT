{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport circularLayout from \"graphology-layout/circular\";\nimport { rescaleLayout } from \"graphology-layout\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { DEFAULT_EDGE_CURVATURE, EdgeCurvedArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 10,\n          // Increase node size for better visibility\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        // Ensure edges have labels\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n\n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const {\n        parallelIndex,\n        parallelMaxIndex\n      } = attributes;\n      const curvature = typeof parallelIndex === \"number\" ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2) : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0\n      });\n    });\n    if (sigma) {\n      // Clear existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram\n        },\n        renderEdgeLabels: true,\n        // Enable edge labels\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        labelDensity: 1.5,\n        // Increase label density for better visibility\n        labelGridCellSize: 60 // Increase grid cell size to reduce overlap\n      });\n\n      // Apply circular layout\n      circularLayout.assign(graph);\n\n      // Rescale layout to add padding between nodes\n      rescaleLayout(graph, {\n        padding: 50 // Add spacing between nodes\n      });\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n\n      // Refresh the view\n      sigma.refresh();\n\n      // Cleanup\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && attributes.resourceType === selectedCategory) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode(node => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge(edge => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","EdgeCurveProgram","circularLayout","rescaleLayout","ForceSupervisor","MultiGraph","EdgeArrowProgram","DEFAULT_EDGE_CURVATURE","EdgeCurvedArrowProgram","indexParallelEdgesIndex","debounce","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","attributes","parallelIndex","parallelMaxIndex","curvature","mergeEdgeAttributes","type","existingGraph","getGraph","clear","setSettings","edgeProgramClasses","curve","line","renderEdgeLabels","defaultEdgeType","edgeColor","edgeArrowSizeRatio","labelDensity","labelGridCellSize","assign","padding","setGraph","refresh","debouncedRefresh","forEachNode","setNodeAttribute","setEdgeAttribute","matchingNodes","Set","relevantEdges","queue","toLowerCase","includes","add","push","length","currentNode","shift","forEachInEdge","_","has","forEachOutEdge","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport circularLayout from \"graphology-layout/circular\";\nimport { rescaleLayout } from \"graphology-layout\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport {\n  DEFAULT_EDGE_CURVATURE,\n  EdgeCurvedArrowProgram,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n  \n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n  \n    // Add nodes to the graph\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 10, // Increase node size for better visibility\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n  \n    // Add edges to the graph\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label, // Ensure edges have labels\n        color: edge.color,\n        size: 2,\n      });\n    });\n  \n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n  \n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const { parallelIndex, parallelMaxIndex } = attributes;\n      const curvature =\n        typeof parallelIndex === \"number\"\n          ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2)\n          : 0;\n  \n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0,\n      });\n    });\n  \n    if (sigma) {\n      // Clear existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n  \n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram,\n        },\n        renderEdgeLabels: true, // Enable edge labels\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        labelDensity: 1.5, // Increase label density for better visibility\n        labelGridCellSize: 60, // Increase grid cell size to reduce overlap\n      });\n  \n      // Apply circular layout\n      circularLayout.assign(graph);\n  \n      // Rescale layout to add padding between nodes\n      rescaleLayout(graph, {\n        padding: 50, // Add spacing between nodes\n      });\n  \n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n  \n      // Refresh the view\n      sigma.refresh();\n  \n      // Cleanup\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (\n          (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) ||\n          (selectedCategory && attributes.resourceType === selectedCategory)\n        ) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode((node) => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge((edge) => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,cAAc,EAAEC,QAAQ,QAAQ,mBAAmB;AAC5D,OAAOC,gBAAgB,MAAM,mBAAmB,CAAC,CAAC;AAClD,OAAOC,cAAc,MAAM,4BAA4B;AACvD,SAASC,aAAa,QAAQ,mBAAmB;AACjD,OAAOC,eAAe,MAAM,gCAAgC;AAC5D,SAASC,UAAU,QAAQ,YAAY;AACvC,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SACEC,sBAAsB,EACtBC,sBAAsB,EACtBC,uBAAuB,QAClB,mBAAmB;AAC1B,SAASC,QAAQ,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,WAAW;EAAEC,gBAAgB;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAMC,KAAK,GAAGlB,QAAQ,CAAC,CAAC;EACxB,MAAMmB,YAAY,GAAGrB,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACmB,SAAS,EAAE;IAEhB,MAAMI,KAAK,GAAG,IAAIf,UAAU,CAAC;MAAEgB,KAAK,EAAE;IAAK,CAAC,CAAC;IAC7C,MAAM;MAAEC,KAAK;MAAEC;IAAM,CAAC,GAAGP,SAAS;;IAElC;IACAM,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAK;MACtB,IAAI,CAACL,KAAK,CAACM,OAAO,CAACD,IAAI,CAACE,EAAE,CAAC,EAAE;QAC3BP,KAAK,CAACQ,OAAO,CAACH,IAAI,CAACE,EAAE,EAAE;UACrBE,KAAK,EAAEJ,IAAI,CAACI,KAAK;UACjBC,IAAI,EAAE,EAAE;UAAE;UACVC,KAAK,EAAEN,IAAI,CAACM,KAAK;UACjBC,YAAY,EAAEP,IAAI,CAACO;QACrB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACAT,KAAK,CAACC,OAAO,CAAES,IAAI,IAAK;MACtBb,KAAK,CAACc,OAAO,CAACD,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACG,MAAM,EAAE;QACtCP,KAAK,EAAEI,IAAI,CAACJ,KAAK;QAAE;QACnBE,KAAK,EAAEE,IAAI,CAACF,KAAK;QACjBD,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACArB,uBAAuB,CAACW,KAAK,EAAE;MAC7BiB,kBAAkB,EAAE,eAAe;MACnCC,qBAAqB,EAAE,kBAAkB;MACzCC,qBAAqB,EAAE;IACzB,CAAC,CAAC;;IAEF;IACAnB,KAAK,CAACoB,WAAW,CAAC,CAACP,IAAI,EAAEQ,UAAU,KAAK;MACtC,MAAM;QAAEC,aAAa;QAAEC;MAAiB,CAAC,GAAGF,UAAU;MACtD,MAAMG,SAAS,GACb,OAAOF,aAAa,KAAK,QAAQ,GAC7BnC,sBAAsB,IAAImC,aAAa,GAAGC,gBAAgB,GAAG,CAAC,CAAC,GAC/D,CAAC;MAEPvB,KAAK,CAACyB,mBAAmB,CAACZ,IAAI,EAAE;QAC9Ba,IAAI,EAAEJ,aAAa,GAAG,OAAO,GAAG,MAAM;QACtCE,SAAS,EAAEF,aAAa,GAAGE,SAAS,GAAG;MACzC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI1B,KAAK,EAAE;MACT;MACA,MAAM6B,aAAa,GAAG7B,KAAK,CAAC8B,QAAQ,CAAC,CAAC;MACtC,IAAID,aAAa,EAAE;QACjBA,aAAa,CAACE,KAAK,CAAC,CAAC;MACvB;;MAEA;MACA/B,KAAK,CAACgC,WAAW,CAAC;QAChBC,kBAAkB,EAAE;UAClBC,KAAK,EAAE5C,sBAAsB;UAC7B6C,IAAI,EAAE/C;QACR,CAAC;QACDgD,gBAAgB,EAAE,IAAI;QAAE;QACxBC,eAAe,EAAE,MAAM;QACvBC,SAAS,EAAE,OAAO;QAClBC,kBAAkB,EAAE,CAAC;QACrBC,YAAY,EAAE,GAAG;QAAE;QACnBC,iBAAiB,EAAE,EAAE,CAAE;MACzB,CAAC,CAAC;;MAEF;MACAzD,cAAc,CAAC0D,MAAM,CAACxC,KAAK,CAAC;;MAE5B;MACAjB,aAAa,CAACiB,KAAK,EAAE;QACnByC,OAAO,EAAE,EAAE,CAAE;MACf,CAAC,CAAC;;MAEF;MACA3C,KAAK,CAAC4C,QAAQ,CAAC1C,KAAK,CAAC;;MAErB;MACAF,KAAK,CAAC6C,OAAO,CAAC,CAAC;;MAEf;MACA,OAAO,MAAM;QACX3C,KAAK,CAAC6B,KAAK,CAAC,CAAC;MACf,CAAC;IACH;EACF,CAAC,EAAE,CAAC/B,KAAK,EAAEF,SAAS,CAAC,CAAC;EAEtBnB,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,KAAK,IAAI,CAACF,SAAS,EAAE;IAE1B,MAAMI,KAAK,GAAGF,KAAK,CAAC8B,QAAQ,CAAC,CAAC;IAC9B,MAAMgB,gBAAgB,GAAGtD,QAAQ,CAAC,MAAMQ,KAAK,CAAC6C,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC;IAE7D,IAAI,CAACjD,WAAW,IAAI,CAACC,gBAAgB,EAAE;MACrC;MACAK,KAAK,CAAC6C,WAAW,CAAExC,IAAI,IAAKL,KAAK,CAAC8C,gBAAgB,CAACzC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;MAC1EL,KAAK,CAACoB,WAAW,CAAEP,IAAI,IAAKb,KAAK,CAAC+C,gBAAgB,CAAClC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5E,CAAC,MAAM;MACL,MAAMmC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;MACjC,MAAMC,aAAa,GAAG,IAAID,GAAG,CAAC,CAAC,CAAC,CAAC;MACjC,MAAME,KAAK,GAAG,EAAE,CAAC,CAAC;;MAElB;MACAnD,KAAK,CAAC6C,WAAW,CAAC,CAACxC,IAAI,EAAEgB,UAAU,KAAK;QACtC,IACG3B,WAAW,IAAI2B,UAAU,CAACZ,KAAK,CAAC2C,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC3D,WAAW,CAAC0D,WAAW,CAAC,CAAC,CAAC,IACjFzD,gBAAgB,IAAI0B,UAAU,CAACT,YAAY,KAAKjB,gBAAiB,EAClE;UACAqD,aAAa,CAACM,GAAG,CAACjD,IAAI,CAAC;UACvB8C,KAAK,CAACI,IAAI,CAAClD,IAAI,CAAC,CAAC,CAAC;QACpB;MACF,CAAC,CAAC;;MAEF;MACA,OAAO8C,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;QACvB,MAAMC,WAAW,GAAGN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC1D,KAAK,CAAC2D,aAAa,CAACF,WAAW,EAAE,CAAC5C,IAAI,EAAE+C,CAAC,EAAE7C,MAAM,KAAK;UACpD,IAAI,CAACiC,aAAa,CAACa,GAAG,CAAC9C,MAAM,CAAC,EAAE;YAC9BiC,aAAa,CAACM,GAAG,CAACvC,MAAM,CAAC;YACzBoC,KAAK,CAACI,IAAI,CAACxC,MAAM,CAAC,CAAC,CAAC;UACtB;UACAmC,aAAa,CAACI,GAAG,CAACzC,IAAI,CAAC;QACzB,CAAC,CAAC;QACFb,KAAK,CAAC8D,cAAc,CAACL,WAAW,EAAE,CAAC5C,IAAI,EAAE+C,CAAC,EAAE5C,MAAM,KAAK;UACrD,IAAI,CAACgC,aAAa,CAACa,GAAG,CAAC7C,MAAM,CAAC,EAAE;YAC9BgC,aAAa,CAACM,GAAG,CAACtC,MAAM,CAAC;YACzBmC,KAAK,CAACI,IAAI,CAACvC,MAAM,CAAC,CAAC,CAAC;UACtB;UACAkC,aAAa,CAACI,GAAG,CAACzC,IAAI,CAAC;QACzB,CAAC,CAAC;MACJ;;MAEA;MACAb,KAAK,CAAC6C,WAAW,CAAExC,IAAI,IAAK;QAC1BL,KAAK,CAAC8C,gBAAgB,CAACzC,IAAI,EAAE,QAAQ,EAAE,CAAC2C,aAAa,CAACa,GAAG,CAACxD,IAAI,CAAC,CAAC;MAClE,CAAC,CAAC;MACFL,KAAK,CAACoB,WAAW,CAAEP,IAAI,IAAK;QAC1Bb,KAAK,CAAC+C,gBAAgB,CAAClC,IAAI,EAAE,QAAQ,EAAE,CAACqC,aAAa,CAACW,GAAG,CAAChD,IAAI,CAAC,CAAC;MAClE,CAAC,CAAC;IACJ;IAEA+B,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAAClD,WAAW,EAAEC,gBAAgB,EAAEG,KAAK,EAAEF,SAAS,CAAC,CAAC;EAErD,oBAAOJ,OAAA;IAAKuE,GAAG,EAAEhE;EAAa;IAAAiE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnC,CAAC;AAACtE,EAAA,CAxJIJ,cAAc;EAAA,QACJb,QAAQ;AAAA;AAAAwF,EAAA,GADlB3E,cAAc;AA0JpB,MAAM4E,YAAY,GAAGA,CAAC;EAAE3E,WAAW;EAAEC,gBAAgB;EAAEC;AAAU,CAAC,KAAK;EACrE,oBACEJ,OAAA;IAAK8E,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,GAAG,EAAE;IAAO,CAAE;IAAAC,QAAA,EACnE9E,SAAS,gBACRJ,OAAA,CAACb,cAAc;MAAA+F,QAAA,eACblF,OAAA,CAACC,cAAc;QACbC,WAAW,EAAEA,WAAY;QACzBC,gBAAgB,EAAEA,gBAAiB;QACnCC,SAAS,EAAEA;MAAU;QAAAoE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY,CAAC,gBAEjB3E,OAAA;MAAAkF,QAAA,EAAG;IAAiD;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACxD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACQ,GAAA,GAhBIN,YAAY;AAkBlB,eAAeA,YAAY;AAAC,IAAAD,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}