{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes\n    graph.forEachEdge((edge, attributes) => {\n      console.log(`Edge: ${edge}, Label: ${attributes.label}`);\n    });\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      console.log(edge.label); // Debug log to verify label presence\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        // Attach label to edge\n        color: edge.color,\n        type: \"arrow\",\n        size: 3\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        renderEdgeLabels: true,\n        // Enable edge label rendering\n        labelThreshold: 0,\n        // Ensure labels are always displayed regardless of zoom\n        edgeLabelSize: \"proportional\" // Adjust label size based on edge size\n      });\n      sigma.setGraph(graph);\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, \"hidden\", !isMatching);\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, \"hidden\", false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 102,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","Graph","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","nodes","edges","forEachEdge","edge","attributes","console","log","label","forEach","node","addNode","id","size","color","musicType","x","Math","random","y","addEdge","source","target","type","setSettings","renderEdgeLabels","labelThreshold","edgeLabelSize","setGraph","layout","start","kill","getGraph","forEachNode","setNodeAttribute","setEdgeAttribute","matchingNodes","Set","matchesSearch","toLowerCase","includes","matchesCategory","isMatching","add","forEachNeighbor","neighbor","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n  \n    const { nodes, edges } = graphData;\n  \n    // Add nodes\n    graph.forEachEdge((edge, attributes) => {\n        console.log(`Edge: ${edge}, Label: ${attributes.label}`);\n      });\n      \n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n      });\n    });\n  \n    // Add edges\n    edges.forEach((edge) => {\n      console.log(edge.label); // Debug log to verify label presence\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label, // Attach label to edge\n        color: edge.color,\n        type: \"arrow\",\n        size: 3,\n      });\n    });\n  \n    if (sigma) {\n      sigma.setSettings({\n        renderEdgeLabels: true, // Enable edge label rendering\n        labelThreshold: 0, // Ensure labels are always displayed regardless of zoom\n        edgeLabelSize: \"proportional\", // Adjust label size based on edge size\n      });\n  \n      sigma.setGraph(graph);\n  \n      const layout = new ForceSupervisor(graph);\n      layout.start();\n  \n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n  \n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, \"hidden\", !isMatching);\n\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}