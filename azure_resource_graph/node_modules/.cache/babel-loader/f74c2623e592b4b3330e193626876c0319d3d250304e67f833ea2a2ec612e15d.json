{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType\n      });\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target);\n    });\n    circularLayout.assign(graph);\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // If no search query or category is selected, reset all nodes and edges\n        graph.forEachNode(node => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Collect nodes that match the search query and/or category\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, 'hidden', false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 80,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","circularLayout","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","nodes","edges","graphData","forEach","node","addNode","id","label","size","color","musicType","edge","addEdge","source","target","assign","setGraph","refresh","getGraph","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","toLowerCase","includes","matchesCategory","isMatching","add","forEachNeighbor","neighbor","shouldShow","has","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\n\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n  \n    const { nodes, edges } = graphData;\n  \n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n      });\n    });\n  \n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target);\n    });\n  \n    circularLayout.assign(graph);\n  \n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery && !selectedCategory) {\n        // If no search query or category is selected, reset all nodes and edges\n        graph.forEachNode((node) => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Collect nodes that match the search query and/or category\n        const matchingNodes = new Set();\n\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, 'hidden', false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}