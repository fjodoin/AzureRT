{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new Graph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n          x: Math.random() * 500 - 250,\n          y: Math.random() * 500 - 250\n        });\n      }\n    });\n\n    // Add edges with curve type and size\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        // Add arrow type\n        size: 2\n      });\n    });\n    if (sigma) {\n      // Clear any existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set new graph and settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurveProgram // Support for curved edges\n        },\n        renderEdgeLabels: true,\n        defaultEdgeType: \"arrow\",\n        // Set default edge type to arrow\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        // Adjust arrow size\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\"\n      });\n      sigma.setGraph(graph);\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10\n      });\n      layout.start();\n      return () => {\n        layout.kill();\n        graph.clear(); // Ensure the graph is cleared\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      // Reset visibility for all nodes and edges\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      if (searchQuery) {\n        const query = searchQuery.toLowerCase();\n\n        // Search for identities or resources\n        graph.forEachNode((node, attributes) => {\n          if (attributes.label.toLowerCase().includes(query)) {\n            // If it's an identity, show outgoing edges and their targets\n            matchingNodes.add(node);\n            graph.forEachEdge(node, (edge, edgeAttributes, source, target) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(target); // Add target nodes\n            });\n          }\n        });\n        graph.forEachEdge((edge, attributes) => {\n          if (attributes.label.toLowerCase().includes(query)) {\n            // If it's a resource, show incoming edges and the hierarchy\n            relevantEdges.add(edge);\n            const {\n              source,\n              target\n            } = graph.extremities(edge);\n            matchingNodes.add(source); // Add resource group or subscription\n            matchingNodes.add(target); // Add resource\n          }\n        });\n      }\n      if (selectedCategory) {\n        // Filter nodes by category\n        graph.forEachNode((node, attributes) => {\n          if (attributes.resourceType === selectedCategory) {\n            matchingNodes.add(node);\n          }\n        });\n      }\n\n      // Update graph visibility\n      graph.forEachNode(node => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n      graph.forEachEdge(edge => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","EdgeCurveProgram","ForceSupervisor","Graph","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","x","Math","random","y","edge","addEdge","source","target","type","existingGraph","getGraph","clear","setSettings","edgeProgramClasses","curve","renderEdgeLabels","defaultEdgeType","edgeColor","edgeArrowSizeRatio","edgeLabelSize","edgeLabelWeight","setGraph","layout","gravity","scalingRatio","slowDown","start","kill","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","query","toLowerCase","attributes","includes","add","edgeAttributes","extremities","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new Graph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n          x: Math.random() * 500 - 250,\n          y: Math.random() * 500 - 250,\n        });\n      }\n    });\n\n    // Add edges with curve type and size\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\", // Add arrow type\n        size: 2,\n      });\n    });\n\n    if (sigma) {\n      // Clear any existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set new graph and settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurveProgram, // Support for curved edges\n        },\n        renderEdgeLabels: true,\n        defaultEdgeType: \"arrow\", // Set default edge type to arrow\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2, // Adjust arrow size\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\",\n      });\n\n      sigma.setGraph(graph);\n\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10,\n      });\n\n      layout.start();\n\n      return () => {\n        layout.kill();\n        graph.clear(); // Ensure the graph is cleared\n      };\n    }\n  }, [sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n  \n    const graph = sigma.getGraph();\n  \n    if (!searchQuery && !selectedCategory) {\n      // Reset visibility for all nodes and edges\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n  \n      if (searchQuery) {\n        const query = searchQuery.toLowerCase();\n  \n        // Search for identities or resources\n        graph.forEachNode((node, attributes) => {\n          if (attributes.label.toLowerCase().includes(query)) {\n            // If it's an identity, show outgoing edges and their targets\n            matchingNodes.add(node);\n            graph.forEachEdge(node, (edge, edgeAttributes, source, target) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(target); // Add target nodes\n            });\n          }\n        });\n  \n        graph.forEachEdge((edge, attributes) => {\n          if (attributes.label.toLowerCase().includes(query)) {\n            // If it's a resource, show incoming edges and the hierarchy\n            relevantEdges.add(edge);\n            const { source, target } = graph.extremities(edge);\n            matchingNodes.add(source); // Add resource group or subscription\n            matchingNodes.add(target); // Add resource\n          }\n        });\n      }\n  \n      if (selectedCategory) {\n        // Filter nodes by category\n        graph.forEachNode((node, attributes) => {\n          if (attributes.resourceType === selectedCategory) {\n            matchingNodes.add(node);\n          }\n        });\n      }\n  \n      // Update graph visibility\n      graph.forEachNode((node) => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n  \n      graph.forEachEdge((edge) => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n  \n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  \n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}