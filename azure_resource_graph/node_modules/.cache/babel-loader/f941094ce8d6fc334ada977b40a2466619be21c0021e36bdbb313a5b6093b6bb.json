{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new Graph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType\n      });\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2\n      });\n    });\n\n    // Apply circular layout\n    const radius = 100; // Radius of the circle\n    const centerX = 0; // Center X-coordinate\n    const centerY = 0; // Center Y-coordinate\n    const nodeCount = graph.order; // Total number of nodes\n    let index = 0;\n    graph.forEachNode(node => {\n      const angle = index / nodeCount * 2 * Math.PI; // Calculate angle\n      const x = centerX + radius * Math.cos(angle); // X-coordinate\n      const y = centerY + radius * Math.sin(angle); // Y-coordinate\n      graph.setNodeAttribute(node, \"x\", x);\n      graph.setNodeAttribute(node, \"y\", y);\n      index++;\n    });\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderLabels: true,\n        // Ensure node labels are always rendered\n        renderEdgeLabels: true,\n        // Ensure edge labels are always rendered\n        labelDensity: 1,\n        // Increase label density to show more labels\n        labelGridCellSize: 0,\n        // Disable grid-based label hiding\n        labelRenderedSizeThreshold: 0 // Render labels regardless of size\n      });\n      sigma.setGraph(graph);\n      return () => {\n        sigma.getGraph().clear(); // Clean up graph on unmount\n      };\n    }\n  }, [sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n};\n_s(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","Graph","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","addNode","id","label","size","color","resourceType","edge","addEdge","source","target","type","radius","centerX","centerY","nodeCount","order","index","forEachNode","angle","Math","PI","x","cos","y","sin","setNodeAttribute","setSettings","nodeColor","edgeArrowSizeRatio","renderLabels","renderEdgeLabels","labelDensity","labelGridCellSize","labelRenderedSizeThreshold","setGraph","getGraph","clear","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n    const sigma = useSigma();\n    const containerRef = useRef(null);\n  \n    useEffect(() => {\n      if (!graphData) return;\n  \n      const graph = new Graph({ multi: true });\n      const { nodes, edges } = graphData;\n  \n      // Add nodes\n      nodes.forEach((node) => {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      });\n  \n      // Add edges\n      edges.forEach((edge) => {\n        graph.addEdge(edge.source, edge.target, {\n          label: edge.label,\n          color: edge.color,\n          type: \"arrow\",\n          size: 2,\n        });\n      });\n  \n      // Apply circular layout\n      const radius = 100; // Radius of the circle\n      const centerX = 0; // Center X-coordinate\n      const centerY = 0; // Center Y-coordinate\n      const nodeCount = graph.order; // Total number of nodes\n      let index = 0;\n  \n      graph.forEachNode((node) => {\n        const angle = (index / nodeCount) * 2 * Math.PI; // Calculate angle\n        const x = centerX + radius * Math.cos(angle); // X-coordinate\n        const y = centerY + radius * Math.sin(angle); // Y-coordinate\n        graph.setNodeAttribute(node, \"x\", x);\n        graph.setNodeAttribute(node, \"y\", y);\n        index++;\n      });\n  \n      if (sigma) {\n        sigma.setSettings({\n          nodeColor: \"color\",\n          edgeArrowSizeRatio: 2,\n          renderLabels: true, // Ensure node labels are always rendered\n          renderEdgeLabels: true, // Ensure edge labels are always rendered\n          labelDensity: 1, // Increase label density to show more labels\n          labelGridCellSize: 0, // Disable grid-based label hiding\n          labelRenderedSizeThreshold: 0, // Render labels regardless of size\n        });\n          \n  \n        sigma.setGraph(graph);\n  \n        return () => {\n          sigma.getGraph().clear(); // Clean up graph on unmount\n        };\n      }\n    }, [sigma, graphData]);\n  \n    return <div ref={containerRef} />;\n  };\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}