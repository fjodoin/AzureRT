{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { DEFAULT_EDGE_CURVATURE, EdgeCurvedArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n          x: Math.random() * 500 - 250,\n          y: Math.random() * 500 - 250\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n\n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const {\n        parallelIndex,\n        parallelMaxIndex\n      } = attributes;\n      const curvature = typeof parallelIndex === \"number\" ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2) : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0\n      });\n    });\n    if (sigma) {\n      // Clear existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram\n        },\n        renderEdgeLabels: true,\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\"\n      });\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n\n      // Apply force layout\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10\n      });\n      layout.start();\n      return () => {\n        layout.kill();\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n\n      if (searchQuery) {\n        const query = searchQuery.toLowerCase();\n        graph.forEachNode((node, attributes) => {\n          if (attributes.label.toLowerCase().includes(query)) {\n            matchingNodes.add(node);\n\n            // Add all connected edges and nodes\n            graph.forEachInEdge(node, (edge, _, source) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(source);\n            });\n            graph.forEachOutEdge(node, (edge, _, target) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(target);\n            });\n          }\n        });\n      }\n      if (selectedCategory) {\n        graph.forEachNode((node, attributes) => {\n          if (attributes.resourceType === selectedCategory) {\n            matchingNodes.add(node);\n\n            // Add all connected edges and their nodes\n            graph.forEachInEdge(node, (edge, _, source) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(source);\n            });\n            graph.forEachOutEdge(node, (edge, _, target) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(target);\n            });\n          }\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode(node => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge(edge => {\n        const source = graph.source(edge);\n        const target = graph.target(edge);\n\n        // Show the edge only if both its source and target are visible\n        const isVisible = matchingNodes.has(source) && matchingNodes.has(target);\n        graph.setEdgeAttribute(edge, \"hidden\", !isVisible);\n      });\n    }\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","EdgeCurveProgram","ForceSupervisor","MultiGraph","EdgeArrowProgram","DEFAULT_EDGE_CURVATURE","EdgeCurvedArrowProgram","indexParallelEdgesIndex","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","x","Math","random","y","edge","addEdge","source","target","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","attributes","parallelIndex","parallelMaxIndex","curvature","mergeEdgeAttributes","type","existingGraph","getGraph","clear","setSettings","edgeProgramClasses","curve","line","renderEdgeLabels","defaultEdgeType","edgeColor","edgeArrowSizeRatio","edgeLabelSize","edgeLabelWeight","setGraph","layout","gravity","scalingRatio","slowDown","start","kill","forEachNode","setNodeAttribute","setEdgeAttribute","matchingNodes","Set","relevantEdges","query","toLowerCase","includes","add","forEachInEdge","_","forEachOutEdge","has","isVisible","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport {\n  DEFAULT_EDGE_CURVATURE,\n  EdgeCurvedArrowProgram,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n          x: Math.random() * 500 - 250,\n          y: Math.random() * 500 - 250,\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2,\n      });\n    });\n\n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n\n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const { parallelIndex, parallelMaxIndex } = attributes;\n      const curvature =\n        typeof parallelIndex === \"number\"\n          ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2)\n          : 0;\n\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0,\n      });\n    });\n\n    if (sigma) {\n      // Clear existing graph in Sigma\n      const existingGraph = sigma.getGraph();\n      if (existingGraph) {\n        existingGraph.clear();\n      }\n\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram,\n        },\n        renderEdgeLabels: true,\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\",\n      });\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n\n      // Apply force layout\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10,\n      });\n      layout.start();\n\n      return () => {\n        layout.kill();\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n  \n    const graph = sigma.getGraph();\n  \n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n  \n      if (searchQuery) {\n        const query = searchQuery.toLowerCase();\n        graph.forEachNode((node, attributes) => {\n          if (attributes.label.toLowerCase().includes(query)) {\n            matchingNodes.add(node);\n  \n            // Add all connected edges and nodes\n            graph.forEachInEdge(node, (edge, _, source) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(source);\n            });\n            graph.forEachOutEdge(node, (edge, _, target) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(target);\n            });\n          }\n        });\n      }\n  \n      if (selectedCategory) {\n        graph.forEachNode((node, attributes) => {\n          if (attributes.resourceType === selectedCategory) {\n            matchingNodes.add(node);\n  \n            // Add all connected edges and their nodes\n            graph.forEachInEdge(node, (edge, _, source) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(source);\n            });\n            graph.forEachOutEdge(node, (edge, _, target) => {\n              relevantEdges.add(edge);\n              matchingNodes.add(target);\n            });\n          }\n        });\n      }\n  \n      // Set visibility for nodes and edges\n      graph.forEachNode((node) => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge((edge) => {\n        const source = graph.source(edge);\n        const target = graph.target(edge);\n  \n        // Show the edge only if both its source and target are visible\n        const isVisible = matchingNodes.has(source) && matchingNodes.has(target);\n        graph.setEdgeAttribute(edge, \"hidden\", !isVisible);\n      });\n    }\n  \n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  \n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}