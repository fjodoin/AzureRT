{"ast":null,"code":"useEffect(() => {\n  if (sigma) {\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      // Batch updates for better performance\n      const updates = [];\n      graph.forEachNode(node => {\n        updates.push({\n          node,\n          hidden: false\n        });\n      });\n      graph.forEachEdge(edge => {\n        updates.push({\n          edge,\n          hidden: false\n        });\n      });\n      updates.forEach(({\n        node,\n        edge,\n        hidden\n      }) => {\n        if (node) graph.setNodeAttribute(node, \"hidden\", hidden);\n        if (edge) graph.setEdgeAttribute(edge, \"hidden\", hidden);\n      });\n    } else {\n      const matchingNodes = new Set();\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n          graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n        }\n      });\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node)));\n      graph.forEachEdge((edge, attributes, source, target) => {\n        const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n    sigma.refresh();\n  }\n}, [searchQuery, selectedCategory, sigma]);","map":{"version":3,"names":["useEffect","sigma","graph","getGraph","searchQuery","selectedCategory","updates","forEachNode","node","push","hidden","forEachEdge","edge","forEach","setNodeAttribute","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","label","toLowerCase","includes","matchesCategory","musicType","add","forEachNeighbor","neighbor","has","source","target","shouldShow","refresh"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n  \n      if (!searchQuery && !selectedCategory) {\n        // Batch updates for better performance\n        const updates = [];\n        graph.forEachNode((node) => {\n          updates.push({ node, hidden: false });\n        });\n        graph.forEachEdge((edge) => {\n          updates.push({ edge, hidden: false });\n        });\n  \n        updates.forEach(({ node, edge, hidden }) => {\n          if (node) graph.setNodeAttribute(node, \"hidden\", hidden);\n          if (edge) graph.setEdgeAttribute(edge, \"hidden\", hidden);\n        });\n      } else {\n        const matchingNodes = new Set();\n  \n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n  \n          if (matchesSearch && matchesCategory) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n  \n        graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node)));\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n      }\n  \n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  "],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACZ,IAAIC,KAAK,EAAE;IACT,MAAMC,KAAK,GAAGD,KAAK,CAACE,QAAQ,CAAC,CAAC;IAE9B,IAAI,CAACC,WAAW,IAAI,CAACC,gBAAgB,EAAE;MACrC;MACA,MAAMC,OAAO,GAAG,EAAE;MAClBJ,KAAK,CAACK,WAAW,CAAEC,IAAI,IAAK;QAC1BF,OAAO,CAACG,IAAI,CAAC;UAAED,IAAI;UAAEE,MAAM,EAAE;QAAM,CAAC,CAAC;MACvC,CAAC,CAAC;MACFR,KAAK,CAACS,WAAW,CAAEC,IAAI,IAAK;QAC1BN,OAAO,CAACG,IAAI,CAAC;UAAEG,IAAI;UAAEF,MAAM,EAAE;QAAM,CAAC,CAAC;MACvC,CAAC,CAAC;MAEFJ,OAAO,CAACO,OAAO,CAAC,CAAC;QAAEL,IAAI;QAAEI,IAAI;QAAEF;MAAO,CAAC,KAAK;QAC1C,IAAIF,IAAI,EAAEN,KAAK,CAACY,gBAAgB,CAACN,IAAI,EAAE,QAAQ,EAAEE,MAAM,CAAC;QACxD,IAAIE,IAAI,EAAEV,KAAK,CAACa,gBAAgB,CAACH,IAAI,EAAE,QAAQ,EAAEF,MAAM,CAAC;MAC1D,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAMM,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;MAE/Bf,KAAK,CAACK,WAAW,CAAC,CAACC,IAAI,EAAEU,UAAU,KAAK;QACtC,MAAMC,aAAa,GAAG,CAACf,WAAW,IAAIc,UAAU,CAACE,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAClB,WAAW,CAACiB,WAAW,CAAC,CAAC,CAAC;QACxG,MAAME,eAAe,GAAG,CAAClB,gBAAgB,IAAIa,UAAU,CAACM,SAAS,KAAKnB,gBAAgB;QAEtF,IAAIc,aAAa,IAAII,eAAe,EAAE;UACpCP,aAAa,CAACS,GAAG,CAACjB,IAAI,CAAC;UACvBN,KAAK,CAACwB,eAAe,CAAClB,IAAI,EAAGmB,QAAQ,IAAKX,aAAa,CAACS,GAAG,CAACE,QAAQ,CAAC,CAAC;QACxE;MACF,CAAC,CAAC;MAEFzB,KAAK,CAACK,WAAW,CAAEC,IAAI,IAAKN,KAAK,CAACY,gBAAgB,CAACN,IAAI,EAAE,QAAQ,EAAE,CAACQ,aAAa,CAACY,GAAG,CAACpB,IAAI,CAAC,CAAC,CAAC;MAC7FN,KAAK,CAACS,WAAW,CAAC,CAACC,IAAI,EAAEM,UAAU,EAAEW,MAAM,EAAEC,MAAM,KAAK;QACtD,MAAMC,UAAU,GAAGf,aAAa,CAACY,GAAG,CAACC,MAAM,CAAC,IAAIb,aAAa,CAACY,GAAG,CAACE,MAAM,CAAC;QACzE5B,KAAK,CAACa,gBAAgB,CAACH,IAAI,EAAE,QAAQ,EAAE,CAACmB,UAAU,CAAC;MACrD,CAAC,CAAC;IACJ;IAEA9B,KAAK,CAAC+B,OAAO,CAAC,CAAC;EACjB;AACF,CAAC,EAAE,CAAC5B,WAAW,EAAEC,gBAAgB,EAAEJ,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}