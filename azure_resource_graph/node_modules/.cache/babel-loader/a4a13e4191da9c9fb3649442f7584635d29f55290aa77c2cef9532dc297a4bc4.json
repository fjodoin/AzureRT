{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { DEFAULT_EDGE_CURVATURE, EdgeCurvedArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet layoutInitialized = false; // Track layout initialization\n\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  // Initialize and render the graph\n  useEffect(() => {\n    if (!graphData || layoutInitialized) return;\n    layoutInitialized = true;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes\n    nodes.forEach(node => {\n      var _graphData$nodePositi;\n      const cachedNode = (_graphData$nodePositi = graphData.nodePositions) === null || _graphData$nodePositi === void 0 ? void 0 : _graphData$nodePositi[node.id];\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType,\n        x: (cachedNode === null || cachedNode === void 0 ? void 0 : cachedNode.x) || Math.random() * 500 - 250,\n        y: (cachedNode === null || cachedNode === void 0 ? void 0 : cachedNode.y) || Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Handle parallel edges\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n    graph.forEachEdge((edge, attributes) => {\n      const {\n        parallelIndex,\n        parallelMaxIndex\n      } = attributes;\n      const curvature = typeof parallelIndex === \"number\" ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2) : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0\n      });\n    });\n    if (sigma) {\n      sigma.setGraph(graph);\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.1,\n        scalingRatio: 2.0,\n        slowDown: 50,\n        inertialForce: 0.5\n      });\n      layout.start();\n      const stabilizationCheckInterval = setInterval(() => {\n        if (!layout.isRunning()) {\n          layout.stop();\n          clearInterval(stabilizationCheckInterval);\n\n          // Cache positions\n          const nodePositions = {};\n          graph.forEachNode((node, attributes) => {\n            nodePositions[node] = {\n              x: attributes.x,\n              y: attributes.y\n            };\n          });\n          console.log(\"Cached positions:\", nodePositions);\n        }\n      }, 100);\n      return () => {\n        layout.kill();\n        graph.clear();\n        clearInterval(stabilizationCheckInterval);\n      };\n    }\n  }, [sigma, graphData]);\n\n  // Filter nodes and edges based on searchQuery and selectedCategory\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && attributes.resourceType === selectedCategory) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode(node => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge(edge => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","MultiGraph","DEFAULT_EDGE_CURVATURE","EdgeCurvedArrowProgram","indexParallelEdgesIndex","debounce","jsxDEV","_jsxDEV","layoutInitialized","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","_graphData$nodePositi","cachedNode","nodePositions","id","addNode","label","size","color","resourceType","x","Math","random","y","edge","addEdge","source","target","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","attributes","parallelIndex","parallelMaxIndex","curvature","mergeEdgeAttributes","type","setGraph","layout","gravity","scalingRatio","slowDown","inertialForce","start","stabilizationCheckInterval","setInterval","isRunning","stop","clearInterval","forEachNode","console","log","kill","clear","getGraph","debouncedRefresh","refresh","setNodeAttribute","setEdgeAttribute","matchingNodes","Set","relevantEdges","queue","toLowerCase","includes","add","push","length","currentNode","shift","forEachInEdge","_","has","forEachOutEdge","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport {\n  DEFAULT_EDGE_CURVATURE,\n  EdgeCurvedArrowProgram,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\n\nlet layoutInitialized = false; // Track layout initialization\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  // Initialize and render the graph\n  useEffect(() => {\n    if (!graphData || layoutInitialized) return;\n\n    layoutInitialized = true;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      const cachedNode = graphData.nodePositions?.[node.id];\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType,\n        x: cachedNode?.x || Math.random() * 500 - 250,\n        y: cachedNode?.y || Math.random() * 500 - 250,\n      });\n    });\n\n    // Add edges\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2,\n      });\n    });\n\n    // Handle parallel edges\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n\n    graph.forEachEdge((edge, attributes) => {\n      const { parallelIndex, parallelMaxIndex } = attributes;\n      const curvature =\n        typeof parallelIndex === \"number\"\n          ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2)\n          : 0;\n\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0,\n      });\n    });\n\n    if (sigma) {\n      sigma.setGraph(graph);\n\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.1,\n        scalingRatio: 2.0,\n        slowDown: 50,\n        inertialForce: 0.5,\n      });\n\n      layout.start();\n\n      const stabilizationCheckInterval = setInterval(() => {\n        if (!layout.isRunning()) {\n          layout.stop();\n          clearInterval(stabilizationCheckInterval);\n\n          // Cache positions\n          const nodePositions = {};\n          graph.forEachNode((node, attributes) => {\n            nodePositions[node] = { x: attributes.x, y: attributes.y };\n          });\n          console.log(\"Cached positions:\", nodePositions);\n        }\n      }, 100);\n\n      return () => {\n        layout.kill();\n        graph.clear();\n        clearInterval(stabilizationCheckInterval);\n      };\n    }\n  }, [sigma, graphData]);\n\n  // Filter nodes and edges based on searchQuery and selectedCategory\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    if (!searchQuery && !selectedCategory) {\n      // Reset all nodes and edges visibility\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set(); // Nodes to remain visible\n      const relevantEdges = new Set(); // Edges to remain visible\n      const queue = []; // Queue for traversing connected nodes\n\n      // Initial matching based on search query or category\n      graph.forEachNode((node, attributes) => {\n        if (\n          (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) ||\n          (selectedCategory && attributes.resourceType === selectedCategory)\n        ) {\n          matchingNodes.add(node);\n          queue.push(node); // Add to traversal queue\n        }\n      });\n\n      // Traverse the graph to find connected nodes and edges\n      while (queue.length > 0) {\n        const currentNode = queue.shift(); // Dequeue the next node\n        graph.forEachInEdge(currentNode, (edge, _, source) => {\n          if (!matchingNodes.has(source)) {\n            matchingNodes.add(source);\n            queue.push(source); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n        graph.forEachOutEdge(currentNode, (edge, _, target) => {\n          if (!matchingNodes.has(target)) {\n            matchingNodes.add(target);\n            queue.push(target); // Add to queue for further exploration\n          }\n          relevantEdges.add(edge);\n        });\n      }\n\n      // Set visibility for nodes and edges\n      graph.forEachNode((node) => {\n        graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node));\n      });\n      graph.forEachEdge((edge) => {\n        graph.setEdgeAttribute(edge, \"hidden\", !relevantEdges.has(edge));\n      });\n    }\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}