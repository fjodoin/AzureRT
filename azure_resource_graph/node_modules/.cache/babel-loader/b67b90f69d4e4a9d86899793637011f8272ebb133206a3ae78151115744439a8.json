{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n    sigma.setGraph(graph);\n    sigma.refresh();\n    return () => graph.clear();\n  }, [graphData, sigma]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    // Get nodes matching the filters\n    const matchingNodes = new Set();\n    graph.forEachNode((node, attributes) => {\n      if (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && attributes.resourceType === selectedCategory) {\n        matchingNodes.add(node);\n      }\n    });\n    sigma.setSetting(\"nodeReducer\", (node, data) => {\n      const res = {\n        ...data\n      };\n\n      // Hide nodes that are not matching the search, category, or hover criteria\n      if (!matchingNodes.has(node) && !hoveredNode || hoveredNode && hoveredNode !== node && !graph.areNeighbors(hoveredNode, node)) {\n        res.hidden = true;\n      } else {\n        res.hidden = false;\n      }\n      return res;\n    });\n    sigma.setSetting(\"edgeReducer\", (edge, data) => {\n      const res = {\n        ...data\n      };\n      const [source, target] = graph.extremities(edge);\n\n      // Show edges only if connected to visible nodes\n      if (matchingNodes.has(source) || matchingNodes.has(target) || hoveredNode) {\n        res.hidden = false;\n      } else {\n        res.hidden = true;\n      }\n\n      // Further refine if a node is hovered\n      if (hoveredNode && source !== hoveredNode && target !== hoveredNode) {\n        res.hidden = true;\n      }\n      return res;\n    });\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, hoveredNode, sigma, graphData]);\n\n  // Handle hover events\n  useEffect(() => {\n    if (!sigma) return;\n    const handleNodeHover = ({\n      node\n    }) => setHoveredNode(node);\n    const handleNodeOut = () => setHoveredNode(null);\n    sigma.on(\"enterNode\", handleNodeHover);\n    sigma.on(\"leaveNode\", handleNodeOut);\n    return () => {\n      sigma.off(\"enterNode\", handleNodeHover);\n      sigma.off(\"leaveNode\", handleNodeOut);\n    };\n  }, [sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"SxkuPW+sNtYTHEvNoLiyLQ2PVX4=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      settings: {\n        renderEdgeLabels: true\n      },\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","randomLayout","MultiGraph","debounce","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","hoveredNode","setHoveredNode","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","type","assign","setGraph","refresh","clear","getGraph","debouncedRefresh","matchingNodes","Set","forEachNode","attributes","toLowerCase","includes","add","setSetting","data","res","has","areNeighbors","hidden","extremities","handleNodeHover","handleNodeOut","on","off","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","settings","renderEdgeLabels","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2,\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    return () => graph.clear();\n  }, [graphData, sigma]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    // Get nodes matching the filters\n    const matchingNodes = new Set();\n\n    graph.forEachNode((node, attributes) => {\n      if (\n        (searchQuery && attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        (selectedCategory && attributes.resourceType === selectedCategory)\n      ) {\n        matchingNodes.add(node);\n      }\n    });\n\n    sigma.setSetting(\"nodeReducer\", (node, data) => {\n      const res = { ...data };\n\n      // Hide nodes that are not matching the search, category, or hover criteria\n      if (\n        (!matchingNodes.has(node) && !hoveredNode) || \n        (hoveredNode && hoveredNode !== node && !graph.areNeighbors(hoveredNode, node))\n      ) {\n        res.hidden = true;\n      } else {\n        res.hidden = false;\n      }\n\n      return res;\n    });\n\n    sigma.setSetting(\"edgeReducer\", (edge, data) => {\n      const res = { ...data };\n      const [source, target] = graph.extremities(edge);\n\n      // Show edges only if connected to visible nodes\n      if (matchingNodes.has(source) || matchingNodes.has(target) || hoveredNode) {\n        res.hidden = false;\n      } else {\n        res.hidden = true;\n      }\n\n      // Further refine if a node is hovered\n      if (hoveredNode && source !== hoveredNode && target !== hoveredNode) {\n        res.hidden = true;\n      }\n\n      return res;\n    });\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, hoveredNode, sigma, graphData]);\n\n  // Handle hover events\n  useEffect(() => {\n    if (!sigma) return;\n\n    const handleNodeHover = ({ node }) => setHoveredNode(node);\n    const handleNodeOut = () => setHoveredNode(null);\n\n    sigma.on(\"enterNode\", handleNodeHover);\n    sigma.on(\"leaveNode\", handleNodeOut);\n\n    return () => {\n      sigma.off(\"enterNode\", handleNodeHover);\n      sigma.off(\"leaveNode\", handleNodeOut);\n    };\n  }, [sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer settings={{ renderEdgeLabels: true }}>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}