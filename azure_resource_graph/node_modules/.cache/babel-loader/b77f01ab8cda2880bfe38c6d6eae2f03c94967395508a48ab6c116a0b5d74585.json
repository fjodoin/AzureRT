{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\";\nimport circularLayout from \"graphology-layout/circular\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { DEFAULT_EDGE_CURVATURE, EdgeCurvedArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [suggestions, setSuggestions] = useState(null);\n  const [hoveredNeighbors, setHoveredNeighbors] = useState(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n\n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n\n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const {\n        parallelIndex,\n        parallelMaxIndex\n      } = attributes;\n      const curvature = typeof parallelIndex === \"number\" ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2) : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0\n      });\n    });\n    if (sigma) {\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram\n        },\n        renderEdgeLabels: false,\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        nodeReducer: (node, data) => {\n          const res = {\n            ...data\n          };\n          if (hoveredNeighbors && !hoveredNeighbors.has(node) && hoveredNode !== node) {\n            res.color = \"#f6f6f6\";\n            res.label = \"\";\n          }\n          if (suggestions && !suggestions.has(node)) {\n            res.color = \"#f6f6f6\";\n            res.label = \"\";\n          }\n          return res;\n        },\n        edgeReducer: (edge, data) => {\n          const res = {\n            ...data\n          };\n          if (hoveredNode && !graph.extremities(edge).some(n => n === hoveredNode || (hoveredNeighbors === null || hoveredNeighbors === void 0 ? void 0 : hoveredNeighbors.has(n)))) {\n            res.hidden = true;\n          }\n          if (suggestions && (!suggestions.has(graph.source(edge)) || !suggestions.has(graph.target(edge)))) {\n            res.hidden = true;\n          }\n          return res;\n        }\n      });\n\n      // Apply circular layout\n      circularLayout.assign(graph);\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n\n      // Refresh the view\n      sigma.refresh();\n\n      // Cleanup\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData, hoveredNode, hoveredNeighbors, suggestions]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      // Reset hovered states and suggestions\n      setHoveredNode(null);\n      setHoveredNeighbors(null);\n      setSuggestions(null);\n    } else {\n      const lcQuery = searchQuery === null || searchQuery === void 0 ? void 0 : searchQuery.toLowerCase();\n      const filteredSuggestions = new Set();\n      graph.forEachNode((node, attributes) => {\n        if (lcQuery && attributes.label.toLowerCase().includes(lcQuery) || selectedCategory && attributes.resourceType === selectedCategory) {\n          filteredSuggestions.add(node);\n        }\n      });\n      setSuggestions(filteredSuggestions);\n    }\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  useEffect(() => {\n    if (!sigma) return;\n    const handleHover = ({\n      node\n    }) => {\n      setHoveredNode(node);\n      setHoveredNeighbors(new Set(sigma.getGraph().neighbors(node)));\n    };\n    const handleLeave = () => {\n      setHoveredNode(null);\n      setHoveredNeighbors(null);\n    };\n    sigma.on(\"enterNode\", handleHover);\n    sigma.on(\"leaveNode\", handleLeave);\n    return () => {\n      sigma.off(\"enterNode\", handleHover);\n      sigma.off(\"leaveNode\", handleLeave);\n    };\n  }, [sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"QyqMPBn/qF39VPS2qIpcNBCspa4=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","EdgeCurveProgram","circularLayout","ForceSupervisor","MultiGraph","EdgeArrowProgram","DEFAULT_EDGE_CURVATURE","EdgeCurvedArrowProgram","indexParallelEdgesIndex","debounce","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","hoveredNode","setHoveredNode","suggestions","setSuggestions","hoveredNeighbors","setHoveredNeighbors","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","attributes","parallelIndex","parallelMaxIndex","curvature","mergeEdgeAttributes","type","setSettings","edgeProgramClasses","curve","line","renderEdgeLabels","defaultEdgeType","edgeColor","edgeArrowSizeRatio","nodeReducer","data","res","has","edgeReducer","extremities","some","n","hidden","assign","setGraph","refresh","clear","getGraph","lcQuery","toLowerCase","filteredSuggestions","Set","forEachNode","includes","add","handleHover","neighbors","handleLeave","on","off","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\";\nimport circularLayout from \"graphology-layout/circular\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport {\n  DEFAULT_EDGE_CURVATURE,\n  EdgeCurvedArrowProgram,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [suggestions, setSuggestions] = useState(null);\n  const [hoveredNeighbors, setHoveredNeighbors] = useState(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes to the graph\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n\n    // Add edges to the graph\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2,\n      });\n    });\n\n    // Index parallel edges for proper rendering\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n\n    // Set curvature for parallel edges\n    graph.forEachEdge((edge, attributes) => {\n      const { parallelIndex, parallelMaxIndex } = attributes;\n      const curvature =\n        typeof parallelIndex === \"number\"\n          ? DEFAULT_EDGE_CURVATURE * (parallelIndex - parallelMaxIndex / 2)\n          : 0;\n\n      graph.mergeEdgeAttributes(edge, {\n        type: parallelIndex ? \"curve\" : \"line\",\n        curvature: parallelIndex ? curvature : 0,\n      });\n    });\n\n    if (sigma) {\n      // Set Sigma settings\n      sigma.setSettings({\n        edgeProgramClasses: {\n          curve: EdgeCurvedArrowProgram,\n          line: EdgeArrowProgram,\n        },\n        renderEdgeLabels: false,\n        defaultEdgeType: \"line\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        nodeReducer: (node, data) => {\n          const res = { ...data };\n          if (hoveredNeighbors && !hoveredNeighbors.has(node) && hoveredNode !== node) {\n            res.color = \"#f6f6f6\";\n            res.label = \"\";\n          }\n          if (suggestions && !suggestions.has(node)) {\n            res.color = \"#f6f6f6\";\n            res.label = \"\";\n          }\n          return res;\n        },\n        edgeReducer: (edge, data) => {\n          const res = { ...data };\n          if (\n            hoveredNode &&\n            !graph\n              .extremities(edge)\n              .some((n) => n === hoveredNode || hoveredNeighbors?.has(n))\n          ) {\n            res.hidden = true;\n          }\n          if (\n            suggestions &&\n            (!suggestions.has(graph.source(edge)) || !suggestions.has(graph.target(edge)))\n          ) {\n            res.hidden = true;\n          }\n          return res;\n        },\n      });\n\n      // Apply circular layout\n      circularLayout.assign(graph);\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n\n      // Refresh the view\n      sigma.refresh();\n\n      // Cleanup\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [sigma, graphData, hoveredNode, hoveredNeighbors, suggestions]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n\n    if (!searchQuery && !selectedCategory) {\n      // Reset hovered states and suggestions\n      setHoveredNode(null);\n      setHoveredNeighbors(null);\n      setSuggestions(null);\n    } else {\n      const lcQuery = searchQuery?.toLowerCase();\n      const filteredSuggestions = new Set();\n\n      graph.forEachNode((node, attributes) => {\n        if (\n          (lcQuery && attributes.label.toLowerCase().includes(lcQuery)) ||\n          (selectedCategory && attributes.resourceType === selectedCategory)\n        ) {\n          filteredSuggestions.add(node);\n        }\n      });\n\n      setSuggestions(filteredSuggestions);\n    }\n\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma) return;\n\n    const handleHover = ({ node }) => {\n      setHoveredNode(node);\n      setHoveredNeighbors(new Set(sigma.getGraph().neighbors(node)));\n    };\n\n    const handleLeave = () => {\n      setHoveredNode(null);\n      setHoveredNeighbors(null);\n    };\n\n    sigma.on(\"enterNode\", handleHover);\n    sigma.on(\"leaveNode\", handleLeave);\n\n    return () => {\n      sigma.off(\"enterNode\", handleHover);\n      sigma.off(\"leaveNode\", handleLeave);\n    };\n  }, [sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}