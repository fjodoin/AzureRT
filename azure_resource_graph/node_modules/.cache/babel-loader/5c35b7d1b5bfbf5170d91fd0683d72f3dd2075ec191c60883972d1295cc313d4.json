{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n\n    // Add nodes\n    graph.addNode('n1', {\n      label: 'Ella Fitzgerald: 1917',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n2', {\n      label: 'Frank Sinatra: 1915',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n3', {\n      label: 'Billie Holiday: 1915',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n4', {\n      label: 'Louis Armstrong: 1901',\n      size: 25,\n      color: 'yellow'\n    });\n    graph.addNode('n5', {\n      label: 'Nina Simone: 1933',\n      size: 25,\n      color: 'orange'\n    });\n    graph.addNode('n6', {\n      label: 'Nat King Cole: 1919',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n7', {\n      label: 'Gregory Porter: 1971',\n      size: 25,\n      color: 'teal'\n    });\n    graph.addNode('n8', {\n      label: 'Sarah Vaughan: 1924',\n      size: 25,\n      color: 'orange'\n    });\n    graph.addNode('n9', {\n      label: 'Michael Bublé: 1975',\n      size: 25,\n      color: 'teal'\n    });\n\n    // Add edges\n    graph.addEdge('n1', 'n2');\n    graph.addEdge('n1', 'n3');\n    graph.addEdge('n1', 'n6');\n    graph.addEdge('n5', 'n8');\n    graph.addEdge('n7', 'n9');\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n\n    // Save the graph in Sigma for filtering later\n    sigma.setGraph(graph);\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery) {\n        // If search query is empty, reset all nodes and edges\n        graph.forEachNode(node => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Hide irrelevant nodes and edges\n        const matchingNodes = new Set();\n\n        // Show only matching nodes and remember their neighbors\n        graph.forEachNode((node, attributes) => {\n          const matches = attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          graph.setNodeAttribute(node, 'hidden', !matches);\n          if (matches) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, 'hidden', false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 84,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","circularLayout","jsxDEV","_jsxDEV","GraphComponent","searchQuery","_s","sigma","containerRef","graph","addNode","label","size","color","addEdge","assign","setGraph","refresh","getGraph","forEachNode","node","setNodeAttribute","forEachEdge","edge","setEdgeAttribute","matchingNodes","Set","attributes","matches","toLowerCase","includes","add","forEachNeighbor","neighbor","source","target","shouldShow","has","forEach","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\n\nconst GraphComponent = ({ searchQuery }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    // Add nodes\n    graph.addNode('n1', { label: 'Ella Fitzgerald: 1917', size: 25, color: 'red' });\n    graph.addNode('n2', { label: 'Frank Sinatra: 1915', size: 25, color: 'red' });\n    graph.addNode('n3', { label: 'Billie Holiday: 1915', size: 25, color: 'red' });\n    graph.addNode('n4', { label: 'Louis Armstrong: 1901', size: 25, color: 'yellow' });\n    graph.addNode('n5', { label: 'Nina Simone: 1933', size: 25, color: 'orange' });\n    graph.addNode('n6', { label: 'Nat King Cole: 1919', size: 25, color: 'red' });\n    graph.addNode('n7', { label: 'Gregory Porter: 1971', size: 25, color: 'teal' });\n    graph.addNode('n8', { label: 'Sarah Vaughan: 1924', size: 25, color: 'orange' });\n    graph.addNode('n9', { label: 'Michael Bublé: 1975', size: 25, color: 'teal' });\n\n    // Add edges\n    graph.addEdge('n1', 'n2');\n    graph.addEdge('n1', 'n3');\n    graph.addEdge('n1', 'n6');\n    graph.addEdge('n5', 'n8');\n    graph.addEdge('n7', 'n9');\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n\n    // Save the graph in Sigma for filtering later\n    sigma.setGraph(graph);\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery) {\n        // If search query is empty, reset all nodes and edges\n        graph.forEachNode((node) => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Hide irrelevant nodes and edges\n        const matchingNodes = new Set();\n\n        // Show only matching nodes and remember their neighbors\n        graph.forEachNode((node, attributes) => {\n          const matches = attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          graph.setNodeAttribute(node, 'hidden', !matches);\n\n          if (matches) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, 'hidden', false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}