{"ast":null,"code":"/**\n * Graphology ForceAtlas2 Layout\n * ==============================\n *\n * Library endpoint.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar createEdgeWeightGetter = require('graphology-utils/getters').createEdgeWeightGetter;\nvar iterate = require('./iterate.js');\nvar helpers = require('./helpers.js');\nvar DEFAULT_SETTINGS = require('./defaults.js');\n\n/**\n * Asbtract function used to run a certain number of iterations.\n *\n * @param  {boolean}       assign          - Whether to assign positions.\n * @param  {Graph}         graph           - Target graph.\n * @param  {object|number} params          - If number, params.iterations, else:\n * @param  {function}        getWeight     - Edge weight getter function.\n * @param  {number}          iterations    - Number of iterations.\n * @param  {function|null}   outputReducer - A node reducer\n * @param  {object}          [settings]    - Settings.\n * @return {object|undefined}\n */\nfunction abstractSynchronousLayout(assign, graph, params) {\n  if (!isGraph(graph)) throw new Error('graphology-layout-forceatlas2: the given graph is not a valid graphology instance.');\n  if (typeof params === 'number') params = {\n    iterations: params\n  };\n  var iterations = params.iterations;\n  if (typeof iterations !== 'number') throw new Error('graphology-layout-forceatlas2: invalid number of iterations.');\n  if (iterations <= 0) throw new Error('graphology-layout-forceatlas2: you should provide a positive number of iterations.');\n  var getEdgeWeight = createEdgeWeightGetter('getEdgeWeight' in params ? params.getEdgeWeight : 'weight').fromEntry;\n  var outputReducer = typeof params.outputReducer === 'function' ? params.outputReducer : null;\n\n  // Validating settings\n  var settings = helpers.assign({}, DEFAULT_SETTINGS, params.settings);\n  var validationError = helpers.validateSettings(settings);\n  if (validationError) throw new Error('graphology-layout-forceatlas2: ' + validationError.message);\n\n  // Building matrices\n  var matrices = helpers.graphToByteArrays(graph, getEdgeWeight);\n  var i;\n\n  // Iterating\n  for (i = 0; i < iterations; i++) iterate(settings, matrices.nodes, matrices.edges);\n\n  // Applying\n  if (assign) {\n    helpers.assignLayoutChanges(graph, matrices.nodes, outputReducer);\n    return;\n  }\n  return helpers.collectLayoutChanges(graph, matrices.nodes);\n}\n\n/**\n * Function returning sane layout settings for the given graph.\n *\n * @param  {Graph|number} graph - Target graph or graph order.\n * @return {object}\n */\nfunction inferSettings(graph) {\n  var order = typeof graph === 'number' ? graph : graph.order;\n  return {\n    barnesHutOptimize: order > 2000,\n    strongGravityMode: true,\n    gravity: 0.05,\n    scalingRatio: 10,\n    slowDown: 1 + Math.log(order)\n  };\n}\n\n/**\n * Exporting.\n */\nvar synchronousLayout = abstractSynchronousLayout.bind(null, false);\nsynchronousLayout.assign = abstractSynchronousLayout.bind(null, true);\nsynchronousLayout.inferSettings = inferSettings;\nmodule.exports = synchronousLayout;","map":{"version":3,"names":["isGraph","require","createEdgeWeightGetter","iterate","helpers","DEFAULT_SETTINGS","abstractSynchronousLayout","assign","graph","params","Error","iterations","getEdgeWeight","fromEntry","outputReducer","settings","validationError","validateSettings","message","matrices","graphToByteArrays","i","nodes","edges","assignLayoutChanges","collectLayoutChanges","inferSettings","order","barnesHutOptimize","strongGravityMode","gravity","scalingRatio","slowDown","Math","log","synchronousLayout","bind","module","exports"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/node_modules/graphology-layout-forceatlas2/index.js"],"sourcesContent":["/**\n * Graphology ForceAtlas2 Layout\n * ==============================\n *\n * Library endpoint.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\nvar iterate = require('./iterate.js');\nvar helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\n\n/**\n * Asbtract function used to run a certain number of iterations.\n *\n * @param  {boolean}       assign          - Whether to assign positions.\n * @param  {Graph}         graph           - Target graph.\n * @param  {object|number} params          - If number, params.iterations, else:\n * @param  {function}        getWeight     - Edge weight getter function.\n * @param  {number}          iterations    - Number of iterations.\n * @param  {function|null}   outputReducer - A node reducer\n * @param  {object}          [settings]    - Settings.\n * @return {object|undefined}\n */\nfunction abstractSynchronousLayout(assign, graph, params) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-forceatlas2: the given graph is not a valid graphology instance.'\n    );\n\n  if (typeof params === 'number') params = {iterations: params};\n\n  var iterations = params.iterations;\n\n  if (typeof iterations !== 'number')\n    throw new Error(\n      'graphology-layout-forceatlas2: invalid number of iterations.'\n    );\n\n  if (iterations <= 0)\n    throw new Error(\n      'graphology-layout-forceatlas2: you should provide a positive number of iterations.'\n    );\n\n  var getEdgeWeight = createEdgeWeightGetter(\n    'getEdgeWeight' in params ? params.getEdgeWeight : 'weight'\n  ).fromEntry;\n\n  var outputReducer =\n    typeof params.outputReducer === 'function' ? params.outputReducer : null;\n\n  // Validating settings\n  var settings = helpers.assign({}, DEFAULT_SETTINGS, params.settings);\n  var validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error(\n      'graphology-layout-forceatlas2: ' + validationError.message\n    );\n\n  // Building matrices\n  var matrices = helpers.graphToByteArrays(graph, getEdgeWeight);\n\n  var i;\n\n  // Iterating\n  for (i = 0; i < iterations; i++)\n    iterate(settings, matrices.nodes, matrices.edges);\n\n  // Applying\n  if (assign) {\n    helpers.assignLayoutChanges(graph, matrices.nodes, outputReducer);\n    return;\n  }\n\n  return helpers.collectLayoutChanges(graph, matrices.nodes);\n}\n\n/**\n * Function returning sane layout settings for the given graph.\n *\n * @param  {Graph|number} graph - Target graph or graph order.\n * @return {object}\n */\nfunction inferSettings(graph) {\n  var order = typeof graph === 'number' ? graph : graph.order;\n\n  return {\n    barnesHutOptimize: order > 2000,\n    strongGravityMode: true,\n    gravity: 0.05,\n    scalingRatio: 10,\n    slowDown: 1 + Math.log(order)\n  };\n}\n\n/**\n * Exporting.\n */\nvar synchronousLayout = abstractSynchronousLayout.bind(null, false);\nsynchronousLayout.assign = abstractSynchronousLayout.bind(null, true);\nsynchronousLayout.inferSettings = inferSettings;\n\nmodule.exports = synchronousLayout;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAClD,IAAIC,sBAAsB,GACxBD,OAAO,CAAC,0BAA0B,CAAC,CAACC,sBAAsB;AAC5D,IAAIC,OAAO,GAAGF,OAAO,CAAC,cAAc,CAAC;AACrC,IAAIG,OAAO,GAAGH,OAAO,CAAC,cAAc,CAAC;AAErC,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,eAAe,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,yBAAyBA,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACxD,IAAI,CAACT,OAAO,CAACQ,KAAK,CAAC,EACjB,MAAM,IAAIE,KAAK,CACb,oFACF,CAAC;EAEH,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAEA,MAAM,GAAG;IAACE,UAAU,EAAEF;EAAM,CAAC;EAE7D,IAAIE,UAAU,GAAGF,MAAM,CAACE,UAAU;EAElC,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAChC,MAAM,IAAID,KAAK,CACb,8DACF,CAAC;EAEH,IAAIC,UAAU,IAAI,CAAC,EACjB,MAAM,IAAID,KAAK,CACb,oFACF,CAAC;EAEH,IAAIE,aAAa,GAAGV,sBAAsB,CACxC,eAAe,IAAIO,MAAM,GAAGA,MAAM,CAACG,aAAa,GAAG,QACrD,CAAC,CAACC,SAAS;EAEX,IAAIC,aAAa,GACf,OAAOL,MAAM,CAACK,aAAa,KAAK,UAAU,GAAGL,MAAM,CAACK,aAAa,GAAG,IAAI;;EAE1E;EACA,IAAIC,QAAQ,GAAGX,OAAO,CAACG,MAAM,CAAC,CAAC,CAAC,EAAEF,gBAAgB,EAAEI,MAAM,CAACM,QAAQ,CAAC;EACpE,IAAIC,eAAe,GAAGZ,OAAO,CAACa,gBAAgB,CAACF,QAAQ,CAAC;EAExD,IAAIC,eAAe,EACjB,MAAM,IAAIN,KAAK,CACb,iCAAiC,GAAGM,eAAe,CAACE,OACtD,CAAC;;EAEH;EACA,IAAIC,QAAQ,GAAGf,OAAO,CAACgB,iBAAiB,CAACZ,KAAK,EAAEI,aAAa,CAAC;EAE9D,IAAIS,CAAC;;EAEL;EACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,UAAU,EAAEU,CAAC,EAAE,EAC7BlB,OAAO,CAACY,QAAQ,EAAEI,QAAQ,CAACG,KAAK,EAAEH,QAAQ,CAACI,KAAK,CAAC;;EAEnD;EACA,IAAIhB,MAAM,EAAE;IACVH,OAAO,CAACoB,mBAAmB,CAAChB,KAAK,EAAEW,QAAQ,CAACG,KAAK,EAAER,aAAa,CAAC;IACjE;EACF;EAEA,OAAOV,OAAO,CAACqB,oBAAoB,CAACjB,KAAK,EAAEW,QAAQ,CAACG,KAAK,CAAC;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,aAAaA,CAAClB,KAAK,EAAE;EAC5B,IAAImB,KAAK,GAAG,OAAOnB,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACmB,KAAK;EAE3D,OAAO;IACLC,iBAAiB,EAAED,KAAK,GAAG,IAAI;IAC/BE,iBAAiB,EAAE,IAAI;IACvBC,OAAO,EAAE,IAAI;IACbC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACP,KAAK;EAC9B,CAAC;AACH;;AAEA;AACA;AACA;AACA,IAAIQ,iBAAiB,GAAG7B,yBAAyB,CAAC8B,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;AACnED,iBAAiB,CAAC5B,MAAM,GAAGD,yBAAyB,CAAC8B,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AACrED,iBAAiB,CAACT,aAAa,GAAGA,aAAa;AAE/CW,MAAM,CAACC,OAAO,GAAGH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}