{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        // Assign initial x, y positions (e.g., random or grid-based)\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4 // Make arrows larger\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        // Make arrows more visible\n        renderEdgeLabels: true\n      });\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Ensure layout stops when unmounting\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n        const relevantEdges = new Set();\n\n        // Step 1: Identify matching nodes\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          if (matchesSearch && matchesCategory) {\n            matchingNodes.add(node);\n          }\n        });\n\n        // Step 2: Collect relevant edges (incoming and outgoing) for matching nodes\n        matchingNodes.forEach(node => {\n          graph.forEachEdge(node, (edge, attributes, source, target) => {\n            relevantEdges.add(edge); // Mark edge as relevant\n            matchingNodes.add(source); // Include source node\n            matchingNodes.add(target); // Include target node\n          });\n        });\n\n        // Step 3: Update visibility for nodes\n        graph.forEachNode(node => {\n          const shouldShow = matchingNodes.has(node);\n          graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n        });\n\n        // Step 4: Update visibility for edges\n        graph.forEachEdge(edge => {\n          const shouldShow = relevantEdges.has(edge);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 114,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","Graph","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","nodes","edges","forEach","node","i","addNode","id","label","size","color","musicType","x","Math","random","y","edge","addEdge","source","target","type","setSettings","nodeColor","edgeArrowSizeRatio","renderEdgeLabels","setGraph","layout","start","kill","getGraph","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","attributes","matchesSearch","toLowerCase","includes","matchesCategory","add","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        // Assign initial x, y positions (e.g., random or grid-based)\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4, // Make arrows larger\n      });\n    });\n\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2, // Make arrows more visible\n        renderEdgeLabels: true,\n      });\n\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Ensure layout stops when unmounting\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n  \n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n        const relevantEdges = new Set();\n  \n        // Step 1: Identify matching nodes\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n  \n          if (matchesSearch && matchesCategory) {\n            matchingNodes.add(node);\n          }\n        });\n  \n        // Step 2: Collect relevant edges (incoming and outgoing) for matching nodes\n        matchingNodes.forEach((node) => {\n          graph.forEachEdge(node, (edge, attributes, source, target) => {\n            relevantEdges.add(edge); // Mark edge as relevant\n            matchingNodes.add(source); // Include source node\n            matchingNodes.add(target); // Include target node\n          });\n        });\n  \n        // Step 3: Update visibility for nodes\n        graph.forEachNode((node) => {\n          const shouldShow = matchingNodes.has(node);\n          graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n        });\n  \n        // Step 4: Update visibility for edges\n        graph.forEachEdge((edge) => {\n          const shouldShow = relevantEdges.has(edge);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n      }\n  \n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  \n  \n  \n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}