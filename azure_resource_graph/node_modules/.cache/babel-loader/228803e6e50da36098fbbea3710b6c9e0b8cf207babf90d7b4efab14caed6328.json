{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    // Add nodes\n    graph.addNode('n1', {\n      label: 'Ella Fitzgerald: 1917',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n2', {\n      label: 'Frank Sinatra: 1915',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n3', {\n      label: 'Billie Holiday: 1915',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n4', {\n      label: 'Louis Armstrong: 1901',\n      size: 25,\n      color: 'yellow'\n    });\n    graph.addNode('n5', {\n      label: 'Nina Simone: 1933',\n      size: 25,\n      color: 'orange'\n    });\n    graph.addNode('n6', {\n      label: 'Nat King Cole: 1919',\n      size: 25,\n      color: 'red'\n    });\n    graph.addNode('n7', {\n      label: 'Gregory Porter: 1971',\n      size: 25,\n      color: 'teal'\n    });\n    graph.addNode('n8', {\n      label: 'Sarah Vaughan: 1924',\n      size: 25,\n      color: 'orange'\n    });\n    graph.addNode('n9', {\n      label: 'Michael Bublé: 1975',\n      size: 25,\n      color: 'teal'\n    });\n\n    // Add edges\n    graph.addEdge('n1', 'n2');\n    graph.addEdge('n1', 'n3');\n    graph.addEdge('n1', 'n6');\n    graph.addEdge('n5', 'n8');\n    graph.addEdge('n7', 'n9');\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      // Reset node colors\n      graph.forEachNode((node, attributes) => {\n        graph.setNodeAttribute(node, 'color', attributes.originalColor || attributes.color);\n      });\n      if (searchQuery) {\n        // Highlight matching nodes\n        graph.forEachNode((node, attributes) => {\n          if (attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) {\n            graph.setNodeAttribute(node, 'color', 'blue'); // Highlight matching nodes\n          }\n        });\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","circularLayout","jsxDEV","_jsxDEV","GraphComponent","searchQuery","_s","sigma","containerRef","graph","addNode","label","size","color","addEdge","assign","setGraph","refresh","getGraph","forEachNode","node","attributes","setNodeAttribute","originalColor","toLowerCase","includes","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\n\nconst GraphComponent = ({ searchQuery }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n    // Add nodes\n    graph.addNode('n1', { label: 'Ella Fitzgerald: 1917', size: 25, color: 'red' });\n    graph.addNode('n2', { label: 'Frank Sinatra: 1915', size: 25, color: 'red' });\n    graph.addNode('n3', { label: 'Billie Holiday: 1915', size: 25, color: 'red' });\n    graph.addNode('n4', { label: 'Louis Armstrong: 1901', size: 25, color: 'yellow' });\n    graph.addNode('n5', { label: 'Nina Simone: 1933', size: 25, color: 'orange' });\n    graph.addNode('n6', { label: 'Nat King Cole: 1919', size: 25, color: 'red' });\n    graph.addNode('n7', { label: 'Gregory Porter: 1971', size: 25, color: 'teal' });\n    graph.addNode('n8', { label: 'Sarah Vaughan: 1924', size: 25, color: 'orange' });\n    graph.addNode('n9', { label: 'Michael Bublé: 1975', size: 25, color: 'teal' });\n\n    // Add edges\n    graph.addEdge('n1', 'n2');\n    graph.addEdge('n1', 'n3');\n    graph.addEdge('n1', 'n6');\n    graph.addEdge('n5', 'n8');\n    graph.addEdge('n7', 'n9');\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      // Reset node colors\n      graph.forEachNode((node, attributes) => {\n        graph.setNodeAttribute(node, 'color', attributes.originalColor || attributes.color);\n      });\n\n      if (searchQuery) {\n        // Highlight matching nodes\n        graph.forEachNode((node, attributes) => {\n          if (attributes.label.toLowerCase().includes(searchQuery.toLowerCase())) {\n            graph.setNodeAttribute(node, 'color', 'blue'); // Highlight matching nodes\n          }\n        });\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}