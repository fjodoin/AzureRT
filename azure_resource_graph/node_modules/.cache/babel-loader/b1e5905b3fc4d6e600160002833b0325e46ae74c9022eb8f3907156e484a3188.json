{"ast":null,"code":"/**\n * Graphology Random Layout\n * =========================\n *\n * Simple layout giving uniform random positions to the nodes.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  center: 0.5,\n  rng: Math.random,\n  scale: 1\n};\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {object}   [options]      - Options:\n * @param  {array}      [dimensions] - List of dimensions of the layout.\n * @param  {number}     [center]     - Center of the layout.\n * @param  {function}   [rng]        - Custom RNG function to be used.\n * @param  {number}     [scale]      - Scale of the layout.\n * @return {object}                  - The positions by node.\n */\nfunction genericRandomLayout(assign, graph, options) {\n  if (!isGraph(graph)) throw new Error('graphology-layout/random: the given graph is not a valid graphology instance.');\n  options = resolveDefaults(options, DEFAULTS);\n  var dimensions = options.dimensions;\n  if (!Array.isArray(dimensions) || dimensions.length < 1) throw new Error('graphology-layout/random: given dimensions are invalid.');\n  var d = dimensions.length;\n  var center = options.center;\n  var rng = options.rng;\n  var scale = options.scale;\n  var offset = (center - 0.5) * scale;\n  function assignPosition(target) {\n    for (var i = 0; i < d; i++) {\n      target[dimensions[i]] = rng() * scale + offset;\n    }\n    return target;\n  }\n  if (!assign) {\n    var positions = {};\n    graph.forEachNode(function (node) {\n      positions[node] = assignPosition({});\n    });\n    return positions;\n  }\n  graph.updateEachNodeAttributes(function (_, attr) {\n    assignPosition(attr);\n    return attr;\n  }, {\n    attributes: dimensions\n  });\n}\nvar randomLayout = genericRandomLayout.bind(null, false);\nrandomLayout.assign = genericRandomLayout.bind(null, true);\nmodule.exports = randomLayout;","map":{"version":3,"names":["resolveDefaults","require","isGraph","DEFAULTS","dimensions","center","rng","Math","random","scale","genericRandomLayout","assign","graph","options","Error","Array","isArray","length","d","offset","assignPosition","target","i","positions","forEachNode","node","updateEachNodeAttributes","_","attr","attributes","randomLayout","bind","module","exports"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/node_modules/graphology-layout/random.js"],"sourcesContent":["/**\n * Graphology Random Layout\n * =========================\n *\n * Simple layout giving uniform random positions to the nodes.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  center: 0.5,\n  rng: Math.random,\n  scale: 1\n};\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {object}   [options]      - Options:\n * @param  {array}      [dimensions] - List of dimensions of the layout.\n * @param  {number}     [center]     - Center of the layout.\n * @param  {function}   [rng]        - Custom RNG function to be used.\n * @param  {number}     [scale]      - Scale of the layout.\n * @return {object}                  - The positions by node.\n */\nfunction genericRandomLayout(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/random: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length < 1)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  var d = dimensions.length;\n  var center = options.center;\n  var rng = options.rng;\n  var scale = options.scale;\n\n  var offset = (center - 0.5) * scale;\n\n  function assignPosition(target) {\n    for (var i = 0; i < d; i++) {\n      target[dimensions[i]] = rng() * scale + offset;\n    }\n\n    return target;\n  }\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node) {\n      positions[node] = assignPosition({});\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar randomLayout = genericRandomLayout.bind(null, false);\nrandomLayout.assign = genericRandomLayout.bind(null, true);\n\nmodule.exports = randomLayout;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC1D,IAAIC,OAAO,GAAGD,OAAO,CAAC,2BAA2B,CAAC;;AAElD;AACA;AACA;AACA,IAAIE,QAAQ,GAAG;EACbC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACtBC,MAAM,EAAE,GAAG;EACXC,GAAG,EAAEC,IAAI,CAACC,MAAM;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACnD,IAAI,CAACX,OAAO,CAACU,KAAK,CAAC,EACjB,MAAM,IAAIE,KAAK,CACb,+EACF,CAAC;EAEHD,OAAO,GAAGb,eAAe,CAACa,OAAO,EAAEV,QAAQ,CAAC;EAE5C,IAAIC,UAAU,GAAGS,OAAO,CAACT,UAAU;EAEnC,IAAI,CAACW,KAAK,CAACC,OAAO,CAACZ,UAAU,CAAC,IAAIA,UAAU,CAACa,MAAM,GAAG,CAAC,EACrD,MAAM,IAAIH,KAAK,CAAC,yDAAyD,CAAC;EAE5E,IAAII,CAAC,GAAGd,UAAU,CAACa,MAAM;EACzB,IAAIZ,MAAM,GAAGQ,OAAO,CAACR,MAAM;EAC3B,IAAIC,GAAG,GAAGO,OAAO,CAACP,GAAG;EACrB,IAAIG,KAAK,GAAGI,OAAO,CAACJ,KAAK;EAEzB,IAAIU,MAAM,GAAG,CAACd,MAAM,GAAG,GAAG,IAAII,KAAK;EAEnC,SAASW,cAAcA,CAACC,MAAM,EAAE;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAEI,CAAC,EAAE,EAAE;MAC1BD,MAAM,CAACjB,UAAU,CAACkB,CAAC,CAAC,CAAC,GAAGhB,GAAG,CAAC,CAAC,GAAGG,KAAK,GAAGU,MAAM;IAChD;IAEA,OAAOE,MAAM;EACf;EAEA,IAAI,CAACV,MAAM,EAAE;IACX,IAAIY,SAAS,GAAG,CAAC,CAAC;IAElBX,KAAK,CAACY,WAAW,CAAC,UAAUC,IAAI,EAAE;MAChCF,SAAS,CAACE,IAAI,CAAC,GAAGL,cAAc,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,OAAOG,SAAS;EAClB;EAEAX,KAAK,CAACc,wBAAwB,CAC5B,UAAUC,CAAC,EAAEC,IAAI,EAAE;IACjBR,cAAc,CAACQ,IAAI,CAAC;IACpB,OAAOA,IAAI;EACb,CAAC,EACD;IACEC,UAAU,EAAEzB;EACd,CACF,CAAC;AACH;AAEA,IAAI0B,YAAY,GAAGpB,mBAAmB,CAACqB,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;AACxDD,YAAY,CAACnB,MAAM,GAAGD,mBAAmB,CAACqB,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAE1DC,MAAM,CAACC,OAAO,GAAGH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}