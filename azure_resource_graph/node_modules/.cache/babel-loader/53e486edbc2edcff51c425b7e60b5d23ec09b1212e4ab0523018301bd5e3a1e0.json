{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true\n      });\n      sigma.setGraph(graph);\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n      matchingNodes.forEach(node => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n      graph.forEachNode(node => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n      graph.forEachEdge(edge => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s2();\n  const [graphData, setGraphData] = useState(null);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const jsonData = JSON.parse(e.target.result);\n          setGraphData(jsonData);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n          alert(\"Invalid JSON file.\");\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        padding: \"1rem 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Graph Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s2(GraphWrapper, \"PjlZClsbPqVCMuZfYmG/ilVBQ28=\");\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","ForceSupervisor","Graph","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","nodes","edges","forEach","node","addNode","id","label","size","color","musicType","x","Math","random","y","edge","addEdge","source","target","type","setSettings","nodeColor","edgeArrowSizeRatio","renderEdgeLabels","setGraph","layout","start","kill","getGraph","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","attributes","matchesSearch","toLowerCase","includes","matchesCategory","add","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_s2","setGraphData","handleFileUpload","event","file","files","reader","FileReader","onload","e","jsonData","JSON","parse","result","error","console","alert","readAsText","style","display","flexDirection","gap","children","alignItems","justifyContent","padding","accept","onChange","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new Graph();\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4,\n      });\n    });\n\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true,\n      });\n\n      sigma.setGraph(graph);\n\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n\n      matchingNodes.forEach((node) => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n\n      graph.forEachNode((node) => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n\n      graph.forEachEdge((edge) => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => {\n  const [graphData, setGraphData] = useState(null);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const jsonData = JSON.parse(e.target.result);\n          setGraphData(jsonData);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n          alert(\"Invalid JSON file.\");\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      <header style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", padding: \"1rem 0\" }}>\n        <h1>Graph Visualization</h1>\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: \"1rem\" }}>\n          <input type=\"file\" accept=\".json\" onChange={handleFileUpload} />\n        </div>\n      </header>\n\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}