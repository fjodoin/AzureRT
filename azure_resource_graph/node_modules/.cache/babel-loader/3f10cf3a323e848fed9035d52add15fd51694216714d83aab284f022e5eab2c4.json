{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\nimport { indexParallelEdgesIndex, EdgeCurvedArrowProgram } from \"@sigma/edge-curve\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_EDGE_CURVATURE = 0.25; // Adjust as needed\n\nfunction getCurvature(index, maxIndex) {\n  if (maxIndex <= 0) throw new Error(\"Invalid maxIndex\");\n  if (index < 0) return -getCurvature(-index, maxIndex);\n  const amplitude = 3.5;\n  const maxCurvature = amplitude * (1 - Math.exp(-maxIndex / amplitude)) * DEFAULT_EDGE_CURVATURE;\n  return maxCurvature * index / maxIndex;\n}\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [frozenNode, setFrozenNode] = useState(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2\n      });\n    });\n\n    // Index parallel edges to assign curvature\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\"\n    });\n\n    // Assign curvature to edges\n    graph.forEachEdge((edge, {\n      parallelIndex,\n      parallelMaxIndex\n    }) => {\n      const curvature = typeof parallelIndex === \"number\" ? getCurvature(parallelIndex, parallelMaxIndex) : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: curvature ? \"curved\" : \"straight\",\n        curvature\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n    sigma.setGraph(graph);\n    sigma.refresh();\n    return () => graph.clear();\n  }, [graphData, sigma]);\n  return null;\n};\n_s(GraphComponent, \"EtoU0k787Tmg9LCqpy2uuoKb3bE=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      settings: {\n        renderEdgeLabels: true,\n        edgeProgramClasses: {\n          straight: EdgeArrowProgram,\n          // For straight edges\n          curved: EdgeCurvedArrowProgram // For curved edges\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useState","SigmaContainer","useSigma","randomLayout","MultiGraph","debounce","indexParallelEdgesIndex","EdgeCurvedArrowProgram","EdgeArrowProgram","jsxDEV","_jsxDEV","DEFAULT_EDGE_CURVATURE","getCurvature","index","maxIndex","Error","amplitude","maxCurvature","Math","exp","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","hoveredNode","setHoveredNode","frozenNode","setFrozenNode","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","type","edgeIndexAttribute","edgeMinIndexAttribute","edgeMaxIndexAttribute","forEachEdge","parallelIndex","parallelMaxIndex","curvature","mergeEdgeAttributes","assign","setGraph","refresh","clear","_c","GraphWrapper","style","display","flexDirection","gap","children","settings","renderEdgeLabels","edgeProgramClasses","straight","curved","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\nimport { indexParallelEdgesIndex, EdgeCurvedArrowProgram } from \"@sigma/edge-curve\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\n\nconst DEFAULT_EDGE_CURVATURE = 0.25; // Adjust as needed\n\nfunction getCurvature(index, maxIndex) {\n  if (maxIndex <= 0) throw new Error(\"Invalid maxIndex\");\n  if (index < 0) return -getCurvature(-index, maxIndex);\n  const amplitude = 3.5;\n  const maxCurvature = amplitude * (1 - Math.exp(-maxIndex / amplitude)) * DEFAULT_EDGE_CURVATURE;\n  return (maxCurvature * index) / maxIndex;\n}\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [frozenNode, setFrozenNode] = useState(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2,\n      });\n    });\n\n    // Index parallel edges to assign curvature\n    indexParallelEdgesIndex(graph, {\n      edgeIndexAttribute: \"parallelIndex\",\n      edgeMinIndexAttribute: \"parallelMinIndex\",\n      edgeMaxIndexAttribute: \"parallelMaxIndex\",\n    });\n\n    // Assign curvature to edges\n    graph.forEachEdge((edge, { parallelIndex, parallelMaxIndex }) => {\n      const curvature =\n        typeof parallelIndex === \"number\"\n          ? getCurvature(parallelIndex, parallelMaxIndex)\n          : 0;\n      graph.mergeEdgeAttributes(edge, {\n        type: curvature ? \"curved\" : \"straight\",\n        curvature,\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    return () => graph.clear();\n  }, [graphData, sigma]);\n\n  return null;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer\n          settings={{\n            renderEdgeLabels: true,\n            edgeProgramClasses: {\n              straight: EdgeArrowProgram, // For straight edges\n              curved: EdgeCurvedArrowProgram, // For curved edges\n            },\n          }}\n        >\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}