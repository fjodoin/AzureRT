{"ast":null,"code":"function _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nvar HTML_COLORS = {\n  black: \"#000000\",\n  silver: \"#C0C0C0\",\n  gray: \"#808080\",\n  grey: \"#808080\",\n  white: \"#FFFFFF\",\n  maroon: \"#800000\",\n  red: \"#FF0000\",\n  purple: \"#800080\",\n  fuchsia: \"#FF00FF\",\n  green: \"#008000\",\n  lime: \"#00FF00\",\n  olive: \"#808000\",\n  yellow: \"#FFFF00\",\n  navy: \"#000080\",\n  blue: \"#0000FF\",\n  teal: \"#008080\",\n  aqua: \"#00FFFF\",\n  darkblue: \"#00008B\",\n  mediumblue: \"#0000CD\",\n  darkgreen: \"#006400\",\n  darkcyan: \"#008B8B\",\n  deepskyblue: \"#00BFFF\",\n  darkturquoise: \"#00CED1\",\n  mediumspringgreen: \"#00FA9A\",\n  springgreen: \"#00FF7F\",\n  cyan: \"#00FFFF\",\n  midnightblue: \"#191970\",\n  dodgerblue: \"#1E90FF\",\n  lightseagreen: \"#20B2AA\",\n  forestgreen: \"#228B22\",\n  seagreen: \"#2E8B57\",\n  darkslategray: \"#2F4F4F\",\n  darkslategrey: \"#2F4F4F\",\n  limegreen: \"#32CD32\",\n  mediumseagreen: \"#3CB371\",\n  turquoise: \"#40E0D0\",\n  royalblue: \"#4169E1\",\n  steelblue: \"#4682B4\",\n  darkslateblue: \"#483D8B\",\n  mediumturquoise: \"#48D1CC\",\n  indigo: \"#4B0082\",\n  darkolivegreen: \"#556B2F\",\n  cadetblue: \"#5F9EA0\",\n  cornflowerblue: \"#6495ED\",\n  rebeccapurple: \"#663399\",\n  mediumaquamarine: \"#66CDAA\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  slateblue: \"#6A5ACD\",\n  olivedrab: \"#6B8E23\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  mediumslateblue: \"#7B68EE\",\n  lawngreen: \"#7CFC00\",\n  chartreuse: \"#7FFF00\",\n  aquamarine: \"#7FFFD4\",\n  skyblue: \"#87CEEB\",\n  lightskyblue: \"#87CEFA\",\n  blueviolet: \"#8A2BE2\",\n  darkred: \"#8B0000\",\n  darkmagenta: \"#8B008B\",\n  saddlebrown: \"#8B4513\",\n  darkseagreen: \"#8FBC8F\",\n  lightgreen: \"#90EE90\",\n  mediumpurple: \"#9370DB\",\n  darkviolet: \"#9400D3\",\n  palegreen: \"#98FB98\",\n  darkorchid: \"#9932CC\",\n  yellowgreen: \"#9ACD32\",\n  sienna: \"#A0522D\",\n  brown: \"#A52A2A\",\n  darkgray: \"#A9A9A9\",\n  darkgrey: \"#A9A9A9\",\n  lightblue: \"#ADD8E6\",\n  greenyellow: \"#ADFF2F\",\n  paleturquoise: \"#AFEEEE\",\n  lightsteelblue: \"#B0C4DE\",\n  powderblue: \"#B0E0E6\",\n  firebrick: \"#B22222\",\n  darkgoldenrod: \"#B8860B\",\n  mediumorchid: \"#BA55D3\",\n  rosybrown: \"#BC8F8F\",\n  darkkhaki: \"#BDB76B\",\n  mediumvioletred: \"#C71585\",\n  indianred: \"#CD5C5C\",\n  peru: \"#CD853F\",\n  chocolate: \"#D2691E\",\n  tan: \"#D2B48C\",\n  lightgray: \"#D3D3D3\",\n  lightgrey: \"#D3D3D3\",\n  thistle: \"#D8BFD8\",\n  orchid: \"#DA70D6\",\n  goldenrod: \"#DAA520\",\n  palevioletred: \"#DB7093\",\n  crimson: \"#DC143C\",\n  gainsboro: \"#DCDCDC\",\n  plum: \"#DDA0DD\",\n  burlywood: \"#DEB887\",\n  lightcyan: \"#E0FFFF\",\n  lavender: \"#E6E6FA\",\n  darksalmon: \"#E9967A\",\n  violet: \"#EE82EE\",\n  palegoldenrod: \"#EEE8AA\",\n  lightcoral: \"#F08080\",\n  khaki: \"#F0E68C\",\n  aliceblue: \"#F0F8FF\",\n  honeydew: \"#F0FFF0\",\n  azure: \"#F0FFFF\",\n  sandybrown: \"#F4A460\",\n  wheat: \"#F5DEB3\",\n  beige: \"#F5F5DC\",\n  whitesmoke: \"#F5F5F5\",\n  mintcream: \"#F5FFFA\",\n  ghostwhite: \"#F8F8FF\",\n  salmon: \"#FA8072\",\n  antiquewhite: \"#FAEBD7\",\n  linen: \"#FAF0E6\",\n  lightgoldenrodyellow: \"#FAFAD2\",\n  oldlace: \"#FDF5E6\",\n  magenta: \"#FF00FF\",\n  deeppink: \"#FF1493\",\n  orangered: \"#FF4500\",\n  tomato: \"#FF6347\",\n  hotpink: \"#FF69B4\",\n  coral: \"#FF7F50\",\n  darkorange: \"#FF8C00\",\n  lightsalmon: \"#FFA07A\",\n  orange: \"#FFA500\",\n  lightpink: \"#FFB6C1\",\n  pink: \"#FFC0CB\",\n  gold: \"#FFD700\",\n  peachpuff: \"#FFDAB9\",\n  navajowhite: \"#FFDEAD\",\n  moccasin: \"#FFE4B5\",\n  bisque: \"#FFE4C4\",\n  mistyrose: \"#FFE4E1\",\n  blanchedalmond: \"#FFEBCD\",\n  papayawhip: \"#FFEFD5\",\n  lavenderblush: \"#FFF0F5\",\n  seashell: \"#FFF5EE\",\n  cornsilk: \"#FFF8DC\",\n  lemonchiffon: \"#FFFACD\",\n  floralwhite: \"#FFFAF0\",\n  snow: \"#FFFAFA\",\n  lightyellow: \"#FFFFE0\",\n  ivory: \"#FFFFF0\"\n};\n\n/**\n * Function extracting the color at the given pixel.\n */\nfunction extractPixel(gl, x, y, array) {\n  var data = array || new Uint8Array(4);\n  gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, data);\n  return data;\n}\n\n/**\n * Memoized function returning a float-encoded color from various string\n * formats describing colors.\n */\nvar INT8 = new Int8Array(4);\nvar INT32 = new Int32Array(INT8.buffer, 0, 1);\nvar FLOAT32 = new Float32Array(INT8.buffer, 0, 1);\nvar RGBA_TEST_REGEX = /^\\s*rgba?\\s*\\(/;\nvar RGBA_EXTRACT_REGEX = /^\\s*rgba?\\s*\\(\\s*([0-9]*)\\s*,\\s*([0-9]*)\\s*,\\s*([0-9]*)(?:\\s*,\\s*(.*)?)?\\)\\s*$/;\nfunction parseColor(val) {\n  var r = 0; // byte\n  var g = 0; // byte\n  var b = 0; // byte\n  var a = 1; // float\n\n  // Handling hexadecimal notation\n  if (val[0] === \"#\") {\n    if (val.length === 4) {\n      r = parseInt(val.charAt(1) + val.charAt(1), 16);\n      g = parseInt(val.charAt(2) + val.charAt(2), 16);\n      b = parseInt(val.charAt(3) + val.charAt(3), 16);\n    } else {\n      r = parseInt(val.charAt(1) + val.charAt(2), 16);\n      g = parseInt(val.charAt(3) + val.charAt(4), 16);\n      b = parseInt(val.charAt(5) + val.charAt(6), 16);\n    }\n    if (val.length === 9) {\n      a = parseInt(val.charAt(7) + val.charAt(8), 16) / 255;\n    }\n  }\n\n  // Handling rgb notation\n  else if (RGBA_TEST_REGEX.test(val)) {\n    var match = val.match(RGBA_EXTRACT_REGEX);\n    if (match) {\n      r = +match[1];\n      g = +match[2];\n      b = +match[3];\n      if (match[4]) a = +match[4];\n    }\n  }\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nvar FLOAT_COLOR_CACHE = {};\nfor (var htmlColor in HTML_COLORS) {\n  FLOAT_COLOR_CACHE[htmlColor] = floatColor(HTML_COLORS[htmlColor]);\n  // Replicating cache for hex values for free\n  FLOAT_COLOR_CACHE[HTML_COLORS[htmlColor]] = FLOAT_COLOR_CACHE[htmlColor];\n}\nfunction rgbaToFloat(r, g, b, a, masking) {\n  INT32[0] = a << 24 | b << 16 | g << 8 | r;\n  if (masking) INT32[0] = INT32[0] & 0xfeffffff;\n  return FLOAT32[0];\n}\nfunction floatColor(val) {\n  // The html color names are case-insensitive\n  val = val.toLowerCase();\n\n  // If the color is already computed, we yield it\n  if (typeof FLOAT_COLOR_CACHE[val] !== \"undefined\") return FLOAT_COLOR_CACHE[val];\n  var parsed = parseColor(val);\n  var r = parsed.r,\n    g = parsed.g,\n    b = parsed.b;\n  var a = parsed.a;\n  a = a * 255 | 0;\n  var color = rgbaToFloat(r, g, b, a, true);\n  FLOAT_COLOR_CACHE[val] = color;\n  return color;\n}\nfunction colorToArray(val, masking) {\n  FLOAT32[0] = floatColor(val);\n  var intValue = INT32[0];\n  if (masking) {\n    intValue = intValue | 0x01000000;\n  }\n  var r = intValue & 0xff;\n  var g = intValue >> 8 & 0xff;\n  var b = intValue >> 16 & 0xff;\n  var a = intValue >> 24 & 0xff;\n  return [r, g, b, a];\n}\nvar FLOAT_INDEX_CACHE = {};\nfunction indexToColor(index) {\n  // If the index is already computed, we yield it\n  if (typeof FLOAT_INDEX_CACHE[index] !== \"undefined\") return FLOAT_INDEX_CACHE[index];\n\n  // To address issue #1397, one strategy is to keep encoding 4 bytes colors,\n  // but with alpha hard-set to 1.0 (or 255):\n  var r = (index & 0x00ff0000) >>> 16;\n  var g = (index & 0x0000ff00) >>> 8;\n  var b = index & 0x000000ff;\n  var a = 0x000000ff;\n\n  // The original 4 bytes color encoding was the following:\n  // const r = (index & 0xff000000) >>> 24;\n  // const g = (index & 0x00ff0000) >>> 16;\n  // const b = (index & 0x0000ff00) >>> 8;\n  // const a = index & 0x000000ff;\n\n  var color = rgbaToFloat(r, g, b, a, true);\n  FLOAT_INDEX_CACHE[index] = color;\n  return color;\n}\nfunction colorToIndex(r, g, b, _a) {\n  // As for the function indexToColor, because of #1397 and the \"alpha is always\n  // 1.0\" strategy, we need to fix this function as well:\n  return b + (g << 8) + (r << 16);\n\n  // The original 4 bytes color decoding is the following:\n  // return a + (b << 8) + (g << 16) + (r << 24);\n}\nfunction getPixelColor(gl, frameBuffer, x, y, pixelRatio, downSizingRatio) {\n  var bufferX = Math.floor(x / downSizingRatio * pixelRatio);\n  var bufferY = Math.floor(gl.drawingBufferHeight / downSizingRatio - y / downSizingRatio * pixelRatio);\n  var pixel = new Uint8Array(4);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.readPixels(bufferX, bufferY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n  var _pixel = _slicedToArray(pixel, 4),\n    r = _pixel[0],\n    g = _pixel[1],\n    b = _pixel[2],\n    a = _pixel[3];\n  return [r, g, b, a];\n}\nexport { HTML_COLORS as H, _slicedToArray as _, _arrayLikeToArray as a, _unsupportedIterableToArray as b, colorToIndex as c, colorToArray as d, extractPixel as e, floatColor as f, getPixelColor as g, indexToColor as i, parseColor as p, rgbaToFloat as r };","map":{"version":3,"names":["_arrayWithHoles","r","Array","isArray","_iterableToArrayLimit","l","t","Symbol","iterator","e","n","i","u","a","f","o","call","next","Object","done","push","value","length","return","_arrayLikeToArray","_unsupportedIterableToArray","toString","slice","constructor","name","from","test","_nonIterableRest","TypeError","_slicedToArray","HTML_COLORS","black","silver","gray","grey","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","darkblue","mediumblue","darkgreen","darkcyan","deepskyblue","darkturquoise","mediumspringgreen","springgreen","cyan","midnightblue","dodgerblue","lightseagreen","forestgreen","seagreen","darkslategray","darkslategrey","limegreen","mediumseagreen","turquoise","royalblue","steelblue","darkslateblue","mediumturquoise","indigo","darkolivegreen","cadetblue","cornflowerblue","rebeccapurple","mediumaquamarine","dimgray","dimgrey","slateblue","olivedrab","slategray","slategrey","lightslategray","lightslategrey","mediumslateblue","lawngreen","chartreuse","aquamarine","skyblue","lightskyblue","blueviolet","darkred","darkmagenta","saddlebrown","darkseagreen","lightgreen","mediumpurple","darkviolet","palegreen","darkorchid","yellowgreen","sienna","brown","darkgray","darkgrey","lightblue","greenyellow","paleturquoise","lightsteelblue","powderblue","firebrick","darkgoldenrod","mediumorchid","rosybrown","darkkhaki","mediumvioletred","indianred","peru","chocolate","tan","lightgray","lightgrey","thistle","orchid","goldenrod","palevioletred","crimson","gainsboro","plum","burlywood","lightcyan","lavender","darksalmon","violet","palegoldenrod","lightcoral","khaki","aliceblue","honeydew","azure","sandybrown","wheat","beige","whitesmoke","mintcream","ghostwhite","salmon","antiquewhite","linen","lightgoldenrodyellow","oldlace","magenta","deeppink","orangered","tomato","hotpink","coral","darkorange","lightsalmon","orange","lightpink","pink","gold","peachpuff","navajowhite","moccasin","bisque","mistyrose","blanchedalmond","papayawhip","lavenderblush","seashell","cornsilk","lemonchiffon","floralwhite","snow","lightyellow","ivory","extractPixel","gl","x","y","array","data","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","INT8","Int8Array","INT32","Int32Array","buffer","FLOAT32","Float32Array","RGBA_TEST_REGEX","RGBA_EXTRACT_REGEX","parseColor","val","g","b","parseInt","charAt","match","FLOAT_COLOR_CACHE","htmlColor","floatColor","rgbaToFloat","masking","toLowerCase","parsed","color","colorToArray","intValue","FLOAT_INDEX_CACHE","indexToColor","index","colorToIndex","_a","getPixelColor","frameBuffer","pixelRatio","downSizingRatio","bufferX","Math","floor","bufferY","drawingBufferHeight","pixel","bindFramebuffer","FRAMEBUFFER","_pixel","H","_","c","d","p"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/node_modules/sigma/dist/colors-beb06eb2.esm.js"],"sourcesContent":["function _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\n\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\n\nvar HTML_COLORS = {\n  black: \"#000000\",\n  silver: \"#C0C0C0\",\n  gray: \"#808080\",\n  grey: \"#808080\",\n  white: \"#FFFFFF\",\n  maroon: \"#800000\",\n  red: \"#FF0000\",\n  purple: \"#800080\",\n  fuchsia: \"#FF00FF\",\n  green: \"#008000\",\n  lime: \"#00FF00\",\n  olive: \"#808000\",\n  yellow: \"#FFFF00\",\n  navy: \"#000080\",\n  blue: \"#0000FF\",\n  teal: \"#008080\",\n  aqua: \"#00FFFF\",\n  darkblue: \"#00008B\",\n  mediumblue: \"#0000CD\",\n  darkgreen: \"#006400\",\n  darkcyan: \"#008B8B\",\n  deepskyblue: \"#00BFFF\",\n  darkturquoise: \"#00CED1\",\n  mediumspringgreen: \"#00FA9A\",\n  springgreen: \"#00FF7F\",\n  cyan: \"#00FFFF\",\n  midnightblue: \"#191970\",\n  dodgerblue: \"#1E90FF\",\n  lightseagreen: \"#20B2AA\",\n  forestgreen: \"#228B22\",\n  seagreen: \"#2E8B57\",\n  darkslategray: \"#2F4F4F\",\n  darkslategrey: \"#2F4F4F\",\n  limegreen: \"#32CD32\",\n  mediumseagreen: \"#3CB371\",\n  turquoise: \"#40E0D0\",\n  royalblue: \"#4169E1\",\n  steelblue: \"#4682B4\",\n  darkslateblue: \"#483D8B\",\n  mediumturquoise: \"#48D1CC\",\n  indigo: \"#4B0082\",\n  darkolivegreen: \"#556B2F\",\n  cadetblue: \"#5F9EA0\",\n  cornflowerblue: \"#6495ED\",\n  rebeccapurple: \"#663399\",\n  mediumaquamarine: \"#66CDAA\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  slateblue: \"#6A5ACD\",\n  olivedrab: \"#6B8E23\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  mediumslateblue: \"#7B68EE\",\n  lawngreen: \"#7CFC00\",\n  chartreuse: \"#7FFF00\",\n  aquamarine: \"#7FFFD4\",\n  skyblue: \"#87CEEB\",\n  lightskyblue: \"#87CEFA\",\n  blueviolet: \"#8A2BE2\",\n  darkred: \"#8B0000\",\n  darkmagenta: \"#8B008B\",\n  saddlebrown: \"#8B4513\",\n  darkseagreen: \"#8FBC8F\",\n  lightgreen: \"#90EE90\",\n  mediumpurple: \"#9370DB\",\n  darkviolet: \"#9400D3\",\n  palegreen: \"#98FB98\",\n  darkorchid: \"#9932CC\",\n  yellowgreen: \"#9ACD32\",\n  sienna: \"#A0522D\",\n  brown: \"#A52A2A\",\n  darkgray: \"#A9A9A9\",\n  darkgrey: \"#A9A9A9\",\n  lightblue: \"#ADD8E6\",\n  greenyellow: \"#ADFF2F\",\n  paleturquoise: \"#AFEEEE\",\n  lightsteelblue: \"#B0C4DE\",\n  powderblue: \"#B0E0E6\",\n  firebrick: \"#B22222\",\n  darkgoldenrod: \"#B8860B\",\n  mediumorchid: \"#BA55D3\",\n  rosybrown: \"#BC8F8F\",\n  darkkhaki: \"#BDB76B\",\n  mediumvioletred: \"#C71585\",\n  indianred: \"#CD5C5C\",\n  peru: \"#CD853F\",\n  chocolate: \"#D2691E\",\n  tan: \"#D2B48C\",\n  lightgray: \"#D3D3D3\",\n  lightgrey: \"#D3D3D3\",\n  thistle: \"#D8BFD8\",\n  orchid: \"#DA70D6\",\n  goldenrod: \"#DAA520\",\n  palevioletred: \"#DB7093\",\n  crimson: \"#DC143C\",\n  gainsboro: \"#DCDCDC\",\n  plum: \"#DDA0DD\",\n  burlywood: \"#DEB887\",\n  lightcyan: \"#E0FFFF\",\n  lavender: \"#E6E6FA\",\n  darksalmon: \"#E9967A\",\n  violet: \"#EE82EE\",\n  palegoldenrod: \"#EEE8AA\",\n  lightcoral: \"#F08080\",\n  khaki: \"#F0E68C\",\n  aliceblue: \"#F0F8FF\",\n  honeydew: \"#F0FFF0\",\n  azure: \"#F0FFFF\",\n  sandybrown: \"#F4A460\",\n  wheat: \"#F5DEB3\",\n  beige: \"#F5F5DC\",\n  whitesmoke: \"#F5F5F5\",\n  mintcream: \"#F5FFFA\",\n  ghostwhite: \"#F8F8FF\",\n  salmon: \"#FA8072\",\n  antiquewhite: \"#FAEBD7\",\n  linen: \"#FAF0E6\",\n  lightgoldenrodyellow: \"#FAFAD2\",\n  oldlace: \"#FDF5E6\",\n  magenta: \"#FF00FF\",\n  deeppink: \"#FF1493\",\n  orangered: \"#FF4500\",\n  tomato: \"#FF6347\",\n  hotpink: \"#FF69B4\",\n  coral: \"#FF7F50\",\n  darkorange: \"#FF8C00\",\n  lightsalmon: \"#FFA07A\",\n  orange: \"#FFA500\",\n  lightpink: \"#FFB6C1\",\n  pink: \"#FFC0CB\",\n  gold: \"#FFD700\",\n  peachpuff: \"#FFDAB9\",\n  navajowhite: \"#FFDEAD\",\n  moccasin: \"#FFE4B5\",\n  bisque: \"#FFE4C4\",\n  mistyrose: \"#FFE4E1\",\n  blanchedalmond: \"#FFEBCD\",\n  papayawhip: \"#FFEFD5\",\n  lavenderblush: \"#FFF0F5\",\n  seashell: \"#FFF5EE\",\n  cornsilk: \"#FFF8DC\",\n  lemonchiffon: \"#FFFACD\",\n  floralwhite: \"#FFFAF0\",\n  snow: \"#FFFAFA\",\n  lightyellow: \"#FFFFE0\",\n  ivory: \"#FFFFF0\"\n};\n\n/**\n * Function extracting the color at the given pixel.\n */\nfunction extractPixel(gl, x, y, array) {\n  var data = array || new Uint8Array(4);\n  gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, data);\n  return data;\n}\n\n/**\n * Memoized function returning a float-encoded color from various string\n * formats describing colors.\n */\nvar INT8 = new Int8Array(4);\nvar INT32 = new Int32Array(INT8.buffer, 0, 1);\nvar FLOAT32 = new Float32Array(INT8.buffer, 0, 1);\nvar RGBA_TEST_REGEX = /^\\s*rgba?\\s*\\(/;\nvar RGBA_EXTRACT_REGEX = /^\\s*rgba?\\s*\\(\\s*([0-9]*)\\s*,\\s*([0-9]*)\\s*,\\s*([0-9]*)(?:\\s*,\\s*(.*)?)?\\)\\s*$/;\nfunction parseColor(val) {\n  var r = 0; // byte\n  var g = 0; // byte\n  var b = 0; // byte\n  var a = 1; // float\n\n  // Handling hexadecimal notation\n  if (val[0] === \"#\") {\n    if (val.length === 4) {\n      r = parseInt(val.charAt(1) + val.charAt(1), 16);\n      g = parseInt(val.charAt(2) + val.charAt(2), 16);\n      b = parseInt(val.charAt(3) + val.charAt(3), 16);\n    } else {\n      r = parseInt(val.charAt(1) + val.charAt(2), 16);\n      g = parseInt(val.charAt(3) + val.charAt(4), 16);\n      b = parseInt(val.charAt(5) + val.charAt(6), 16);\n    }\n    if (val.length === 9) {\n      a = parseInt(val.charAt(7) + val.charAt(8), 16) / 255;\n    }\n  }\n\n  // Handling rgb notation\n  else if (RGBA_TEST_REGEX.test(val)) {\n    var match = val.match(RGBA_EXTRACT_REGEX);\n    if (match) {\n      r = +match[1];\n      g = +match[2];\n      b = +match[3];\n      if (match[4]) a = +match[4];\n    }\n  }\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nvar FLOAT_COLOR_CACHE = {};\nfor (var htmlColor in HTML_COLORS) {\n  FLOAT_COLOR_CACHE[htmlColor] = floatColor(HTML_COLORS[htmlColor]);\n  // Replicating cache for hex values for free\n  FLOAT_COLOR_CACHE[HTML_COLORS[htmlColor]] = FLOAT_COLOR_CACHE[htmlColor];\n}\nfunction rgbaToFloat(r, g, b, a, masking) {\n  INT32[0] = a << 24 | b << 16 | g << 8 | r;\n  if (masking) INT32[0] = INT32[0] & 0xfeffffff;\n  return FLOAT32[0];\n}\nfunction floatColor(val) {\n  // The html color names are case-insensitive\n  val = val.toLowerCase();\n\n  // If the color is already computed, we yield it\n  if (typeof FLOAT_COLOR_CACHE[val] !== \"undefined\") return FLOAT_COLOR_CACHE[val];\n  var parsed = parseColor(val);\n  var r = parsed.r,\n    g = parsed.g,\n    b = parsed.b;\n  var a = parsed.a;\n  a = a * 255 | 0;\n  var color = rgbaToFloat(r, g, b, a, true);\n  FLOAT_COLOR_CACHE[val] = color;\n  return color;\n}\nfunction colorToArray(val, masking) {\n  FLOAT32[0] = floatColor(val);\n  var intValue = INT32[0];\n  if (masking) {\n    intValue = intValue | 0x01000000;\n  }\n  var r = intValue & 0xff;\n  var g = intValue >> 8 & 0xff;\n  var b = intValue >> 16 & 0xff;\n  var a = intValue >> 24 & 0xff;\n  return [r, g, b, a];\n}\nvar FLOAT_INDEX_CACHE = {};\nfunction indexToColor(index) {\n  // If the index is already computed, we yield it\n  if (typeof FLOAT_INDEX_CACHE[index] !== \"undefined\") return FLOAT_INDEX_CACHE[index];\n\n  // To address issue #1397, one strategy is to keep encoding 4 bytes colors,\n  // but with alpha hard-set to 1.0 (or 255):\n  var r = (index & 0x00ff0000) >>> 16;\n  var g = (index & 0x0000ff00) >>> 8;\n  var b = index & 0x000000ff;\n  var a = 0x000000ff;\n\n  // The original 4 bytes color encoding was the following:\n  // const r = (index & 0xff000000) >>> 24;\n  // const g = (index & 0x00ff0000) >>> 16;\n  // const b = (index & 0x0000ff00) >>> 8;\n  // const a = index & 0x000000ff;\n\n  var color = rgbaToFloat(r, g, b, a, true);\n  FLOAT_INDEX_CACHE[index] = color;\n  return color;\n}\nfunction colorToIndex(r, g, b, _a) {\n  // As for the function indexToColor, because of #1397 and the \"alpha is always\n  // 1.0\" strategy, we need to fix this function as well:\n  return b + (g << 8) + (r << 16);\n\n  // The original 4 bytes color decoding is the following:\n  // return a + (b << 8) + (g << 16) + (r << 24);\n}\nfunction getPixelColor(gl, frameBuffer, x, y, pixelRatio, downSizingRatio) {\n  var bufferX = Math.floor(x / downSizingRatio * pixelRatio);\n  var bufferY = Math.floor(gl.drawingBufferHeight / downSizingRatio - y / downSizingRatio * pixelRatio);\n  var pixel = new Uint8Array(4);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.readPixels(bufferX, bufferY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n  var _pixel = _slicedToArray(pixel, 4),\n    r = _pixel[0],\n    g = _pixel[1],\n    b = _pixel[2],\n    a = _pixel[3];\n  return [r, g, b, a];\n}\n\nexport { HTML_COLORS as H, _slicedToArray as _, _arrayLikeToArray as a, _unsupportedIterableToArray as b, colorToIndex as c, colorToArray as d, extractPixel as e, floatColor as f, getPixelColor as g, indexToColor as i, parseColor as p, rgbaToFloat as r };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}