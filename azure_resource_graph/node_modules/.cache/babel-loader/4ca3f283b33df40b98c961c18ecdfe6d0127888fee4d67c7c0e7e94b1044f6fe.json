{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport circularLayout from \"graphology-layout/circular\";\nimport { rescaleLayout } from \"graphology-layout\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport { DEFAULT_EDGE_CURVATURE, EdgeCurvedArrowProgram, indexParallelEdgesIndex } from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction rescaleGraphPositions(graph, scaleFactor = 1.5, centerX = 0, centerY = 0) {\n  graph.forEachNode((node, attributes) => {\n    const newX = (attributes.x - centerX) * scaleFactor + centerX;\n    const newY = (attributes.y - centerY) * scaleFactor + centerY;\n    graph.setNodeAttribute(node, \"x\", newX);\n    graph.setNodeAttribute(node, \"y\", newY);\n  });\n}\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  // State to manage hovered and selected nodes\n  const [state, setState] = React.useState({\n    hoveredNode: undefined,\n    selectedNode: undefined,\n    searchQuery: \"\",\n    hoveredNeighbors: undefined,\n    suggestions: undefined\n  });\n  const setHoveredNode = node => {\n    if (node) {\n      setState(prev => ({\n        ...prev,\n        hoveredNode: node,\n        hoveredNeighbors: new Set(sigma.getGraph().neighbors(node))\n      }));\n    } else {\n      setState(prev => ({\n        ...prev,\n        hoveredNode: undefined,\n        hoveredNeighbors: undefined\n      }));\n    }\n    sigma.refresh();\n  };\n  const setSearchQuery = query => {\n    const graph = sigma.getGraph();\n    const lcQuery = query.toLowerCase();\n    const suggestions = graph.nodes().map(n => ({\n      id: n,\n      label: graph.getNodeAttribute(n, \"label\")\n    })).filter(({\n      label\n    }) => label.toLowerCase().includes(lcQuery));\n    if (suggestions.length === 1 && suggestions[0].label === query) {\n      setState({\n        searchQuery: query,\n        selectedNode: suggestions[0].id,\n        suggestions: undefined\n      });\n    } else {\n      setState({\n        searchQuery: query,\n        selectedNode: undefined,\n        suggestions: new Set(suggestions.map(({\n          id\n        }) => id))\n      });\n    }\n    sigma.refresh();\n  };\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 10,\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        size: 2\n      });\n    });\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.setSettings({\n        renderEdgeLabels: true,\n        nodeReducer: (node, data) => {\n          const res = {\n            ...data\n          };\n          if (state.hoveredNeighbors && !state.hoveredNeighbors.has(node) && state.hoveredNode !== node) {\n            res.color = \"#f6f6f6\";\n            res.label = \"\";\n          }\n          if (state.selectedNode === node) {\n            res.color = \"#ff6347\"; // Highlight color for selected node\n          } else if (state.suggestions && !state.suggestions.has(node)) {\n            res.color = \"#f6f6f6\";\n            res.label = \"\";\n          }\n          return res;\n        },\n        edgeReducer: (edge, data) => {\n          const res = {\n            ...data\n          };\n          const graph = sigma.getGraph();\n          if (state.hoveredNode && !graph.extremities(edge).every(n => [state.hoveredNode, ...graph.neighbors(state.hoveredNode)].includes(n))) {\n            res.hidden = true;\n          }\n          if (state.suggestions && (!state.suggestions.has(graph.source(edge)) || !state.suggestions.has(graph.target(edge)))) {\n            res.hidden = true;\n          }\n          return res;\n        }\n      });\n      sigma.refresh();\n      return () => {\n        graph.clear();\n      };\n    }\n  }, [graphData, sigma, state]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 12\n  }, this);\n};\n_s(GraphComponent, \"G7DM6984ISJ5A0mX+Gp8wqwJP6Y=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","EdgeCurveProgram","circularLayout","rescaleLayout","ForceSupervisor","MultiGraph","EdgeArrowProgram","DEFAULT_EDGE_CURVATURE","EdgeCurvedArrowProgram","indexParallelEdgesIndex","debounce","jsxDEV","_jsxDEV","rescaleGraphPositions","graph","scaleFactor","centerX","centerY","forEachNode","node","attributes","newX","x","newY","y","setNodeAttribute","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","state","setState","useState","hoveredNode","undefined","selectedNode","hoveredNeighbors","suggestions","setHoveredNode","prev","Set","getGraph","neighbors","refresh","setSearchQuery","query","lcQuery","toLowerCase","nodes","map","n","id","label","getNodeAttribute","filter","includes","length","multi","edges","forEach","hasNode","addNode","size","color","resourceType","edge","addEdge","source","target","setGraph","setSettings","renderEdgeLabels","nodeReducer","data","res","has","edgeReducer","extremities","every","hidden","clear","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport circularLayout from \"graphology-layout/circular\";\nimport { rescaleLayout } from \"graphology-layout\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport { MultiGraph } from \"graphology\";\nimport { EdgeArrowProgram } from \"sigma/rendering\";\nimport {\n  DEFAULT_EDGE_CURVATURE,\n  EdgeCurvedArrowProgram,\n  indexParallelEdgesIndex,\n} from \"@sigma/edge-curve\";\nimport { debounce } from \"lodash\";\n\nfunction rescaleGraphPositions(graph, scaleFactor = 1.5, centerX = 0, centerY = 0) {\n  graph.forEachNode((node, attributes) => {\n    const newX = (attributes.x - centerX) * scaleFactor + centerX;\n    const newY = (attributes.y - centerY) * scaleFactor + centerY;\n  \n    graph.setNodeAttribute(node, \"x\", newX);\n    graph.setNodeAttribute(node, \"y\", newY);\n  });\n}\n  \n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n    const sigma = useSigma();\n    const containerRef = useRef(null);\n  \n    // State to manage hovered and selected nodes\n    const [state, setState] = React.useState({\n      hoveredNode: undefined,\n      selectedNode: undefined,\n      searchQuery: \"\",\n      hoveredNeighbors: undefined,\n      suggestions: undefined,\n    });\n  \n    const setHoveredNode = (node) => {\n      if (node) {\n        setState((prev) => ({\n          ...prev,\n          hoveredNode: node,\n          hoveredNeighbors: new Set(sigma.getGraph().neighbors(node)),\n        }));\n      } else {\n        setState((prev) => ({\n          ...prev,\n          hoveredNode: undefined,\n          hoveredNeighbors: undefined,\n        }));\n      }\n      sigma.refresh();\n    };\n  \n    const setSearchQuery = (query) => {\n      const graph = sigma.getGraph();\n      const lcQuery = query.toLowerCase();\n  \n      const suggestions = graph\n        .nodes()\n        .map((n) => ({\n          id: n,\n          label: graph.getNodeAttribute(n, \"label\"),\n        }))\n        .filter(({ label }) => label.toLowerCase().includes(lcQuery));\n  \n      if (suggestions.length === 1 && suggestions[0].label === query) {\n        setState({\n          searchQuery: query,\n          selectedNode: suggestions[0].id,\n          suggestions: undefined,\n        });\n      } else {\n        setState({\n          searchQuery: query,\n          selectedNode: undefined,\n          suggestions: new Set(suggestions.map(({ id }) => id)),\n        });\n      }\n  \n      sigma.refresh();\n    };\n  \n    useEffect(() => {\n      if (!graphData) return;\n  \n      const graph = new MultiGraph({ multi: true });\n      const { nodes, edges } = graphData;\n  \n      nodes.forEach((node) => {\n        if (!graph.hasNode(node.id)) {\n          graph.addNode(node.id, {\n            label: node.label,\n            size: 10,\n            color: node.color,\n            resourceType: node.resourceType,\n          });\n        }\n      });\n  \n      edges.forEach((edge) => {\n        graph.addEdge(edge.source, edge.target, {\n          label: edge.label,\n          color: edge.color,\n          size: 2,\n        });\n      });\n  \n      if (sigma) {\n        sigma.setGraph(graph);\n  \n        sigma.setSettings({\n          renderEdgeLabels: true,\n          nodeReducer: (node, data) => {\n            const res = { ...data };\n            if (state.hoveredNeighbors && !state.hoveredNeighbors.has(node) && state.hoveredNode !== node) {\n              res.color = \"#f6f6f6\";\n              res.label = \"\";\n            }\n            if (state.selectedNode === node) {\n              res.color = \"#ff6347\"; // Highlight color for selected node\n            } else if (state.suggestions && !state.suggestions.has(node)) {\n              res.color = \"#f6f6f6\";\n              res.label = \"\";\n            }\n            return res;\n          },\n          edgeReducer: (edge, data) => {\n            const res = { ...data };\n            const graph = sigma.getGraph();\n            if (\n              state.hoveredNode &&\n              !graph.extremities(edge).every((n) =>\n                [state.hoveredNode, ...graph.neighbors(state.hoveredNode)].includes(n)\n              )\n            ) {\n              res.hidden = true;\n            }\n            if (\n              state.suggestions &&\n              (!state.suggestions.has(graph.source(edge)) || !state.suggestions.has(graph.target(edge)))\n            ) {\n              res.hidden = true;\n            }\n            return res;\n          },\n        });\n  \n        sigma.refresh();\n  \n        return () => {\n          graph.clear();\n        };\n      }\n    }, [graphData, sigma, state]);\n  \n    return <div ref={containerRef} />;\n  };\n  \n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}