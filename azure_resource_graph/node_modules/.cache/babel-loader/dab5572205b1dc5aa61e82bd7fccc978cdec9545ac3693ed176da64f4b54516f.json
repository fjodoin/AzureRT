{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { createNodeImageProgram } from \"@sigma/node-image\";\nimport graphData from \"./data/graphData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with images\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        image: \"./images/person.svg\",\n        // Ensure image path is passed\n        type: \"image\",\n        // Use image rendering\n        x: node.x,\n        y: node.y\n      });\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true\n      });\n      sigma.setGraph(graph);\n\n      // Start the spring layout\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Cleanup layout on unmount\n      return () => layout.kill();\n    }\n  }, [sigma]);\n  return null; // SigmaContainer handles the rendering\n};\n_s(GraphComponent, \"49hMWeJ/1Zr+8c08Ed8iArCOSnU=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  settings: {\n    nodeProgramClasses: {\n      image: createNodeImageProgram() // Enable image rendering\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 61,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","SigmaContainer","useSigma","ForceSupervisor","Graph","createNodeImageProgram","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","graph","nodes","edges","forEach","node","addNode","id","label","size","color","musicType","image","type","x","y","edge","addEdge","source","target","setSettings","edgeArrowSizeRatio","renderEdgeLabels","setGraph","layout","start","kill","_c","GraphWrapper","settings","nodeProgramClasses","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { createNodeImageProgram } from \"@sigma/node-image\";\nimport graphData from \"./data/graphData.json\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    const { nodes, edges } = graphData;\n\n    // Add nodes with images\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        image: \"./images/person.svg\", // Ensure image path is passed\n        type: \"image\", // Use image rendering\n        x: node.x,\n        y: node.y,\n      });\n    });\n\n    // Add edges\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4,\n      });\n    });\n\n    if (sigma) {\n      sigma.setSettings({\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true,\n      });\n\n      sigma.setGraph(graph);\n\n      // Start the spring layout\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Cleanup layout on unmount\n      return () => layout.kill();\n    }\n  }, [sigma]);\n\n  return null; // SigmaContainer handles the rendering\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer\n    settings={{\n      nodeProgramClasses: {\n        image: createNodeImageProgram(), // Enable image rendering\n      },\n    }}\n  >\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,EAAEC,QAAQ,QAAQ,mBAAmB;AAC5D,OAAOC,eAAe,MAAM,gCAAgC;AAC5D,OAAOC,KAAK,MAAM,YAAY;AAC9B,SAASC,sBAAsB,QAAQ,mBAAmB;AAC1D,OAAOC,SAAS,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;EAExBF,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAG,IAAIV,KAAK,CAAC,CAAC;IAEzB,MAAM;MAAEW,KAAK;MAAEC;IAAM,CAAC,GAAGV,SAAS;;IAElC;IACAS,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAK;MACtBJ,KAAK,CAACK,OAAO,CAACD,IAAI,CAACE,EAAE,EAAE;QACrBC,KAAK,EAAEH,IAAI,CAACG,KAAK;QACjBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,KAAK,EAAEL,IAAI,CAACK,KAAK;QACjBC,SAAS,EAAEN,IAAI,CAACM,SAAS;QACzBC,KAAK,EAAE,qBAAqB;QAAE;QAC9BC,IAAI,EAAE,OAAO;QAAE;QACfC,CAAC,EAAET,IAAI,CAACS,CAAC;QACTC,CAAC,EAAEV,IAAI,CAACU;MACV,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAZ,KAAK,CAACC,OAAO,CAAEY,IAAI,IAAK;MACtBf,KAAK,CAACgB,OAAO,CAACD,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACG,MAAM,EAAE;QACtCX,KAAK,EAAEQ,IAAI,CAACR,KAAK;QACjBE,KAAK,EAAEM,IAAI,CAACN,KAAK;QACjBG,IAAI,EAAE,OAAO;QACbJ,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAIT,KAAK,EAAE;MACTA,KAAK,CAACoB,WAAW,CAAC;QAChBC,kBAAkB,EAAE,CAAC;QACrBC,gBAAgB,EAAE;MACpB,CAAC,CAAC;MAEFtB,KAAK,CAACuB,QAAQ,CAACtB,KAAK,CAAC;;MAErB;MACA,MAAMuB,MAAM,GAAG,IAAIlC,eAAe,CAACW,KAAK,CAAC;MACzCuB,MAAM,CAACC,KAAK,CAAC,CAAC;;MAEd;MACA,OAAO,MAAMD,MAAM,CAACE,IAAI,CAAC,CAAC;IAC5B;EACF,CAAC,EAAE,CAAC1B,KAAK,CAAC,CAAC;EAEX,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACD,EAAA,CAlDIH,cAAc;EAAA,QACJP,QAAQ;AAAA;AAAAsC,EAAA,GADlB/B,cAAc;AAoDpB,MAAMgC,YAAY,GAAGA,CAAC;EAAE/B,WAAW;EAAEC;AAAiB,CAAC,kBACrDH,OAAA,CAACP,cAAc;EACbyC,QAAQ,EAAE;IACRC,kBAAkB,EAAE;MAClBlB,KAAK,EAAEpB,sBAAsB,CAAC,CAAC,CAAE;IACnC;EACF,CAAE;EAAAuC,QAAA,eAEFpC,OAAA,CAACC,cAAc;IAACC,WAAW,EAAEA,WAAY;IAACC,gBAAgB,EAAEA;EAAiB;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAClE,CACjB;AAACC,GAAA,GAVIR,YAAY;AAYlB,eAAeA,YAAY;AAAC,IAAAD,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}