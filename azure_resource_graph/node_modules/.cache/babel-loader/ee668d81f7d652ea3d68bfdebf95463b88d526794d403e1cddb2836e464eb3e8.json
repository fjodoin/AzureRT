{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        // Assign initial x, y positions (e.g., random or grid-based)\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach(edge => {\n      console.log(edge.label);\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 3 // Make arrows larger\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        renderEdgeLabels: true,\n        // Enable edge label rendering\n        labelThreshold: 0,\n        // Ensure labels are always displayed\n        edgeLabelSize: \"proportional\" // Adjust edge label size\n      });\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Ensure layout stops when unmounting\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, \"hidden\", !isMatching);\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, \"hidden\", false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 102,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","Graph","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","nodes","edges","forEach","node","i","addNode","id","label","size","color","musicType","x","Math","random","y","edge","console","log","addEdge","source","target","type","setSettings","renderEdgeLabels","labelThreshold","edgeLabelSize","setGraph","layout","start","kill","getGraph","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","toLowerCase","includes","matchesCategory","isMatching","add","forEachNeighbor","neighbor","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        // Assign initial x, y positions (e.g., random or grid-based)\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n      });\n    });\n\n    \n    // Add edges with arrow type and size\n    edges.forEach((edge) => {\n      console.log(edge.label);\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 3, // Make arrows larger\n      });\n    });\n\n    if (sigma) {\n      sigma.setSettings({\n          renderEdgeLabels: true, // Enable edge label rendering\n          labelThreshold: 0, // Ensure labels are always displayed\n          edgeLabelSize: \"proportional\", // Adjust edge label size\n        });\n          \n\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Ensure layout stops when unmounting\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, \"hidden\", !isMatching);\n\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}