{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { createNodeImageProgram } from \"@sigma/node-image\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions and images\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n        type: \"image\",\n        // Define node type as \"image\"\n        image: node.image // Path to the node image\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4 // Make arrows larger\n      });\n    });\n    if (sigma) {\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Cleanup on unmount\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, \"hidden\", !isMatching);\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, \"hidden\", false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return null;\n};\n_s(GraphComponent, \"Al6Qym39JmcMEjJfBcb45sfsvZs=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  settings: {\n    renderEdgeLabels: true,\n    nodeProgramClasses: {\n      image: createNodeImageProgram(),\n      // Register the custom image program\n      gradient: NodeGradientProgram\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 94,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","SigmaContainer","useSigma","createNodeImageProgram","ForceSupervisor","Graph","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","graph","nodes","edges","forEach","node","i","addNode","id","label","size","color","musicType","x","Math","random","y","type","image","edge","addEdge","source","target","setGraph","layout","start","kill","getGraph","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","toLowerCase","includes","matchesCategory","isMatching","add","forEachNeighbor","neighbor","shouldShow","has","refresh","_c","GraphWrapper","settings","renderEdgeLabels","nodeProgramClasses","gradient","NodeGradientProgram","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport { createNodeImageProgram } from \"@sigma/node-image\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions and images\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n        type: \"image\", // Define node type as \"image\"\n        image: node.image, // Path to the node image\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4, // Make arrows larger\n      });\n    });\n\n    if (sigma) {\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Cleanup on unmount\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery && !selectedCategory) {\n        // Show all nodes and edges if no filters\n        graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n      } else {\n        const matchingNodes = new Set();\n\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, \"hidden\", !isMatching);\n\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n\n  return null;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer\n    settings={{\n      renderEdgeLabels: true,\n      nodeProgramClasses: {\n        image: createNodeImageProgram(), // Register the custom image program\n        gradient: NodeGradientProgram,\n      },\n    }}\n  >\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}