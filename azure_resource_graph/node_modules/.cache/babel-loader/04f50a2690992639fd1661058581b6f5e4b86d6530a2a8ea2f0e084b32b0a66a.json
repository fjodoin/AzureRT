{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [frozenNode, setFrozenNode] = useState(null); // New state for frozen node\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new MultiGraph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n    nodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType\n        });\n      }\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n    sigma.setGraph(graph);\n    sigma.refresh();\n    return () => graph.clear();\n  }, [graphData, sigma]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n    sigma.setSetting(\"nodeReducer\", (node, data) => {\n      const res = {\n        ...data\n      };\n      if (frozenNode) {\n        // Freeze visualization: only show the frozen node and its neighbors\n        res.hidden = node !== frozenNode && !graph.areNeighbors(frozenNode, node);\n      } else {\n        // Apply filtering logic\n        if (searchQuery && !data.label.toLowerCase().includes(searchQuery.toLowerCase())) {\n          res.hidden = true;\n        } else if (selectedCategory && data.resourceType !== selectedCategory) {\n          res.hidden = true;\n        } else if (hoveredNode && hoveredNode !== node && !graph.areNeighbors(hoveredNode, node)) {\n          res.hidden = true;\n        } else {\n          res.hidden = false;\n        }\n      }\n      return res;\n    });\n    sigma.setSetting(\"edgeReducer\", (edge, data) => {\n      const res = {\n        ...data\n      };\n      const [source, target] = graph.extremities(edge);\n      if (frozenNode) {\n        // Freeze visualization: only show edges connected to the frozen node\n        res.hidden = source !== frozenNode && target !== frozenNode;\n      } else {\n        // Apply filtering logic\n        if (searchQuery && !graph.getNodeAttribute(source, \"label\").toLowerCase().includes(searchQuery.toLowerCase()) && !graph.getNodeAttribute(target, \"label\").toLowerCase().includes(searchQuery.toLowerCase()) || selectedCategory && graph.getNodeAttribute(source, \"resourceType\") !== selectedCategory && graph.getNodeAttribute(target, \"resourceType\") !== selectedCategory) {\n          res.hidden = true;\n        } else if (hoveredNode && source !== hoveredNode && target !== hoveredNode) {\n          res.hidden = true;\n        } else {\n          res.hidden = false;\n        }\n      }\n      return res;\n    });\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, hoveredNode, frozenNode, sigma, graphData]);\n  useEffect(() => {\n    if (!sigma) return;\n    const handleNodeHover = ({\n      node\n    }) => {\n      if (!frozenNode) setHoveredNode(node);\n    };\n    const handleNodeOut = () => {\n      if (!frozenNode) setHoveredNode(null);\n    };\n    const handleNodeClick = ({\n      node\n    }) => {\n      setFrozenNode(prevFrozen => prevFrozen === node ? null : node); // Toggle frozen state\n    };\n    sigma.on(\"enterNode\", handleNodeHover);\n    sigma.on(\"leaveNode\", handleNodeOut);\n    sigma.on(\"clickNode\", handleNodeClick);\n    return () => {\n      sigma.off(\"enterNode\", handleNodeHover);\n      sigma.off(\"leaveNode\", handleNodeOut);\n      sigma.off(\"clickNode\", handleNodeClick);\n    };\n  }, [sigma, frozenNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"QS/zMcrIokf0caunSipoM7jrH2c=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      settings: {\n        renderEdgeLabels: true\n      },\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","randomLayout","MultiGraph","debounce","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","hoveredNode","setHoveredNode","frozenNode","setFrozenNode","containerRef","graph","multi","nodes","edges","forEach","node","hasNode","id","addNode","label","size","color","resourceType","edge","addEdge","source","target","type","assign","setGraph","refresh","clear","getGraph","debouncedRefresh","setSetting","data","res","hidden","areNeighbors","toLowerCase","includes","extremities","getNodeAttribute","handleNodeHover","handleNodeOut","handleNodeClick","prevFrozen","on","off","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","settings","renderEdgeLabels","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport randomLayout from \"graphology-layout/random\";\nimport { MultiGraph } from \"graphology\";\nimport { debounce } from \"lodash\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [frozenNode, setFrozenNode] = useState(null); // New state for frozen node\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new MultiGraph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    nodes.forEach((node) => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 4,\n          color: node.color,\n          resourceType: node.resourceType,\n        });\n      }\n    });\n\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 2,\n      });\n    });\n\n    // Apply random layout\n    randomLayout.assign(graph);\n\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    return () => graph.clear();\n  }, [graphData, sigma]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n    const debouncedRefresh = debounce(() => sigma.refresh(), 300);\n\n    sigma.setSetting(\"nodeReducer\", (node, data) => {\n      const res = { ...data };\n\n      if (frozenNode) {\n        // Freeze visualization: only show the frozen node and its neighbors\n        res.hidden = node !== frozenNode && !graph.areNeighbors(frozenNode, node);\n      } else {\n        // Apply filtering logic\n        if (searchQuery && !data.label.toLowerCase().includes(searchQuery.toLowerCase())) {\n          res.hidden = true;\n        } else if (selectedCategory && data.resourceType !== selectedCategory) {\n          res.hidden = true;\n        } else if (hoveredNode && hoveredNode !== node && !graph.areNeighbors(hoveredNode, node)) {\n          res.hidden = true;\n        } else {\n          res.hidden = false;\n        }\n      }\n\n      return res;\n    });\n\n    sigma.setSetting(\"edgeReducer\", (edge, data) => {\n      const res = { ...data };\n      const [source, target] = graph.extremities(edge);\n\n      if (frozenNode) {\n        // Freeze visualization: only show edges connected to the frozen node\n        res.hidden = source !== frozenNode && target !== frozenNode;\n      } else {\n        // Apply filtering logic\n        if (\n          (searchQuery &&\n            (!graph.getNodeAttribute(source, \"label\").toLowerCase().includes(searchQuery.toLowerCase()) &&\n              !graph.getNodeAttribute(target, \"label\").toLowerCase().includes(searchQuery.toLowerCase()))) ||\n          (selectedCategory &&\n            (graph.getNodeAttribute(source, \"resourceType\") !== selectedCategory &&\n              graph.getNodeAttribute(target, \"resourceType\") !== selectedCategory))\n        ) {\n          res.hidden = true;\n        } else if (hoveredNode && source !== hoveredNode && target !== hoveredNode) {\n          res.hidden = true;\n        } else {\n          res.hidden = false;\n        }\n      }\n\n      return res;\n    });\n\n    debouncedRefresh();\n  }, [searchQuery, selectedCategory, hoveredNode, frozenNode, sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma) return;\n\n    const handleNodeHover = ({ node }) => {\n      if (!frozenNode) setHoveredNode(node);\n    };\n    const handleNodeOut = () => {\n      if (!frozenNode) setHoveredNode(null);\n    };\n    const handleNodeClick = ({ node }) => {\n      setFrozenNode((prevFrozen) => (prevFrozen === node ? null : node)); // Toggle frozen state\n    };\n\n    sigma.on(\"enterNode\", handleNodeHover);\n    sigma.on(\"leaveNode\", handleNodeOut);\n    sigma.on(\"clickNode\", handleNodeClick);\n\n    return () => {\n      sigma.off(\"enterNode\", handleNodeHover);\n      sigma.off(\"leaveNode\", handleNodeOut);\n      sigma.off(\"clickNode\", handleNodeClick);\n    };\n  }, [sigma, frozenNode]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer settings={{ renderEdgeLabels: true }}>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}