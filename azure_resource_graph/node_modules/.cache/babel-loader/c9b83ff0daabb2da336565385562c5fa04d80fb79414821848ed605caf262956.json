{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n\n    // Save the graph in Sigma for filtering later\n    sigma.setGraph(graph);\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // If no search query or category is selected, reset all nodes and edges\n        graph.forEachNode(node => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Collect nodes that match the search query and/or category\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, 'hidden', false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 70,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","circularLayout","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","assign","setGraph","refresh","getGraph","forEachNode","node","setNodeAttribute","forEachEdge","edge","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","label","toLowerCase","includes","matchesCategory","musicType","isMatching","add","forEachNeighbor","neighbor","source","target","shouldShow","has","forEach","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport circularLayout from 'graphology-layout/circular';\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n\n\n    // Apply a circular layout\n    circularLayout.assign(graph);\n\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n\n    // Save the graph in Sigma for filtering later\n    sigma.setGraph(graph);\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery && !selectedCategory) {\n        // If no search query or category is selected, reset all nodes and edges\n        graph.forEachNode((node) => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        // Collect nodes that match the search query and/or category\n        const matchingNodes = new Set();\n\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        // Show edges connecting matching nodes\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        // Ensure all matching nodes and their neighbors are visible\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, 'hidden', false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,cAAc,EAAEC,QAAQ,QAAQ,mBAAmB;AAC5D,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,cAAc,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAMC,KAAK,GAAGT,QAAQ,CAAC,CAAC;EACxB,MAAMU,YAAY,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAG,IAAIV,KAAK,CAAC,CAAC;;IAIzB;IACAC,cAAc,CAACU,MAAM,CAACD,KAAK,CAAC;IAE5B,IAAIF,KAAK,EAAE;MACTA,KAAK,CAACI,QAAQ,CAACF,KAAK,CAAC;MACrBF,KAAK,CAACK,OAAO,CAAC,CAAC;IACjB;;IAEA;IACAL,KAAK,CAACI,QAAQ,CAACF,KAAK,CAAC;EACvB,CAAC,EAAE,CAACF,KAAK,CAAC,CAAC;EAEXZ,SAAS,CAAC,MAAM;IACd,IAAIY,KAAK,EAAE;MACT,MAAME,KAAK,GAAGF,KAAK,CAACM,QAAQ,CAAC,CAAC;MAE9B,IAAI,CAACT,WAAW,IAAI,CAACC,gBAAgB,EAAE;QACrC;QACAI,KAAK,CAACK,WAAW,CAAEC,IAAI,IAAKN,KAAK,CAACO,gBAAgB,CAACD,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC1EN,KAAK,CAACQ,WAAW,CAAEC,IAAI,IAAKT,KAAK,CAACU,gBAAgB,CAACD,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;MAC5E,CAAC,MAAM;QACL;QACA,MAAME,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;QAE/BZ,KAAK,CAACK,WAAW,CAAC,CAACC,IAAI,EAAEO,UAAU,KAAK;UACtC,MAAMC,aAAa,GAAG,CAACnB,WAAW,IAAIkB,UAAU,CAACE,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACtB,WAAW,CAACqB,WAAW,CAAC,CAAC,CAAC;UACxG,MAAME,eAAe,GAAG,CAACtB,gBAAgB,IAAIiB,UAAU,CAACM,SAAS,KAAKvB,gBAAgB;UAEtF,MAAMwB,UAAU,GAAGN,aAAa,IAAII,eAAe;UACnDlB,KAAK,CAACO,gBAAgB,CAACD,IAAI,EAAE,QAAQ,EAAE,CAACc,UAAU,CAAC;UAEnD,IAAIA,UAAU,EAAE;YACdT,aAAa,CAACU,GAAG,CAACf,IAAI,CAAC;YACvBN,KAAK,CAACsB,eAAe,CAAChB,IAAI,EAAGiB,QAAQ,IAAKZ,aAAa,CAACU,GAAG,CAACE,QAAQ,CAAC,CAAC;UACxE;QACF,CAAC,CAAC;;QAEF;QACAvB,KAAK,CAACQ,WAAW,CAAC,CAACC,IAAI,EAAEI,UAAU,EAAEW,MAAM,EAAEC,MAAM,KAAK;UACtD,MAAMC,UAAU,GAAGf,aAAa,CAACgB,GAAG,CAACH,MAAM,CAAC,IAAIb,aAAa,CAACgB,GAAG,CAACF,MAAM,CAAC;UACzEzB,KAAK,CAACU,gBAAgB,CAACD,IAAI,EAAE,QAAQ,EAAE,CAACiB,UAAU,CAAC;QACrD,CAAC,CAAC;;QAEF;QACAf,aAAa,CAACiB,OAAO,CAAEtB,IAAI,IAAKN,KAAK,CAACO,gBAAgB,CAACD,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;MAChF;MAEAR,KAAK,CAACK,OAAO,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACR,WAAW,EAAEC,gBAAgB,EAAEE,KAAK,CAAC,CAAC;EAE1C,oBAAOL,OAAA;IAAKoC,GAAG,EAAE9B;EAAa;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnC,CAAC;AAACpC,EAAA,CA7DIH,cAAc;EAAA,QACJL,QAAQ;AAAA;AAAA6C,EAAA,GADlBxC,cAAc;AA+DpB,MAAMyC,YAAY,GAAGA,CAAC;EAAExC,WAAW;EAAEC;AAAiB,CAAC,kBACrDH,OAAA,CAACL,cAAc;EAAAgD,QAAA,eACb3C,OAAA,CAACC,cAAc;IAACC,WAAW,EAAEA,WAAY;IAACC,gBAAgB,EAAEA;EAAiB;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAClE,CACjB;AAACI,GAAA,GAJIF,YAAY;AAMlB,eAAeA,YAAY;AAAC,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}