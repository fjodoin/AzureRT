{"ast":null,"code":"/**\n * Graphology Rotation Layout Helper\n * ==================================\n *\n * Function rotating the coordinates of the graph.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Constants.\n */\nvar RAD_CONVERSION = Math.PI / 180;\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  centeredOnZero: false,\n  degrees: false\n};\n\n/**\n * Abstract function for rotating a graph's coordinates.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {number}   angle          - Rotation angle.\n * @param  {object}   [options]      - Options.\n * @return {object}                  - The positions by node.\n */\nfunction genericRotation(assign, graph, angle, options) {\n  if (!isGraph(graph)) throw new Error('graphology-layout/rotation: the given graph is not a valid graphology instance.');\n  options = resolveDefaults(options, DEFAULTS);\n  if (options.degrees) angle *= RAD_CONVERSION;\n  var dimensions = options.dimensions;\n  if (!Array.isArray(dimensions) || dimensions.length !== 2) throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  // Handling null graph\n  if (graph.order === 0) {\n    if (assign) return;\n    return {};\n  }\n  var xd = dimensions[0];\n  var yd = dimensions[1];\n  var xCenter = 0;\n  var yCenter = 0;\n  if (!options.centeredOnZero) {\n    // Finding bounds of the graph\n    var xMin = Infinity;\n    var xMax = -Infinity;\n    var yMin = Infinity;\n    var yMax = -Infinity;\n    graph.forEachNode(function (node, attr) {\n      var x = attr[xd];\n      var y = attr[yd];\n      if (x < xMin) xMin = x;\n      if (x > xMax) xMax = x;\n      if (y < yMin) yMin = y;\n      if (y > yMax) yMax = y;\n    });\n    xCenter = (xMin + xMax) / 2;\n    yCenter = (yMin + yMax) / 2;\n  }\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  function assignPosition(target) {\n    var x = target[xd];\n    var y = target[yd];\n    target[xd] = xCenter + (x - xCenter) * cos - (y - yCenter) * sin;\n    target[yd] = yCenter + (x - xCenter) * sin + (y - yCenter) * cos;\n    return target;\n  }\n  if (!assign) {\n    var positions = {};\n    graph.forEachNode(function (node, attr) {\n      var o = {};\n      o[xd] = attr[xd];\n      o[yd] = attr[yd];\n      positions[node] = assignPosition(o);\n    });\n    return positions;\n  }\n  graph.updateEachNodeAttributes(function (_, attr) {\n    assignPosition(attr);\n    return attr;\n  }, {\n    attributes: dimensions\n  });\n}\nvar rotation = genericRotation.bind(null, false);\nrotation.assign = genericRotation.bind(null, true);\nmodule.exports = rotation;","map":{"version":3,"names":["resolveDefaults","require","isGraph","RAD_CONVERSION","Math","PI","DEFAULTS","dimensions","centeredOnZero","degrees","genericRotation","assign","graph","angle","options","Error","Array","isArray","length","order","xd","yd","xCenter","yCenter","xMin","Infinity","xMax","yMin","yMax","forEachNode","node","attr","x","y","cos","sin","assignPosition","target","positions","o","updateEachNodeAttributes","_","attributes","rotation","bind","module","exports"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/node_modules/graphology-layout/rotation.js"],"sourcesContent":["/**\n * Graphology Rotation Layout Helper\n * ==================================\n *\n * Function rotating the coordinates of the graph.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Constants.\n */\nvar RAD_CONVERSION = Math.PI / 180;\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  centeredOnZero: false,\n  degrees: false\n};\n\n/**\n * Abstract function for rotating a graph's coordinates.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {number}   angle          - Rotation angle.\n * @param  {object}   [options]      - Options.\n * @return {object}                  - The positions by node.\n */\nfunction genericRotation(assign, graph, angle, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/rotation: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  if (options.degrees) angle *= RAD_CONVERSION;\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length !== 2)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  // Handling null graph\n  if (graph.order === 0) {\n    if (assign) return;\n\n    return {};\n  }\n\n  var xd = dimensions[0];\n  var yd = dimensions[1];\n\n  var xCenter = 0;\n  var yCenter = 0;\n\n  if (!options.centeredOnZero) {\n    // Finding bounds of the graph\n    var xMin = Infinity;\n    var xMax = -Infinity;\n    var yMin = Infinity;\n    var yMax = -Infinity;\n\n    graph.forEachNode(function (node, attr) {\n      var x = attr[xd];\n      var y = attr[yd];\n\n      if (x < xMin) xMin = x;\n      if (x > xMax) xMax = x;\n      if (y < yMin) yMin = y;\n      if (y > yMax) yMax = y;\n    });\n\n    xCenter = (xMin + xMax) / 2;\n    yCenter = (yMin + yMax) / 2;\n  }\n\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n\n  function assignPosition(target) {\n    var x = target[xd];\n    var y = target[yd];\n\n    target[xd] = xCenter + (x - xCenter) * cos - (y - yCenter) * sin;\n    target[yd] = yCenter + (x - xCenter) * sin + (y - yCenter) * cos;\n\n    return target;\n  }\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node, attr) {\n      var o = {};\n      o[xd] = attr[xd];\n      o[yd] = attr[yd];\n      positions[node] = assignPosition(o);\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar rotation = genericRotation.bind(null, false);\nrotation.assign = genericRotation.bind(null, true);\n\nmodule.exports = rotation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}