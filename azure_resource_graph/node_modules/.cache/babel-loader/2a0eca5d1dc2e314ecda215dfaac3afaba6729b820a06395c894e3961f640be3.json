{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        // Assign initial x, y positions (e.g., random or grid-based)\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4 // Make arrows larger\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        edgeArrowSizeRatio: 2 // Make arrows more visible\n      });\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Ensure layout stops when unmounting\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        // Batch updates for better performance\n        const updates = [];\n        graph.forEachNode(node => {\n          updates.push({\n            node,\n            hidden: false\n          });\n        });\n        graph.forEachEdge(edge => {\n          updates.push({\n            edge,\n            hidden: false\n          });\n        });\n        updates.forEach(({\n          node,\n          edge,\n          hidden\n        }) => {\n          if (node) graph.setNodeAttribute(node, \"hidden\", hidden);\n          if (edge) graph.setEdgeAttribute(edge, \"hidden\", hidden);\n        });\n      } else {\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          if (matchesSearch && matchesCategory) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n        graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node)));\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n        });\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 104,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","Graph","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","nodes","edges","forEach","node","i","addNode","id","label","size","color","musicType","x","Math","random","y","edge","addEdge","source","target","type","setSettings","edgeArrowSizeRatio","setGraph","layout","start","kill","getGraph","updates","forEachNode","push","hidden","forEachEdge","setNodeAttribute","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","toLowerCase","includes","matchesCategory","add","forEachNeighbor","neighbor","has","shouldShow","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport graphData from \"./data/graphData.json\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node, i) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color,\n        musicType: node.musicType,\n        // Assign initial x, y positions (e.g., random or grid-based)\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4, // Make arrows larger\n      });\n    });\n\n    if (sigma) {\n      sigma.setSettings({\n        edgeArrowSizeRatio: 2, // Make arrows more visible\n      });\n\n      sigma.setGraph(graph);\n\n      // Create the spring layout and start it\n      const layout = new ForceSupervisor(graph);\n      layout.start();\n\n      // Ensure layout stops when unmounting\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma]);\n\nuseEffect(() => {\n  if (sigma) {\n    const graph = sigma.getGraph();\n\n    if (!searchQuery && !selectedCategory) {\n      // Batch updates for better performance\n      const updates = [];\n      graph.forEachNode((node) => {\n        updates.push({ node, hidden: false });\n      });\n      graph.forEachEdge((edge) => {\n        updates.push({ edge, hidden: false });\n      });\n\n      updates.forEach(({ node, edge, hidden }) => {\n        if (node) graph.setNodeAttribute(node, \"hidden\", hidden);\n        if (edge) graph.setEdgeAttribute(edge, \"hidden\", hidden);\n      });\n    } else {\n      const matchingNodes = new Set();\n\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n          graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n        }\n      });\n\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", !matchingNodes.has(node)));\n      graph.forEachEdge((edge, attributes, source, target) => {\n        const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n\n    sigma.refresh();\n  }\n}, [searchQuery, selectedCategory, sigma]);\n\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,cAAc,EAAEC,QAAQ,QAAQ,mBAAmB;AAC5D,OAAOC,eAAe,MAAM,gCAAgC;AAC5D,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,SAAS,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAMC,KAAK,GAAGV,QAAQ,CAAC,CAAC;EACxB,MAAMW,YAAY,GAAGb,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACd,MAAMe,KAAK,GAAG,IAAIV,KAAK,CAAC,CAAC;IAEzB,MAAM;MAAEW,KAAK;MAAEC;IAAM,CAAC,GAAGX,SAAS;;IAElC;IACAU,KAAK,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;MACzBL,KAAK,CAACM,OAAO,CAACF,IAAI,CAACG,EAAE,EAAE;QACrBC,KAAK,EAAEJ,IAAI,CAACI,KAAK;QACjBC,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC,KAAK,EAAEN,IAAI,CAACM,KAAK;QACjBC,SAAS,EAAEP,IAAI,CAACO,SAAS;QACzB;QACAC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;QAC5BC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAZ,KAAK,CAACC,OAAO,CAAEa,IAAI,IAAK;MACtBhB,KAAK,CAACiB,OAAO,CAACD,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACG,MAAM,EAAE;QACtCX,KAAK,EAAEQ,IAAI,CAACR,KAAK;QACjBE,KAAK,EAAEM,IAAI,CAACN,KAAK;QACjBU,IAAI,EAAE,OAAO;QACbX,IAAI,EAAE,CAAC,CAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAIX,KAAK,EAAE;MACTA,KAAK,CAACuB,WAAW,CAAC;QAChBC,kBAAkB,EAAE,CAAC,CAAE;MACzB,CAAC,CAAC;MAEFxB,KAAK,CAACyB,QAAQ,CAACvB,KAAK,CAAC;;MAErB;MACA,MAAMwB,MAAM,GAAG,IAAInC,eAAe,CAACW,KAAK,CAAC;MACzCwB,MAAM,CAACC,KAAK,CAAC,CAAC;;MAEd;MACA,OAAO,MAAM;QACXD,MAAM,CAACE,IAAI,CAAC,CAAC;MACf,CAAC;IACH;EACF,CAAC,EAAE,CAAC5B,KAAK,CAAC,CAAC;EAEbb,SAAS,CAAC,MAAM;IACd,IAAIa,KAAK,EAAE;MACT,MAAME,KAAK,GAAGF,KAAK,CAAC6B,QAAQ,CAAC,CAAC;MAE9B,IAAI,CAAChC,WAAW,IAAI,CAACC,gBAAgB,EAAE;QACrC;QACA,MAAMgC,OAAO,GAAG,EAAE;QAClB5B,KAAK,CAAC6B,WAAW,CAAEzB,IAAI,IAAK;UAC1BwB,OAAO,CAACE,IAAI,CAAC;YAAE1B,IAAI;YAAE2B,MAAM,EAAE;UAAM,CAAC,CAAC;QACvC,CAAC,CAAC;QACF/B,KAAK,CAACgC,WAAW,CAAEhB,IAAI,IAAK;UAC1BY,OAAO,CAACE,IAAI,CAAC;YAAEd,IAAI;YAAEe,MAAM,EAAE;UAAM,CAAC,CAAC;QACvC,CAAC,CAAC;QAEFH,OAAO,CAACzB,OAAO,CAAC,CAAC;UAAEC,IAAI;UAAEY,IAAI;UAAEe;QAAO,CAAC,KAAK;UAC1C,IAAI3B,IAAI,EAAEJ,KAAK,CAACiC,gBAAgB,CAAC7B,IAAI,EAAE,QAAQ,EAAE2B,MAAM,CAAC;UACxD,IAAIf,IAAI,EAAEhB,KAAK,CAACkC,gBAAgB,CAAClB,IAAI,EAAE,QAAQ,EAAEe,MAAM,CAAC;QAC1D,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAMI,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;QAE/BpC,KAAK,CAAC6B,WAAW,CAAC,CAACzB,IAAI,EAAEiC,UAAU,KAAK;UACtC,MAAMC,aAAa,GAAG,CAAC3C,WAAW,IAAI0C,UAAU,CAAC7B,KAAK,CAAC+B,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC7C,WAAW,CAAC4C,WAAW,CAAC,CAAC,CAAC;UACxG,MAAME,eAAe,GAAG,CAAC7C,gBAAgB,IAAIyC,UAAU,CAAC1B,SAAS,KAAKf,gBAAgB;UAEtF,IAAI0C,aAAa,IAAIG,eAAe,EAAE;YACpCN,aAAa,CAACO,GAAG,CAACtC,IAAI,CAAC;YACvBJ,KAAK,CAAC2C,eAAe,CAACvC,IAAI,EAAGwC,QAAQ,IAAKT,aAAa,CAACO,GAAG,CAACE,QAAQ,CAAC,CAAC;UACxE;QACF,CAAC,CAAC;QAEF5C,KAAK,CAAC6B,WAAW,CAAEzB,IAAI,IAAKJ,KAAK,CAACiC,gBAAgB,CAAC7B,IAAI,EAAE,QAAQ,EAAE,CAAC+B,aAAa,CAACU,GAAG,CAACzC,IAAI,CAAC,CAAC,CAAC;QAC7FJ,KAAK,CAACgC,WAAW,CAAC,CAAChB,IAAI,EAAEqB,UAAU,EAAEnB,MAAM,EAAEC,MAAM,KAAK;UACtD,MAAM2B,UAAU,GAAGX,aAAa,CAACU,GAAG,CAAC3B,MAAM,CAAC,IAAIiB,aAAa,CAACU,GAAG,CAAC1B,MAAM,CAAC;UACzEnB,KAAK,CAACkC,gBAAgB,CAAClB,IAAI,EAAE,QAAQ,EAAE,CAAC8B,UAAU,CAAC;QACrD,CAAC,CAAC;MACJ;MAEAhD,KAAK,CAACiD,OAAO,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACpD,WAAW,EAAEC,gBAAgB,EAAEE,KAAK,CAAC,CAAC;EAGxC,oBAAOL,OAAA;IAAKuD,GAAG,EAAEjD;EAAa;IAAAkD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnC,CAAC;AAACvD,EAAA,CA9FIH,cAAc;EAAA,QACJN,QAAQ;AAAA;AAAAiE,EAAA,GADlB3D,cAAc;AAgGpB,MAAM4D,YAAY,GAAGA,CAAC;EAAE3D,WAAW;EAAEC;AAAiB,CAAC,kBACrDH,OAAA,CAACN,cAAc;EAAAoE,QAAA,eACb9D,OAAA,CAACC,cAAc;IAACC,WAAW,EAAEA,WAAY;IAACC,gBAAgB,EAAEA;EAAiB;IAAAqD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAClE,CACjB;AAACI,GAAA,GAJIF,YAAY;AAMlB,eAAeA,YAAY;AAAC,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}