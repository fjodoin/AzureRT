{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport graphData from './data/graphData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes and edges from JSON\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        ...node,\n        size: node.size * 2 // Double the size for better readability\n      });\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        ...edge,\n        label: edge.label || '' // Ensure edges have labels if needed\n      });\n    });\n\n    // Dynamically position nodes in a tighter circular layout\n    const radius = 10; // Reduce the radius for closer positioning\n    graph.nodes().forEach((node, i) => {\n      const angle = i * 2 * Math.PI / graph.order;\n      graph.setNodeAttribute(node, 'x', radius * Math.cos(angle));\n      graph.setNodeAttribute(node, 'y', radius * Math.sin(angle));\n    });\n\n    // Set the graph in Sigma\n    if (sigma) {\n      sigma.setGraph(graph);\n\n      // Adjust camera zoom to fit all nodes within the viewport\n      const camera = sigma.getCamera();\n      camera.animatedSettings({\n        zoom: 1.5 // Zoom in for better visibility\n      });\n      sigma.refresh();\n    }\n  }, [sigma]);\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n      if (!searchQuery && !selectedCategory) {\n        graph.forEachNode(node => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge(edge => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        const matchingNodes = new Set();\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, neighbor => matchingNodes.add(neighbor));\n          }\n        });\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n        matchingNodes.forEach(node => graph.setNodeAttribute(node, 'hidden', false));\n      }\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory\n}) => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n    searchQuery: searchQuery,\n    selectedCategory: selectedCategory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 91,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","graphData","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","_s","sigma","containerRef","graph","nodes","edges","forEach","node","addNode","id","size","edge","addEdge","source","target","label","radius","i","angle","Math","PI","order","setNodeAttribute","cos","sin","setGraph","camera","getCamera","animatedSettings","zoom","refresh","getGraph","forEachNode","forEachEdge","setEdgeAttribute","matchingNodes","Set","attributes","matchesSearch","toLowerCase","includes","matchesCategory","musicType","isMatching","add","forEachNeighbor","neighbor","shouldShow","has","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport graphData from './data/graphData.json';\n\nconst GraphComponent = ({ searchQuery, selectedCategory }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const graph = new Graph();\n\n    const { nodes, edges } = graphData;\n\n    // Add nodes and edges from JSON\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        ...node,\n        size: node.size * 2, // Double the size for better readability\n      });\n    });\n\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        ...edge,\n        label: edge.label || '', // Ensure edges have labels if needed\n      });\n    });\n\n    // Dynamically position nodes in a tighter circular layout\n    const radius = 10; // Reduce the radius for closer positioning\n    graph.nodes().forEach((node, i) => {\n      const angle = (i * 2 * Math.PI) / graph.order;\n      graph.setNodeAttribute(node, 'x', radius * Math.cos(angle));\n      graph.setNodeAttribute(node, 'y', radius * Math.sin(angle));\n    });\n\n    // Set the graph in Sigma\n    if (sigma) {\n      sigma.setGraph(graph);\n\n      // Adjust camera zoom to fit all nodes within the viewport\n      const camera = sigma.getCamera();\n      camera.animatedSettings({\n        zoom: 1.5, // Zoom in for better visibility\n      });\n\n      sigma.refresh();\n    }\n  }, [sigma]);\n\n  useEffect(() => {\n    if (sigma) {\n      const graph = sigma.getGraph();\n\n      if (!searchQuery && !selectedCategory) {\n        graph.forEachNode((node) => graph.setNodeAttribute(node, 'hidden', false));\n        graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, 'hidden', false));\n      } else {\n        const matchingNodes = new Set();\n\n        graph.forEachNode((node, attributes) => {\n          const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n          const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n          const isMatching = matchesSearch && matchesCategory;\n          graph.setNodeAttribute(node, 'hidden', !isMatching);\n\n          if (isMatching) {\n            matchingNodes.add(node);\n            graph.forEachNeighbor(node, (neighbor) => matchingNodes.add(neighbor));\n          }\n        });\n\n        graph.forEachEdge((edge, attributes, source, target) => {\n          const shouldShow = matchingNodes.has(source) && matchingNodes.has(target);\n          graph.setEdgeAttribute(edge, 'hidden', !shouldShow);\n        });\n\n        matchingNodes.forEach((node) => graph.setNodeAttribute(node, 'hidden', false));\n      }\n\n      sigma.refresh();\n    }\n  }, [searchQuery, selectedCategory, sigma]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory }) => (\n  <SigmaContainer>\n    <GraphComponent searchQuery={searchQuery} selectedCategory={selectedCategory} />\n  </SigmaContainer>\n);\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}