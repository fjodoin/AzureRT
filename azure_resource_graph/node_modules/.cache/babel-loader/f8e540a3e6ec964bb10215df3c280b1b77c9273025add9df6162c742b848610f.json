{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new Graph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges with curve type and size\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"curve\",\n        // Use the curve type\n        size: 2\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true,\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\",\n        edgeProgramClasses: {\n          curve: EdgeCurveProgram // Register the curve program\n        }\n      });\n      sigma.setGraph(graph);\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10\n      });\n      layout.start();\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.resourceType === selectedCategory;\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n      matchingNodes.forEach(node => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n      graph.forEachNode(node => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n      graph.forEachEdge(edge => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","EdgeCurveProgram","ForceSupervisor","Graph","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","addNode","id","label","size","color","resourceType","x","Math","random","y","edge","addEdge","source","target","type","setSettings","nodeColor","edgeColor","edgeArrowSizeRatio","renderEdgeLabels","edgeLabelSize","edgeLabelWeight","edgeProgramClasses","curve","setGraph","layout","gravity","scalingRatio","slowDown","start","kill","getGraph","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","attributes","matchesSearch","toLowerCase","includes","matchesCategory","add","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport EdgeCurveProgram from \"@sigma/edge-curve\"; // Import for curved edges\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new Graph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n      });\n    });\n\n    // Add edges with curve type and size\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"curve\", // Use the curve type\n        size: 2,\n      });\n    });\n\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true,\n        edgeLabelSize: 14,\n        edgeLabelWeight: \"bold\",\n        edgeProgramClasses: {\n          curve: EdgeCurveProgram, // Register the curve program\n        },\n      });\n\n      sigma.setGraph(graph);\n\n      const layout = new ForceSupervisor(graph, {\n        gravity: 0.05,\n        scalingRatio: 1.5,\n        slowDown: 10,\n      });\n\n      layout.start();\n\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch =\n          !searchQuery ||\n          attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory =\n          !selectedCategory || attributes.resourceType === selectedCategory;\n\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n\n      matchingNodes.forEach((node) => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n\n      graph.forEachNode((node) => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n\n      graph.forEachEdge((edge) => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}