{"ast":null,"code":"import isGraph from 'graphology-utils/is-graph';\nimport { _ as _slicedToArray } from './colors-beb06eb2.esm.js';\nvar linear = function linear(k) {\n  return k;\n};\nvar quadraticIn = function quadraticIn(k) {\n  return k * k;\n};\nvar quadraticOut = function quadraticOut(k) {\n  return k * (2 - k);\n};\nvar quadraticInOut = function quadraticInOut(k) {\n  if ((k *= 2) < 1) return 0.5 * k * k;\n  return -0.5 * (--k * (k - 2) - 1);\n};\nvar cubicIn = function cubicIn(k) {\n  return k * k * k;\n};\nvar cubicOut = function cubicOut(k) {\n  return --k * k * k + 1;\n};\nvar cubicInOut = function cubicInOut(k) {\n  if ((k *= 2) < 1) return 0.5 * k * k * k;\n  return 0.5 * ((k -= 2) * k * k + 2);\n};\nvar easings = {\n  linear: linear,\n  quadraticIn: quadraticIn,\n  quadraticOut: quadraticOut,\n  quadraticInOut: quadraticInOut,\n  cubicIn: cubicIn,\n  cubicOut: cubicOut,\n  cubicInOut: cubicInOut\n};\n\n/**\n * Defaults.\n */\n\nvar ANIMATE_DEFAULTS = {\n  easing: \"quadraticInOut\",\n  duration: 150\n};\n\n/**\n * Function used to animate the nodes.\n */\nfunction animateNodes(graph, targets, opts, callback) {\n  var options = Object.assign({}, ANIMATE_DEFAULTS, opts);\n  var easing = typeof options.easing === \"function\" ? options.easing : easings[options.easing];\n  var start = Date.now();\n  var startPositions = {};\n  for (var node in targets) {\n    var attrs = targets[node];\n    startPositions[node] = {};\n    for (var _k in attrs) startPositions[node][_k] = graph.getNodeAttribute(node, _k);\n  }\n  var frame = null;\n  var _step = function step() {\n    frame = null;\n    var p = (Date.now() - start) / options.duration;\n    if (p >= 1) {\n      // Animation is done\n      for (var _node in targets) {\n        var _attrs = targets[_node];\n\n        // We use given values to avoid precision issues and for convenience\n        for (var _k2 in _attrs) graph.setNodeAttribute(_node, _k2, _attrs[_k2]);\n      }\n      if (typeof callback === \"function\") callback();\n      return;\n    }\n    p = easing(p);\n    for (var _node2 in targets) {\n      var _attrs2 = targets[_node2];\n      var s = startPositions[_node2];\n      for (var _k3 in _attrs2) graph.setNodeAttribute(_node2, _k3, _attrs2[_k3] * p + s[_k3] * (1 - p));\n    }\n    frame = requestAnimationFrame(_step);\n  };\n  _step();\n  return function () {\n    if (frame) cancelAnimationFrame(frame);\n  };\n}\nfunction identity() {\n  return Float32Array.of(1, 0, 0, 0, 1, 0, 0, 0, 1);\n}\n\n// TODO: optimize\nfunction scale(m, x, y) {\n  m[0] = x;\n  m[4] = typeof y === \"number\" ? y : x;\n  return m;\n}\nfunction rotate(m, r) {\n  var s = Math.sin(r),\n    c = Math.cos(r);\n  m[0] = c;\n  m[1] = s;\n  m[3] = -s;\n  m[4] = c;\n  return m;\n}\nfunction translate(m, x, y) {\n  m[6] = x;\n  m[7] = y;\n  return m;\n}\nfunction multiply(a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  var a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  var a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  var b00 = b[0],\n    b01 = b[1],\n    b02 = b[2];\n  var b10 = b[3],\n    b11 = b[4],\n    b12 = b[5];\n  var b20 = b[6],\n    b21 = b[7],\n    b22 = b[8];\n  a[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  a[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  a[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  a[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  a[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  a[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  a[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  a[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  a[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return a;\n}\nfunction multiplyVec2(a, b) {\n  var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var a00 = a[0];\n  var a01 = a[1];\n  var a10 = a[3];\n  var a11 = a[4];\n  var a20 = a[6];\n  var a21 = a[7];\n  var b0 = b.x;\n  var b1 = b.y;\n  return {\n    x: b0 * a00 + b1 * a10 + a20 * z,\n    y: b0 * a01 + b1 * a11 + a21 * z\n  };\n}\n\n/**\n * In sigma, the graph is normalized into a [0, 1], [0, 1] square, before being given to the various renderers. This\n * helps to deal with quadtree in particular.\n * But at some point, we need to rescale it so that it takes the best place in the screen, i.e. we always want to see two\n * nodes \"touching\" opposite sides of the graph, with the camera being at its default state.\n *\n * This function determines this ratio.\n */\nfunction getCorrectionRatio(viewportDimensions, graphDimensions) {\n  var viewportRatio = viewportDimensions.height / viewportDimensions.width;\n  var graphRatio = graphDimensions.height / graphDimensions.width;\n\n  // If the stage and the graphs are in different directions (such as the graph being wider that tall while the stage\n  // is taller than wide), we can stop here to have indeed nodes touching opposite sides:\n  if (viewportRatio < 1 && graphRatio > 1 || viewportRatio > 1 && graphRatio < 1) {\n    return 1;\n  }\n\n  // Else, we need to fit the graph inside the stage:\n  // 1. If the graph is \"squarer\" (i.e. with a ratio closer to 1), we need to make the largest sides touch;\n  // 2. If the stage is \"squarer\", we need to make the smallest sides touch.\n  return Math.min(Math.max(graphRatio, 1 / graphRatio), Math.max(1 / viewportRatio, viewportRatio));\n}\n\n/**\n * Function returning a matrix from the current state of the camera.\n */\nfunction matrixFromCamera(state, viewportDimensions, graphDimensions, padding, inverse) {\n  // TODO: it's possible to optimize this drastically!\n  var angle = state.angle,\n    ratio = state.ratio,\n    x = state.x,\n    y = state.y;\n  var width = viewportDimensions.width,\n    height = viewportDimensions.height;\n  var matrix = identity();\n  var smallestDimension = Math.min(width, height) - 2 * padding;\n  var correctionRatio = getCorrectionRatio(viewportDimensions, graphDimensions);\n  if (!inverse) {\n    multiply(matrix, scale(identity(), 2 * (smallestDimension / width) * correctionRatio, 2 * (smallestDimension / height) * correctionRatio));\n    multiply(matrix, rotate(identity(), -angle));\n    multiply(matrix, scale(identity(), 1 / ratio));\n    multiply(matrix, translate(identity(), -x, -y));\n  } else {\n    multiply(matrix, translate(identity(), x, y));\n    multiply(matrix, scale(identity(), ratio));\n    multiply(matrix, rotate(identity(), angle));\n    multiply(matrix, scale(identity(), width / smallestDimension / 2 / correctionRatio, height / smallestDimension / 2 / correctionRatio));\n  }\n  return matrix;\n}\n\n/**\n * All these transformations we apply on the matrix to get it rescale the graph\n * as we want make it very hard to get pixel-perfect distances in WebGL. This\n * function returns a factor that properly cancels the matrix effect on lengths.\n *\n * [jacomyal]\n * To be fully honest, I can't really explain happens here... I notice that the\n * following ratio works (i.e. it correctly compensates the matrix impact on all\n * camera states I could try):\n * > `R = size(V) / size(M * V) / W`\n * as long as `M * V` is in the direction of W (ie. parallel to (Ox)). It works\n * as well with H and a vector that transforms into something parallel to (Oy).\n *\n * Also, note that we use `angle` and not `-angle` (that would seem logical,\n * since we want to anticipate the rotation), because the image is vertically\n * swapped in WebGL.\n */\nfunction getMatrixImpact(matrix, cameraState, viewportDimensions) {\n  var _multiplyVec = multiplyVec2(matrix, {\n      x: Math.cos(cameraState.angle),\n      y: Math.sin(cameraState.angle)\n    }, 0),\n    x = _multiplyVec.x,\n    y = _multiplyVec.y;\n  return 1 / Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) / viewportDimensions.width;\n}\n\n/**\n * Function returning the graph's node extent in x & y.\n */\nfunction graphExtent(graph) {\n  if (!graph.order) return {\n    x: [0, 1],\n    y: [0, 1]\n  };\n  var xMin = Infinity;\n  var xMax = -Infinity;\n  var yMin = Infinity;\n  var yMax = -Infinity;\n  graph.forEachNode(function (_, attr) {\n    var x = attr.x,\n      y = attr.y;\n    if (x < xMin) xMin = x;\n    if (x > xMax) xMax = x;\n    if (y < yMin) yMin = y;\n    if (y > yMax) yMax = y;\n  });\n  return {\n    x: [xMin, xMax],\n    y: [yMin, yMax]\n  };\n}\n\n/**\n * Check if the graph variable is a valid graph, and if sigma can render it.\n */\nfunction validateGraph(graph) {\n  // check if it's a valid graphology instance\n  if (!isGraph(graph)) throw new Error(\"Sigma: invalid graph instance.\");\n\n  // check if nodes have x/y attributes\n  graph.forEachNode(function (key, attributes) {\n    if (!Number.isFinite(attributes.x) || !Number.isFinite(attributes.y)) {\n      throw new Error(\"Sigma: Coordinates of node \".concat(key, \" are invalid. A node must have a numeric 'x' and 'y' attribute.\"));\n    }\n  });\n}\n\n/**\n * Function used to create DOM elements easily.\n */\nfunction createElement(tag, style, attributes) {\n  var element = document.createElement(tag);\n  if (style) {\n    for (var k in style) {\n      element.style[k] = style[k];\n    }\n  }\n  if (attributes) {\n    for (var _k in attributes) {\n      element.setAttribute(_k, attributes[_k]);\n    }\n  }\n  return element;\n}\n\n/**\n * Function returning the browser's pixel ratio.\n */\nfunction getPixelRatio() {\n  if (typeof window.devicePixelRatio !== \"undefined\") return window.devicePixelRatio;\n  return 1;\n}\n\n/**\n * Function ordering the given elements in reverse z-order so they drawn\n * the correct way.\n */\nfunction zIndexOrdering(_extent, getter, elements) {\n  // If k is > n, we'll use a standard sort\n  return elements.sort(function (a, b) {\n    var zA = getter(a) || 0,\n      zB = getter(b) || 0;\n    if (zA < zB) return -1;\n    if (zA > zB) return 1;\n    return 0;\n  });\n\n  // TODO: counting sort optimization\n}\n\n/**\n * Factory returning a function normalizing the given node's position & size.\n */\n\nfunction createNormalizationFunction(extent) {\n  var _extent$x = _slicedToArray(extent.x, 2),\n    minX = _extent$x[0],\n    maxX = _extent$x[1],\n    _extent$y = _slicedToArray(extent.y, 2),\n    minY = _extent$y[0],\n    maxY = _extent$y[1];\n  var ratio = Math.max(maxX - minX, maxY - minY),\n    dX = (maxX + minX) / 2,\n    dY = (maxY + minY) / 2;\n  if (ratio === 0 || Math.abs(ratio) === Infinity || isNaN(ratio)) ratio = 1;\n  if (isNaN(dX)) dX = 0;\n  if (isNaN(dY)) dY = 0;\n  var fn = function fn(data) {\n    return {\n      x: 0.5 + (data.x - dX) / ratio,\n      y: 0.5 + (data.y - dY) / ratio\n    };\n  };\n\n  // TODO: possibility to apply this in batch over array of indices\n  fn.applyTo = function (data) {\n    data.x = 0.5 + (data.x - dX) / ratio;\n    data.y = 0.5 + (data.y - dY) / ratio;\n  };\n  fn.inverse = function (data) {\n    return {\n      x: dX + ratio * (data.x - 0.5),\n      y: dY + ratio * (data.y - 0.5)\n    };\n  };\n  fn.ratio = ratio;\n  return fn;\n}\nexport { ANIMATE_DEFAULTS as A, getMatrixImpact as a, createElement as b, createNormalizationFunction as c, getPixelRatio as d, easings as e, multiplyVec2 as f, graphExtent as g, animateNodes as h, identity as i, getCorrectionRatio as j, quadraticOut as k, linear as l, matrixFromCamera as m, quadraticInOut as n, cubicIn as o, cubicOut as p, quadraticIn as q, cubicInOut as r, scale as s, rotate as t, translate as u, validateGraph as v, multiply as w, zIndexOrdering as z };","map":{"version":3,"names":["isGraph","_","_slicedToArray","linear","k","quadraticIn","quadraticOut","quadraticInOut","cubicIn","cubicOut","cubicInOut","easings","ANIMATE_DEFAULTS","easing","duration","animateNodes","graph","targets","opts","callback","options","Object","assign","start","Date","now","startPositions","node","attrs","_k","getNodeAttribute","frame","_step","step","p","_node","_attrs","_k2","setNodeAttribute","_node2","_attrs2","s","_k3","requestAnimationFrame","cancelAnimationFrame","identity","Float32Array","of","scale","m","x","y","rotate","r","Math","sin","c","cos","translate","multiply","a","b","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","multiplyVec2","z","arguments","length","undefined","b0","b1","getCorrectionRatio","viewportDimensions","graphDimensions","viewportRatio","height","width","graphRatio","min","max","matrixFromCamera","state","padding","inverse","angle","ratio","matrix","smallestDimension","correctionRatio","getMatrixImpact","cameraState","_multiplyVec","sqrt","pow","graphExtent","order","xMin","Infinity","xMax","yMin","yMax","forEachNode","attr","validateGraph","Error","key","attributes","Number","isFinite","concat","createElement","tag","style","element","document","setAttribute","getPixelRatio","window","devicePixelRatio","zIndexOrdering","_extent","getter","elements","sort","zA","zB","createNormalizationFunction","extent","_extent$x","minX","maxX","_extent$y","minY","maxY","dX","dY","abs","isNaN","fn","data","applyTo","A","d","e","f","g","h","i","j","l","n","o","q","t","u","v","w"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/node_modules/sigma/dist/normalization-be445518.esm.js"],"sourcesContent":["import isGraph from 'graphology-utils/is-graph';\nimport { _ as _slicedToArray } from './colors-beb06eb2.esm.js';\n\nvar linear = function linear(k) {\n  return k;\n};\nvar quadraticIn = function quadraticIn(k) {\n  return k * k;\n};\nvar quadraticOut = function quadraticOut(k) {\n  return k * (2 - k);\n};\nvar quadraticInOut = function quadraticInOut(k) {\n  if ((k *= 2) < 1) return 0.5 * k * k;\n  return -0.5 * (--k * (k - 2) - 1);\n};\nvar cubicIn = function cubicIn(k) {\n  return k * k * k;\n};\nvar cubicOut = function cubicOut(k) {\n  return --k * k * k + 1;\n};\nvar cubicInOut = function cubicInOut(k) {\n  if ((k *= 2) < 1) return 0.5 * k * k * k;\n  return 0.5 * ((k -= 2) * k * k + 2);\n};\nvar easings = {\n  linear: linear,\n  quadraticIn: quadraticIn,\n  quadraticOut: quadraticOut,\n  quadraticInOut: quadraticInOut,\n  cubicIn: cubicIn,\n  cubicOut: cubicOut,\n  cubicInOut: cubicInOut\n};\n\n/**\n * Defaults.\n */\n\nvar ANIMATE_DEFAULTS = {\n  easing: \"quadraticInOut\",\n  duration: 150\n};\n\n/**\n * Function used to animate the nodes.\n */\nfunction animateNodes(graph, targets, opts, callback) {\n  var options = Object.assign({}, ANIMATE_DEFAULTS, opts);\n  var easing = typeof options.easing === \"function\" ? options.easing : easings[options.easing];\n  var start = Date.now();\n  var startPositions = {};\n  for (var node in targets) {\n    var attrs = targets[node];\n    startPositions[node] = {};\n    for (var _k in attrs) startPositions[node][_k] = graph.getNodeAttribute(node, _k);\n  }\n  var frame = null;\n  var _step = function step() {\n    frame = null;\n    var p = (Date.now() - start) / options.duration;\n    if (p >= 1) {\n      // Animation is done\n      for (var _node in targets) {\n        var _attrs = targets[_node];\n\n        // We use given values to avoid precision issues and for convenience\n        for (var _k2 in _attrs) graph.setNodeAttribute(_node, _k2, _attrs[_k2]);\n      }\n      if (typeof callback === \"function\") callback();\n      return;\n    }\n    p = easing(p);\n    for (var _node2 in targets) {\n      var _attrs2 = targets[_node2];\n      var s = startPositions[_node2];\n      for (var _k3 in _attrs2) graph.setNodeAttribute(_node2, _k3, _attrs2[_k3] * p + s[_k3] * (1 - p));\n    }\n    frame = requestAnimationFrame(_step);\n  };\n  _step();\n  return function () {\n    if (frame) cancelAnimationFrame(frame);\n  };\n}\n\nfunction identity() {\n  return Float32Array.of(1, 0, 0, 0, 1, 0, 0, 0, 1);\n}\n\n// TODO: optimize\nfunction scale(m, x, y) {\n  m[0] = x;\n  m[4] = typeof y === \"number\" ? y : x;\n  return m;\n}\nfunction rotate(m, r) {\n  var s = Math.sin(r),\n    c = Math.cos(r);\n  m[0] = c;\n  m[1] = s;\n  m[3] = -s;\n  m[4] = c;\n  return m;\n}\nfunction translate(m, x, y) {\n  m[6] = x;\n  m[7] = y;\n  return m;\n}\nfunction multiply(a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  var a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  var a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  var b00 = b[0],\n    b01 = b[1],\n    b02 = b[2];\n  var b10 = b[3],\n    b11 = b[4],\n    b12 = b[5];\n  var b20 = b[6],\n    b21 = b[7],\n    b22 = b[8];\n  a[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  a[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  a[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  a[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  a[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  a[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  a[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  a[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  a[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return a;\n}\nfunction multiplyVec2(a, b) {\n  var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var a00 = a[0];\n  var a01 = a[1];\n  var a10 = a[3];\n  var a11 = a[4];\n  var a20 = a[6];\n  var a21 = a[7];\n  var b0 = b.x;\n  var b1 = b.y;\n  return {\n    x: b0 * a00 + b1 * a10 + a20 * z,\n    y: b0 * a01 + b1 * a11 + a21 * z\n  };\n}\n\n/**\n * In sigma, the graph is normalized into a [0, 1], [0, 1] square, before being given to the various renderers. This\n * helps to deal with quadtree in particular.\n * But at some point, we need to rescale it so that it takes the best place in the screen, i.e. we always want to see two\n * nodes \"touching\" opposite sides of the graph, with the camera being at its default state.\n *\n * This function determines this ratio.\n */\nfunction getCorrectionRatio(viewportDimensions, graphDimensions) {\n  var viewportRatio = viewportDimensions.height / viewportDimensions.width;\n  var graphRatio = graphDimensions.height / graphDimensions.width;\n\n  // If the stage and the graphs are in different directions (such as the graph being wider that tall while the stage\n  // is taller than wide), we can stop here to have indeed nodes touching opposite sides:\n  if (viewportRatio < 1 && graphRatio > 1 || viewportRatio > 1 && graphRatio < 1) {\n    return 1;\n  }\n\n  // Else, we need to fit the graph inside the stage:\n  // 1. If the graph is \"squarer\" (i.e. with a ratio closer to 1), we need to make the largest sides touch;\n  // 2. If the stage is \"squarer\", we need to make the smallest sides touch.\n  return Math.min(Math.max(graphRatio, 1 / graphRatio), Math.max(1 / viewportRatio, viewportRatio));\n}\n\n/**\n * Function returning a matrix from the current state of the camera.\n */\nfunction matrixFromCamera(state, viewportDimensions, graphDimensions, padding, inverse) {\n  // TODO: it's possible to optimize this drastically!\n  var angle = state.angle,\n    ratio = state.ratio,\n    x = state.x,\n    y = state.y;\n  var width = viewportDimensions.width,\n    height = viewportDimensions.height;\n  var matrix = identity();\n  var smallestDimension = Math.min(width, height) - 2 * padding;\n  var correctionRatio = getCorrectionRatio(viewportDimensions, graphDimensions);\n  if (!inverse) {\n    multiply(matrix, scale(identity(), 2 * (smallestDimension / width) * correctionRatio, 2 * (smallestDimension / height) * correctionRatio));\n    multiply(matrix, rotate(identity(), -angle));\n    multiply(matrix, scale(identity(), 1 / ratio));\n    multiply(matrix, translate(identity(), -x, -y));\n  } else {\n    multiply(matrix, translate(identity(), x, y));\n    multiply(matrix, scale(identity(), ratio));\n    multiply(matrix, rotate(identity(), angle));\n    multiply(matrix, scale(identity(), width / smallestDimension / 2 / correctionRatio, height / smallestDimension / 2 / correctionRatio));\n  }\n  return matrix;\n}\n\n/**\n * All these transformations we apply on the matrix to get it rescale the graph\n * as we want make it very hard to get pixel-perfect distances in WebGL. This\n * function returns a factor that properly cancels the matrix effect on lengths.\n *\n * [jacomyal]\n * To be fully honest, I can't really explain happens here... I notice that the\n * following ratio works (i.e. it correctly compensates the matrix impact on all\n * camera states I could try):\n * > `R = size(V) / size(M * V) / W`\n * as long as `M * V` is in the direction of W (ie. parallel to (Ox)). It works\n * as well with H and a vector that transforms into something parallel to (Oy).\n *\n * Also, note that we use `angle` and not `-angle` (that would seem logical,\n * since we want to anticipate the rotation), because the image is vertically\n * swapped in WebGL.\n */\nfunction getMatrixImpact(matrix, cameraState, viewportDimensions) {\n  var _multiplyVec = multiplyVec2(matrix, {\n      x: Math.cos(cameraState.angle),\n      y: Math.sin(cameraState.angle)\n    }, 0),\n    x = _multiplyVec.x,\n    y = _multiplyVec.y;\n  return 1 / Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) / viewportDimensions.width;\n}\n\n/**\n * Function returning the graph's node extent in x & y.\n */\nfunction graphExtent(graph) {\n  if (!graph.order) return {\n    x: [0, 1],\n    y: [0, 1]\n  };\n  var xMin = Infinity;\n  var xMax = -Infinity;\n  var yMin = Infinity;\n  var yMax = -Infinity;\n  graph.forEachNode(function (_, attr) {\n    var x = attr.x,\n      y = attr.y;\n    if (x < xMin) xMin = x;\n    if (x > xMax) xMax = x;\n    if (y < yMin) yMin = y;\n    if (y > yMax) yMax = y;\n  });\n  return {\n    x: [xMin, xMax],\n    y: [yMin, yMax]\n  };\n}\n\n/**\n * Check if the graph variable is a valid graph, and if sigma can render it.\n */\nfunction validateGraph(graph) {\n  // check if it's a valid graphology instance\n  if (!isGraph(graph)) throw new Error(\"Sigma: invalid graph instance.\");\n\n  // check if nodes have x/y attributes\n  graph.forEachNode(function (key, attributes) {\n    if (!Number.isFinite(attributes.x) || !Number.isFinite(attributes.y)) {\n      throw new Error(\"Sigma: Coordinates of node \".concat(key, \" are invalid. A node must have a numeric 'x' and 'y' attribute.\"));\n    }\n  });\n}\n\n/**\n * Function used to create DOM elements easily.\n */\nfunction createElement(tag, style, attributes) {\n  var element = document.createElement(tag);\n  if (style) {\n    for (var k in style) {\n      element.style[k] = style[k];\n    }\n  }\n  if (attributes) {\n    for (var _k in attributes) {\n      element.setAttribute(_k, attributes[_k]);\n    }\n  }\n  return element;\n}\n\n/**\n * Function returning the browser's pixel ratio.\n */\nfunction getPixelRatio() {\n  if (typeof window.devicePixelRatio !== \"undefined\") return window.devicePixelRatio;\n  return 1;\n}\n\n/**\n * Function ordering the given elements in reverse z-order so they drawn\n * the correct way.\n */\nfunction zIndexOrdering(_extent, getter, elements) {\n  // If k is > n, we'll use a standard sort\n  return elements.sort(function (a, b) {\n    var zA = getter(a) || 0,\n      zB = getter(b) || 0;\n    if (zA < zB) return -1;\n    if (zA > zB) return 1;\n    return 0;\n  });\n\n  // TODO: counting sort optimization\n}\n\n/**\n * Factory returning a function normalizing the given node's position & size.\n */\n\nfunction createNormalizationFunction(extent) {\n  var _extent$x = _slicedToArray(extent.x, 2),\n    minX = _extent$x[0],\n    maxX = _extent$x[1],\n    _extent$y = _slicedToArray(extent.y, 2),\n    minY = _extent$y[0],\n    maxY = _extent$y[1];\n  var ratio = Math.max(maxX - minX, maxY - minY),\n    dX = (maxX + minX) / 2,\n    dY = (maxY + minY) / 2;\n  if (ratio === 0 || Math.abs(ratio) === Infinity || isNaN(ratio)) ratio = 1;\n  if (isNaN(dX)) dX = 0;\n  if (isNaN(dY)) dY = 0;\n  var fn = function fn(data) {\n    return {\n      x: 0.5 + (data.x - dX) / ratio,\n      y: 0.5 + (data.y - dY) / ratio\n    };\n  };\n\n  // TODO: possibility to apply this in batch over array of indices\n  fn.applyTo = function (data) {\n    data.x = 0.5 + (data.x - dX) / ratio;\n    data.y = 0.5 + (data.y - dY) / ratio;\n  };\n  fn.inverse = function (data) {\n    return {\n      x: dX + ratio * (data.x - 0.5),\n      y: dY + ratio * (data.y - 0.5)\n    };\n  };\n  fn.ratio = ratio;\n  return fn;\n}\n\nexport { ANIMATE_DEFAULTS as A, getMatrixImpact as a, createElement as b, createNormalizationFunction as c, getPixelRatio as d, easings as e, multiplyVec2 as f, graphExtent as g, animateNodes as h, identity as i, getCorrectionRatio as j, quadraticOut as k, linear as l, matrixFromCamera as m, quadraticInOut as n, cubicIn as o, cubicOut as p, quadraticIn as q, cubicInOut as r, scale as s, rotate as t, translate as u, validateGraph as v, multiply as w, zIndexOrdering as z };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}