{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n    const graph = new Graph();\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: \"2\",\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4\n      });\n    });\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true\n      });\n      sigma.setGraph(graph);\n      const layout = new ForceSupervisor(graph, {\n        settings: {\n          gravity: 0.1,\n          // Attract nodes toward the center\n          nodeStrength: -30,\n          // Repulsion between nodes\n          edgeStrength: 0.1,\n          // Attraction between connected nodes\n          slowDown: 1,\n          // Reduce oscillation by increasing damping\n          maxIterations: 1000 // Cap the number of iterations\n        }\n      });\n      layout.start();\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma, graphData]);\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n      matchingNodes.forEach(node => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n      graph.forEachNode(node => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n      graph.forEachEdge(edge => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","ForceSupervisor","Graph","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","nodes","edges","forEach","node","addNode","id","label","size","color","musicType","x","Math","random","y","edge","addEdge","source","target","type","setSettings","nodeColor","edgeArrowSizeRatio","renderEdgeLabels","setGraph","layout","settings","gravity","nodeStrength","edgeStrength","slowDown","maxIterations","start","kill","getGraph","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","attributes","matchesSearch","toLowerCase","includes","matchesCategory","add","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport ForceSupervisor from \"graphology-layout-force/worker\";\nimport Graph from \"graphology\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    const graph = new Graph();\n    const { nodes, edges } = graphData;\n\n    // Add nodes with initial positions\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: \"2\",\n        color: node.color,\n        musicType: node.musicType,\n        x: Math.random() * 500 - 250,\n        y: Math.random() * 500 - 250,\n      });\n    });\n\n    // Add edges with arrow type and size\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        size: 4,\n      });\n    });\n\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderEdgeLabels: true,\n      });\n\n      sigma.setGraph(graph);\n\n      const layout = new ForceSupervisor(graph, {\n        settings: {\n          gravity: 0.1, // Attract nodes toward the center\n          nodeStrength: -30, // Repulsion between nodes\n          edgeStrength: 0.1, // Attraction between connected nodes\n          slowDown: 1, // Reduce oscillation by increasing damping\n          maxIterations: 1000, // Cap the number of iterations\n        },\n      });\n      layout.start();\n\n      return () => {\n        layout.kill();\n      };\n    }\n  }, [sigma, graphData]);\n\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n\n    if (!searchQuery && !selectedCategory) {\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.musicType === selectedCategory;\n\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n\n      matchingNodes.forEach((node) => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n\n      graph.forEachNode((node) => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n\n      graph.forEachEdge((edge) => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}