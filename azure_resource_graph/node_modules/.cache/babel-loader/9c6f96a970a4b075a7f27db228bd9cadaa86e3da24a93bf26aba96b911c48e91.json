{"ast":null,"code":"/**\n * Graphology DFS Stack\n * =====================\n *\n * An experiment to speed up DFS in graphs and connected component detection.\n *\n * It should mostly save memory and not improve theoretical runtime.\n */\nfunction DFSStack(graph) {\n  this.graph = graph;\n  this.stack = new Array(graph.order);\n  this.seen = new Set();\n  this.size = 0;\n}\nDFSStack.prototype.hasAlreadySeenEverything = function () {\n  return this.seen.size === this.graph.order;\n};\nDFSStack.prototype.countUnseenNodes = function () {\n  return this.graph.order - this.seen.size;\n};\nDFSStack.prototype.forEachNodeYetUnseen = function (callback) {\n  var seen = this.seen;\n  var graph = this.graph;\n  graph.someNode(function (node, attr) {\n    // Useful early exit for connected graphs\n    if (seen.size === graph.order) return true; // break\n\n    // Node already seen?\n    if (seen.has(node)) return false; // continue\n\n    var shouldBreak = callback(node, attr);\n    if (shouldBreak) return true;\n    return false;\n  });\n};\nDFSStack.prototype.has = function (node) {\n  return this.seen.has(node);\n};\nDFSStack.prototype.push = function (node) {\n  var seenSizeBefore = this.seen.size;\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n  this.stack[this.size++] = node;\n  return true;\n};\nDFSStack.prototype.pushWith = function (node, item) {\n  var seenSizeBefore = this.seen.size;\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n  this.stack[this.size++] = item;\n  return true;\n};\nDFSStack.prototype.pop = function () {\n  if (this.size === 0) return;\n  return this.stack[--this.size];\n};\nmodule.exports = DFSStack;","map":{"version":3,"names":["DFSStack","graph","stack","Array","order","seen","Set","size","prototype","hasAlreadySeenEverything","countUnseenNodes","forEachNodeYetUnseen","callback","someNode","node","attr","has","shouldBreak","push","seenSizeBefore","add","pushWith","item","pop","module","exports"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/node_modules/graphology-indices/dfs-stack.js"],"sourcesContent":["/**\n * Graphology DFS Stack\n * =====================\n *\n * An experiment to speed up DFS in graphs and connected component detection.\n *\n * It should mostly save memory and not improve theoretical runtime.\n */\nfunction DFSStack(graph) {\n  this.graph = graph;\n  this.stack = new Array(graph.order);\n  this.seen = new Set();\n  this.size = 0;\n}\n\nDFSStack.prototype.hasAlreadySeenEverything = function () {\n  return this.seen.size === this.graph.order;\n};\n\nDFSStack.prototype.countUnseenNodes = function () {\n  return this.graph.order - this.seen.size;\n};\n\nDFSStack.prototype.forEachNodeYetUnseen = function (callback) {\n  var seen = this.seen;\n  var graph = this.graph;\n\n  graph.someNode(function (node, attr) {\n    // Useful early exit for connected graphs\n    if (seen.size === graph.order) return true; // break\n\n    // Node already seen?\n    if (seen.has(node)) return false; // continue\n\n    var shouldBreak = callback(node, attr);\n\n    if (shouldBreak) return true;\n\n    return false;\n  });\n};\n\nDFSStack.prototype.has = function (node) {\n  return this.seen.has(node);\n};\n\nDFSStack.prototype.push = function (node) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.stack[this.size++] = node;\n\n  return true;\n};\n\nDFSStack.prototype.pushWith = function (node, item) {\n  var seenSizeBefore = this.seen.size;\n\n  this.seen.add(node);\n\n  // If node was already seen\n  if (seenSizeBefore === this.seen.size) return false;\n\n  this.stack[this.size++] = item;\n\n  return true;\n};\n\nDFSStack.prototype.pop = function () {\n  if (this.size === 0) return;\n\n  return this.stack[--this.size];\n};\n\nmodule.exports = DFSStack;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQA,CAACC,KAAK,EAAE;EACvB,IAAI,CAACA,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,KAAK,GAAG,IAAIC,KAAK,CAACF,KAAK,CAACG,KAAK,CAAC;EACnC,IAAI,CAACC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,IAAI,CAACC,IAAI,GAAG,CAAC;AACf;AAEAP,QAAQ,CAACQ,SAAS,CAACC,wBAAwB,GAAG,YAAY;EACxD,OAAO,IAAI,CAACJ,IAAI,CAACE,IAAI,KAAK,IAAI,CAACN,KAAK,CAACG,KAAK;AAC5C,CAAC;AAEDJ,QAAQ,CAACQ,SAAS,CAACE,gBAAgB,GAAG,YAAY;EAChD,OAAO,IAAI,CAACT,KAAK,CAACG,KAAK,GAAG,IAAI,CAACC,IAAI,CAACE,IAAI;AAC1C,CAAC;AAEDP,QAAQ,CAACQ,SAAS,CAACG,oBAAoB,GAAG,UAAUC,QAAQ,EAAE;EAC5D,IAAIP,IAAI,GAAG,IAAI,CAACA,IAAI;EACpB,IAAIJ,KAAK,GAAG,IAAI,CAACA,KAAK;EAEtBA,KAAK,CAACY,QAAQ,CAAC,UAAUC,IAAI,EAAEC,IAAI,EAAE;IACnC;IACA,IAAIV,IAAI,CAACE,IAAI,KAAKN,KAAK,CAACG,KAAK,EAAE,OAAO,IAAI,CAAC,CAAC;;IAE5C;IACA,IAAIC,IAAI,CAACW,GAAG,CAACF,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC;;IAElC,IAAIG,WAAW,GAAGL,QAAQ,CAACE,IAAI,EAAEC,IAAI,CAAC;IAEtC,IAAIE,WAAW,EAAE,OAAO,IAAI;IAE5B,OAAO,KAAK;EACd,CAAC,CAAC;AACJ,CAAC;AAEDjB,QAAQ,CAACQ,SAAS,CAACQ,GAAG,GAAG,UAAUF,IAAI,EAAE;EACvC,OAAO,IAAI,CAACT,IAAI,CAACW,GAAG,CAACF,IAAI,CAAC;AAC5B,CAAC;AAEDd,QAAQ,CAACQ,SAAS,CAACU,IAAI,GAAG,UAAUJ,IAAI,EAAE;EACxC,IAAIK,cAAc,GAAG,IAAI,CAACd,IAAI,CAACE,IAAI;EAEnC,IAAI,CAACF,IAAI,CAACe,GAAG,CAACN,IAAI,CAAC;;EAEnB;EACA,IAAIK,cAAc,KAAK,IAAI,CAACd,IAAI,CAACE,IAAI,EAAE,OAAO,KAAK;EAEnD,IAAI,CAACL,KAAK,CAAC,IAAI,CAACK,IAAI,EAAE,CAAC,GAAGO,IAAI;EAE9B,OAAO,IAAI;AACb,CAAC;AAEDd,QAAQ,CAACQ,SAAS,CAACa,QAAQ,GAAG,UAAUP,IAAI,EAAEQ,IAAI,EAAE;EAClD,IAAIH,cAAc,GAAG,IAAI,CAACd,IAAI,CAACE,IAAI;EAEnC,IAAI,CAACF,IAAI,CAACe,GAAG,CAACN,IAAI,CAAC;;EAEnB;EACA,IAAIK,cAAc,KAAK,IAAI,CAACd,IAAI,CAACE,IAAI,EAAE,OAAO,KAAK;EAEnD,IAAI,CAACL,KAAK,CAAC,IAAI,CAACK,IAAI,EAAE,CAAC,GAAGe,IAAI;EAE9B,OAAO,IAAI;AACb,CAAC;AAEDtB,QAAQ,CAACQ,SAAS,CAACe,GAAG,GAAG,YAAY;EACnC,IAAI,IAAI,CAAChB,IAAI,KAAK,CAAC,EAAE;EAErB,OAAO,IAAI,CAACL,KAAK,CAAC,EAAE,IAAI,CAACK,IAAI,CAAC;AAChC,CAAC;AAEDiB,MAAM,CAACC,OAAO,GAAGzB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}