{"ast":null,"code":"var _jsxFileName = \"/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport Graph from \"graphology\";\nimport { circular } from \"graphology-layout/circular\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (!graphData) return;\n\n    // Create a multi-graph (to support multiple edges between nodes)\n    const graph = new Graph({\n      multi: true\n    });\n    const {\n      nodes,\n      edges\n    } = graphData;\n\n    // Add nodes\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType\n      });\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\",\n        // Render arrows for edges\n        size: 2\n      });\n    });\n\n    // Apply circular layout\n    circular.assign(graph);\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderLabels: true,\n        // Always show node labels\n        renderEdgeLabels: true,\n        // Always show edge labels\n        labelDensity: 1,\n        // Increase label density for better visibility\n        labelGridCellSize: 0,\n        // Disable grid-based label hiding\n        labelRenderedSizeThreshold: 0,\n        // Render labels regardless of zoom\n        edgeLabelSize: 14,\n        // Make edge labels larger\n        edgeLabelWeight: \"bold\" // Make edge labels bold\n      });\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n      return () => {\n        sigma.getGraph().clear(); // Clean up graph on unmount\n      };\n    }\n  }, [sigma, graphData]);\n\n  // Handle search and category filtering\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n    const graph = sigma.getGraph();\n    if (!searchQuery && !selectedCategory) {\n      // Show all nodes and edges if no filters are applied\n      graph.forEachNode(node => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge(edge => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n\n      // Find matching nodes based on search and category\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.resourceType === selectedCategory;\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n\n      // Include edges connected to matching nodes\n      matchingNodes.forEach(node => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n\n      // Show or hide nodes and edges based on matches\n      graph.forEachNode(node => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n      graph.forEachEdge(edge => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nDxB5KBteSRnUAOPD7k4lZbqGXg=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = ({\n  searchQuery,\n  selectedCategory,\n  graphData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"1rem\"\n    },\n    children: graphData ? /*#__PURE__*/_jsxDEV(SigmaContainer, {\n      children: /*#__PURE__*/_jsxDEV(GraphComponent, {\n        searchQuery: searchQuery,\n        selectedCategory: selectedCategory,\n        graphData: graphData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a JSON file to visualize the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","circular","jsxDEV","_jsxDEV","GraphComponent","searchQuery","selectedCategory","graphData","_s","sigma","containerRef","graph","multi","nodes","edges","forEach","node","addNode","id","label","size","color","resourceType","edge","addEdge","source","target","type","assign","setSettings","nodeColor","edgeArrowSizeRatio","renderLabels","renderEdgeLabels","labelDensity","labelGridCellSize","labelRenderedSizeThreshold","edgeLabelSize","edgeLabelWeight","setGraph","getGraph","clear","forEachNode","setNodeAttribute","forEachEdge","setEdgeAttribute","matchingNodes","Set","relevantEdges","attributes","matchesSearch","toLowerCase","includes","matchesCategory","add","shouldShow","has","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","style","display","flexDirection","gap","children","_c2","$RefreshReg$"],"sources":["/Users/fjodoin/Desktop/Research/AzureRT/azure_resource_graph/training/graphing/sigma-graph/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { SigmaContainer, useSigma } from \"@react-sigma/core\";\nimport Graph from \"graphology\";\nimport { circular } from \"graphology-layout/circular\";\n\nconst GraphComponent = ({ searchQuery, selectedCategory, graphData }) => {\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!graphData) return;\n\n    // Create a multi-graph (to support multiple edges between nodes)\n    const graph = new Graph({ multi: true });\n    const { nodes, edges } = graphData;\n\n    // Add nodes\n    nodes.forEach((node) => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 4,\n        color: node.color,\n        resourceType: node.resourceType,\n      });\n    });\n\n    // Add edges\n    edges.forEach((edge) => {\n      graph.addEdge(edge.source, edge.target, {\n        label: edge.label,\n        color: edge.color,\n        type: \"arrow\", // Render arrows for edges\n        size: 2,\n      });\n    });\n\n    // Apply circular layout\n    circular.assign(graph);\n\n    if (sigma) {\n      sigma.setSettings({\n        nodeColor: \"color\",\n        edgeArrowSizeRatio: 2,\n        renderLabels: true, // Always show node labels\n        renderEdgeLabels: true, // Always show edge labels\n        labelDensity: 1, // Increase label density for better visibility\n        labelGridCellSize: 0, // Disable grid-based label hiding\n        labelRenderedSizeThreshold: 0, // Render labels regardless of zoom\n        edgeLabelSize: 14, // Make edge labels larger\n        edgeLabelWeight: \"bold\", // Make edge labels bold\n      });\n\n      // Set the graph in Sigma\n      sigma.setGraph(graph);\n\n      return () => {\n        sigma.getGraph().clear(); // Clean up graph on unmount\n      };\n    }\n  }, [sigma, graphData]);\n\n  // Handle search and category filtering\n  useEffect(() => {\n    if (!sigma || !graphData) return;\n\n    const graph = sigma.getGraph();\n\n    if (!searchQuery && !selectedCategory) {\n      // Show all nodes and edges if no filters are applied\n      graph.forEachNode((node) => graph.setNodeAttribute(node, \"hidden\", false));\n      graph.forEachEdge((edge) => graph.setEdgeAttribute(edge, \"hidden\", false));\n    } else {\n      const matchingNodes = new Set();\n      const relevantEdges = new Set();\n\n      // Find matching nodes based on search and category\n      graph.forEachNode((node, attributes) => {\n        const matchesSearch = !searchQuery || attributes.label.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = !selectedCategory || attributes.resourceType === selectedCategory;\n\n        if (matchesSearch && matchesCategory) {\n          matchingNodes.add(node);\n        }\n      });\n\n      // Include edges connected to matching nodes\n      matchingNodes.forEach((node) => {\n        graph.forEachEdge(node, (edge, attributes, source, target) => {\n          relevantEdges.add(edge);\n          matchingNodes.add(source);\n          matchingNodes.add(target);\n        });\n      });\n\n      // Show or hide nodes and edges based on matches\n      graph.forEachNode((node) => {\n        const shouldShow = matchingNodes.has(node);\n        graph.setNodeAttribute(node, \"hidden\", !shouldShow);\n      });\n\n      graph.forEachEdge((edge) => {\n        const shouldShow = relevantEdges.has(edge);\n        graph.setEdgeAttribute(edge, \"hidden\", !shouldShow);\n      });\n    }\n\n    sigma.refresh();\n  }, [searchQuery, selectedCategory, sigma, graphData]);\n\n  return <div ref={containerRef} />;\n};\n\nconst GraphWrapper = ({ searchQuery, selectedCategory, graphData }) => {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      {graphData ? (\n        <SigmaContainer>\n          <GraphComponent\n            searchQuery={searchQuery}\n            selectedCategory={selectedCategory}\n            graphData={graphData}\n          />\n        </SigmaContainer>\n      ) : (\n        <p>Please upload a JSON file to visualize the graph.</p>\n      )}\n    </div>\n  );\n};\n\nexport default GraphWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}